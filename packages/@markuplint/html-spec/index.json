{
	"cites": [
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/acronym",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/applet",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/basefont",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bgsound",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/big",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/center",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dir",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/font",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frame",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/frameset",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/isindex",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/keygen",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/listing",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/math",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menuitem",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/multicol",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nextid",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nobr",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noembed",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noframes",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/param",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/plaintext",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rb",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rtc",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/spacer",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strike",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tt",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr",
		"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/xmp",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/cursor",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/discard",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/hkern",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/missing",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mpath",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/set",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tref",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view",
		"https://developer.mozilla.org/en-US/docs/Web/SVG/Element/vkern",
		"https://w3c.github.io/aria/",
		"https://w3c.github.io/graphics-aria/",
		"https://www.w3.org/TR/graphics-aria-1.0/",
		"https://www.w3.org/TR/html-aria/",
		"https://www.w3.org/TR/wai-aria-1.1/",
		"https://www.w3.org/TR/wai-aria-1.2/"
	],
	"def": {
		"#globalAttrs": {
			"#HTMLGlobalAttrs": {
				"accesskey": {
					"type": {
						"token": "OneCodePointChar",
						"ordered": true,
						"unique": true,
						"number": "zeroOrMore",
						"separator": "space"
					}
				},
				"autocapitalize": {
					"type": {
						"enum": ["off", "on", "none", "sentences", "words", "characters"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "sentences",
						"missingValueDefault": "default",
						"sameStates": {
							"none": ["off"],
							"sentences": ["on"]
						}
					}
				},
				"autocorrect": {
					"type": {
						"enum": ["", "on", "off"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "on",
						"missingValueDefault": "on",
						"sameStates": {
							"on": [""]
						}
					}
				},
				"autofocus": {
					"type": "Boolean"
				},
				"contenteditable": {
					"type": {
						"enum": ["", "true", "false", "plaintext-only"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "inherit",
						"missingValueDefault": "inherit",
						"sameStates": {
							"true": [""]
						}
					}
				},
				"dir": {
					"type": {
						"enum": ["ltr", "rtl", "auto"]
					}
				},
				"draggable": {
					"type": {
						"enum": ["true", "false"],
						"invalidValueDefault": "auto",
						"missingValueDefault": "auto"
					}
				},
				"enterkeyhint": {
					"type": {
						"enum": ["enter", "done", "go", "next", "previous", "search", "send"]
					}
				},
				"hidden": {
					"type": {
						"enum": ["", "hidden", "until-found"]
					}
				},
				"inert": {
					"type": "Boolean"
				},
				"inputmode": {
					"type": {
						"enum": ["none", "text", "tel", "url", "email", "numeric", "decimal", "search"]
					}
				},
				"is": {
					"type": "CustomElementName"
				},
				"itemid": {
					"type": "URL"
				},
				"itemprop": {
					"type": {
						"token": "ItemProp",
						"ordered": false,
						"unique": true,
						"separator": "space"
					}
				},
				"itemref": {
					"type": {
						"token": "DOMID",
						"separator": "space"
					},
					"condition": "[itemscope]"
				},
				"itemscope": {
					"type": "Boolean"
				},
				"itemtype": {
					"type": {
						"token": "AbsoluteURL",
						"ordered": false,
						"unique": true,
						"separator": "space"
					}
				},
				"lang": {
					"type": "BCP47"
				},
				"nonce": {
					"type": "Any"
				},
				"popover": {
					"type": {
						"enum": ["", "auto", "manual", "hint"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "manual",
						"missingValueDefault": "no popover",
						"sameStates": {
							"auto": [""]
						}
					}
				},
				"spellcheck": {
					"type": {
						"enum": ["", "true", "false"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "default",
						"missingValueDefault": "default",
						"sameStates": {
							"true": [""]
						}
					}
				},
				"style": {
					"type": "<css-declaration-list>"
				},
				"tabindex": {
					"type": "TabIndex"
				},
				"title": {
					"type": "Any"
				},
				"translate": {
					"type": {
						"enum": ["", "yes", "no"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "inherit",
						"missingValueDefault": "inherit",
						"sameStates": {
							"yes": [""]
						}
					}
				},
				"writingsuggestions": {
					"type": {
						"enum": ["", "true", "false"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "default",
						"missingValueDefault": "default",
						"sameStates": {
							"true": [""]
						}
					}
				},
				"class": {
					"type": "Any"
				},
				"id": {
					"type": "DOMID"
				},
				"slot": {
					"type": "NoEmptyAny"
				},
				"xmlns": {
					"type": "URL",
					"ineffective": "*"
				},
				"xml:lang": {
					"type": "BCP47",
					"deprecated": true
				},
				"xml:space": {
					"type": {
						"enum": ["default", "preserve"]
					},
					"defaultValue": "default",
					"deprecated": true
				},
				"elementtiming": {
					"type": "NoEmptyAny",
					"experimental": true
				}
			},
			"#GlobalEventAttrs": {
				"onabort": {
					"type": "FunctionBody"
				},
				"onauxclick": {
					"type": "FunctionBody"
				},
				"onbeforeinput": {
					"type": "FunctionBody"
				},
				"onbeforematch": {
					"type": "FunctionBody"
				},
				"onbeforetoggle": {
					"type": "FunctionBody"
				},
				"onblur": {
					"type": "FunctionBody"
				},
				"oncancel": {
					"type": "FunctionBody"
				},
				"oncanplay": {
					"type": "FunctionBody"
				},
				"oncanplaythrough": {
					"type": "FunctionBody"
				},
				"onchange": {
					"type": "FunctionBody"
				},
				"onclick": {
					"type": "FunctionBody"
				},
				"onclose": {
					"type": "FunctionBody"
				},
				"oncommand": {
					"type": "FunctionBody"
				},
				"oncontextlost": {
					"type": "FunctionBody"
				},
				"oncompositionstart": {
					"type": "FunctionBody"
				},
				"oncompositionupdate": {
					"type": "FunctionBody"
				},
				"oncompositionend": {
					"type": "FunctionBody"
				},
				"oncontextmenu": {
					"type": "FunctionBody"
				},
				"oncontextrestored": {
					"type": "FunctionBody"
				},
				"oncopy": {
					"type": "FunctionBody"
				},
				"oncuechange": {
					"type": "FunctionBody"
				},
				"oncut": {
					"type": "FunctionBody"
				},
				"ondblclick": {
					"type": "FunctionBody"
				},
				"ondrag": {
					"type": "FunctionBody"
				},
				"ondragend": {
					"type": "FunctionBody"
				},
				"ondragenter": {
					"type": "FunctionBody"
				},
				"ondragleave": {
					"type": "FunctionBody"
				},
				"ondragover": {
					"type": "FunctionBody"
				},
				"ondragstart": {
					"type": "FunctionBody"
				},
				"ondrop": {
					"type": "FunctionBody"
				},
				"ondurationchange": {
					"type": "FunctionBody"
				},
				"onemptied": {
					"type": "FunctionBody"
				},
				"onended": {
					"type": "FunctionBody"
				},
				"onerror": {
					"type": "FunctionBody"
				},
				"onfocus": {
					"type": "FunctionBody"
				},
				"onformdata": {
					"type": "FunctionBody"
				},
				"onfocusin": {
					"type": "FunctionBody"
				},
				"onfocusout": {
					"type": "FunctionBody"
				},
				"oninput": {
					"type": "FunctionBody"
				},
				"oninvalid": {
					"type": "FunctionBody"
				},
				"onkeydown": {
					"type": "FunctionBody"
				},
				"onkeypress": {
					"type": "FunctionBody"
				},
				"onkeyup": {
					"type": "FunctionBody"
				},
				"onload": {
					"type": "FunctionBody"
				},
				"onloadeddata": {
					"type": "FunctionBody"
				},
				"onloadedmetadata": {
					"type": "FunctionBody"
				},
				"onloadstart": {
					"type": "FunctionBody"
				},
				"onmousedown": {
					"type": "FunctionBody"
				},
				"onmouseenter": {
					"type": "FunctionBody"
				},
				"onmouseleave": {
					"type": "FunctionBody"
				},
				"onmousemove": {
					"type": "FunctionBody"
				},
				"onmouseout": {
					"type": "FunctionBody"
				},
				"onmouseover": {
					"type": "FunctionBody"
				},
				"onmouseup": {
					"type": "FunctionBody"
				},
				"onpaste": {
					"type": "FunctionBody"
				},
				"onpause": {
					"type": "FunctionBody"
				},
				"onplay": {
					"type": "FunctionBody"
				},
				"onplaying": {
					"type": "FunctionBody"
				},
				"onprogress": {
					"type": "FunctionBody"
				},
				"onratechange": {
					"type": "FunctionBody"
				},
				"onreset": {
					"type": "FunctionBody"
				},
				"onresize": {
					"type": "FunctionBody"
				},
				"onscroll": {
					"type": "FunctionBody"
				},
				"onscrollend": {
					"type": "FunctionBody"
				},
				"onsecuritypolicyviolation": {
					"type": "FunctionBody"
				},
				"onseeked": {
					"type": "FunctionBody"
				},
				"onseeking": {
					"type": "FunctionBody"
				},
				"onselect": {
					"type": "FunctionBody"
				},
				"onslotchange": {
					"type": "FunctionBody"
				},
				"onstalled": {
					"type": "FunctionBody"
				},
				"onsubmit": {
					"type": "FunctionBody"
				},
				"onsuspend": {
					"type": "FunctionBody"
				},
				"ontimeupdate": {
					"type": "FunctionBody"
				},
				"ontoggle": {
					"type": "FunctionBody"
				},
				"onvolumechange": {
					"type": "FunctionBody"
				},
				"onwaiting": {
					"type": "FunctionBody"
				},
				"onunload": {
					"type": "FunctionBody"
				},
				"onwheel": {
					"type": "FunctionBody"
				},
				"onanimationstart": {
					"type": "FunctionBody"
				},
				"onanimationiteration": {
					"type": "FunctionBody"
				},
				"onanimationend": {
					"type": "FunctionBody"
				},
				"onanimationcancel": {
					"type": "FunctionBody"
				},
				"ontransitionrun": {
					"type": "FunctionBody"
				},
				"ontransitionstart": {
					"type": "FunctionBody"
				},
				"ontransitionend": {
					"type": "FunctionBody"
				},
				"ontransitioncancel": {
					"type": "FunctionBody"
				},
				"onwebkitanimationend": {
					"type": "FunctionBody",
					"deprecated": true
				},
				"onwebkitanimationiteration": {
					"type": "FunctionBody",
					"deprecated": true
				},
				"onwebkitanimationstart": {
					"type": "FunctionBody",
					"deprecated": true
				},
				"onwebkittransitionend": {
					"type": "FunctionBody",
					"deprecated": true
				}
			},
			"#HTMLLinkAndFetchingAttrs": {
				"href": {
					"type": "URL"
				},
				"target": {
					"type": "NavigableTargetNameOrKeyword",
					"condition": "[href]"
				},
				"download": {
					"type": "Any",
					"condition": "[href]"
				},
				"ping": {
					"type": {
						"token": "HTTPSchemaURL",
						"separator": "space"
					},
					"condition": "[href]"
				},
				"rel": {
					"type": {
						"token": {
							"enum": [
								"alternate",
								"author",
								"bookmark",
								"external",
								"help",
								"license",
								"next",
								"nofollow",
								"noopener",
								"noreferrer",
								"opener",
								"prev",
								"search",
								"tag",
								"terms-of-service"
							]
						},
						"unique": true,
						"separator": "space"
					},
					"condition": "[href]"
				},
				"hreflang": {
					"type": "BCP47",
					"condition": "[href]"
				},
				"type": {
					"type": "MIMEType",
					"condition": "[href]"
				},
				"referrerpolicy": {
					"type": {
						"enum": [
							"",
							"no-referrer",
							"no-referrer-when-downgrade",
							"same-origin",
							"origin",
							"strict-origin",
							"origin-when-cross-origin",
							"strict-origin-when-cross-origin",
							"unsafe-url"
						]
					},
					"condition": "[href], [src]",
					"defaultValue": "strict-origin-when-cross-origin"
				},
				"loading": {
					"type": {
						"enum": ["lazy", "eager"],
						"invalidValueDefault": "eager",
						"missingValueDefault": "eager"
					}
				},
				"integrity": {
					"type": "Any"
				},
				"media": {
					"type": "<media-query-list>"
				},
				"crossorigin": {
					"type": {
						"enum": ["", "anonymous", "use-credentials"],
						"invalidValueDefault": "anonymous",
						"missingValueDefault": "No CORS",
						"sameStates": {
							"anonymous": [""]
						}
					}
				},
				"fetchpriority": {
					"type": {
						"enum": ["high", "low", "auto"],
						"invalidValueDefault": "auto",
						"missingValueDefault": "auto"
					}
				}
			},
			"#HTMLEmbededAndMediaContentAttrs": {
				"src": {
					"type": "URL"
				},
				"preload": {
					"type": {
						"enum": ["none", "metadata", "auto"],
						"invalidValueDefault": "implementation-defined",
						"missingValueDefault": "implementation-defined"
					}
				},
				"autoplay": {
					"type": "Boolean"
				},
				"loop": {
					"type": "Boolean"
				},
				"muted": {
					"type": "Boolean"
				},
				"controls": {
					"type": "Boolean"
				},
				"height": {
					"type": "Uint"
				},
				"srcset": {
					"type": "Srcset"
				},
				"sizes": {
					"type": "SourceSizeList"
				},
				"width": {
					"type": "Uint"
				}
			},
			"#HTMLFormControlElementAttrs": {
				"autocomplete": {
					"type": "AutoComplete"
				},
				"dirname": {
					"type": "NoEmptyAny"
				},
				"disabled": {
					"type": "Boolean"
				},
				"form": {
					"type": "DOMID"
				},
				"formaction": {
					"type": "URL"
				},
				"formenctype": {
					"type": {
						"enum": ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
						"invalidValueDefault": "application/x-www-form-urlencoded"
					}
				},
				"formmethod": {
					"type": {
						"enum": ["post", "get", "dialog"],
						"invalidValueDefault": "get"
					}
				},
				"formnovalidate": {
					"type": "Boolean"
				},
				"formtarget": {
					"type": "NavigableTargetNameOrKeyword"
				},
				"name": {
					"type": "NoEmptyAny"
				},
				"maxlength": {
					"type": "Uint"
				},
				"minlength": {
					"type": "Uint"
				},
				"readonly": {
					"type": "Boolean"
				},
				"required": {
					"type": "Boolean"
				}
			},
			"#HTMLTableCellElementAttrs": {
				"colspan": {
					"type": {
						"type": "integer",
						"gt": 0,
						"lte": 1000
					}
				},
				"rowspan": {
					"type": {
						"type": "integer",
						"gt": 0,
						"lte": 65534
					}
				},
				"headers": {
					"type": {
						"token": "DOMID",
						"ordered": false,
						"unique": true,
						"separator": "space"
					}
				}
			},
			"#ARIAAttrs": {
				"role": {
					"type": {
						"token": "NoEmptyAny",
						"separator": "space"
					}
				}
			},
			"#SVGAnimationAdditionAttrs": {
				"additive": {
					"type": {
						"enum": ["replace", "sum"]
					},
					"defaultValue": "replace"
				},
				"accumulate": {
					"type": {
						"enum": ["none", "sum"]
					},
					"defaultValue": "none"
				}
			},
			"#SVGAnimationAttributeTargetAttrs": {
				"attributeName": {
					"type": "XMLName"
				},
				"attributeType": {
					"type": {
						"enum": ["CSS", "XML", "auto"]
					},
					"defaultValue": "auto",
					"noUse": true
				}
			},
			"#SVGAnimationEventAttrs": {
				"onbegin": {
					"type": "FunctionBody"
				},
				"onend": {
					"type": "FunctionBody"
				},
				"onrepeat": {
					"type": "FunctionBody"
				}
			},
			"#SVGAnimationTargetElementAttrs": {
				"href": {
					"type": "URL"
				},
				"xlink:href": {
					"type": "URL",
					"deprecated": true
				}
			},
			"#SVGAnimationTimingAttrs": {
				"begin": {
					"type": "<begin-value-list>",
					"defaultValue": "0s"
				},
				"dur": {
					"type": [
						"<clock-value>",
						{
							"enum": ["media", "indefinite"]
						}
					],
					"defaultValue": "indefinite"
				},
				"end": {
					"type": "<end-value-list>"
				},
				"min": {
					"type": "<clock-value>",
					"defaultValue": "0s"
				},
				"max": {
					"type": "<clock-value>"
				},
				"restart": {
					"type": {
						"enum": ["always", "whenNotActive", "never"]
					},
					"defaultValue": "always"
				},
				"repeatCount": {
					"type": [
						"<number>",
						{
							"enum": ["indefinite"]
						}
					]
				},
				"repeatDur": {
					"type": [
						"<clock-value>",
						{
							"enum": ["indefinite"]
						}
					]
				},
				"fill": {
					"type": {
						"enum": ["freeze", "remove"]
					},
					"defaultValue": "remove"
				}
			},
			"#SVGAnimationValueAttrs": {
				"calcMode": {
					"type": {
						"enum": ["discrete", "linear", "paced", "spline"]
					},
					"defaultValue": "linear"
				},
				"values": {
					"type": "<list-of-value>"
				},
				"keyTimes": {
					"type": "<key-times>"
				},
				"keySplines": {
					"type": "<key-splines>"
				},
				"from": {
					"type": "<animatable-value>"
				},
				"to": {
					"type": "<animatable-value>"
				},
				"by": {
					"type": "<animatable-value>"
				},
				"accelerate": {
					"type": "<number-zero-one>",
					"defaultValue": "0"
				},
				"decelerate": {
					"type": "<number-zero-one>",
					"defaultValue": "0"
				},
				"autoReverse": {
					"type": {
						"enum": ["true", "false"]
					},
					"defaultValue": "false"
				},
				"speed": {
					"type": "<number>"
				}
			},
			"#SVGConditionalProcessingAttrs": {
				"requiredExtensions": {
					"type": {
						"token": "URL",
						"unique": true,
						"separator": "space"
					}
				},
				"systemLanguage": {
					"type": {
						"token": "BCP47",
						"unique": true,
						"separator": "comma"
					}
				},
				"requiredFeatures": {
					"type": "<list-of-svg-feature-string>",
					"deprecated": true
				}
			},
			"#SVGCoreAttrs": {
				"id": {
					"type": "DOMID"
				},
				"tabindex": {
					"type": "TabIndex"
				},
				"autofocus": {
					"type": "Boolean"
				},
				"lang": {
					"type": "BCP47"
				},
				"class": {
					"type": "Any"
				},
				"style": {
					"type": "<css-declaration-list>"
				},
				"xmlns": {
					"type": "URL",
					"ineffective": ":not(:root)"
				},
				"xml:space": {
					"type": {
						"enum": ["default", "preserve"]
					},
					"defaultValue": "default",
					"deprecated": true
				},
				"xml:lang": {
					"type": "BCP47",
					"deprecated": true
				},
				"xml:base": {
					"type": "URL",
					"deprecated": true
				}
			},
			"#SVGFilterPrimitiveAttrs": {
				"x": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				},
				"y": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				},
				"width": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "100%",
					"animatable": true
				},
				"height": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "100%",
					"animatable": true
				},
				"result": {
					"type": "<custom-ident>"
				},
				"in": {
					"type": [
						{
							"enum": [
								"SourceGraphic",
								"SourceAlpha",
								"BackgroundImage",
								"BackgroundAlpha",
								"FillPaint",
								"StrokePaint"
							],
							"disallowToSurroundBySpaces": false
						},
						"<custom-ident>"
					],
					"animatable": true
				}
			},
			"#SVGPresentationAttrs": {
				"cx": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"cy": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"height": {
					"type": ["<svg-length>", "<'height'>"],
					"defaultValue": "auto",
					"animatable": true
				},
				"width": {
					"type": ["<svg-length>", "<'width'>"],
					"defaultValue": "auto",
					"animatable": true
				},
				"x": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"y": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"r": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"rx": {
					"type": [
						"<svg-length>",
						"<percentage>",
						{
							"enum": ["auto"]
						}
					],
					"defaultValue": "auto",
					"animatable": true
				},
				"ry": {
					"type": [
						"<svg-length>",
						"<percentage>",
						{
							"enum": ["auto"]
						}
					],
					"defaultValue": "auto",
					"animatable": true
				},
				"d": {
					"type": "<svg-path>",
					"defaultValue": "none"
				},
				"transform": {
					"type": "<'transform'>",
					"defaultValue": "none",
					"animatable": true
				},
				"transform-origin": {
					"type": "<'transform-origin'>",
					"defaultValue": "50%, 50%",
					"animatable": true
				},
				"patternTransform": {
					"type": "<transform-list>",
					"animatable": true
				},
				"gradientTransform": {
					"type": "<transform-list>",
					"animatable": true
				},
				"alignment-baseline": {
					"type": "<'alignment-baseline'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"baseline-shift": {
					"type": "<'baseline-shift'>",
					"defaultValue": "0",
					"animatable": true
				},
				"clip-path": {
					"type": "<'clip-path'>",
					"defaultValue": "none",
					"animatable": true
				},
				"clip-rule": {
					"type": "<'clip-rule'>",
					"defaultValue": "nonzero",
					"animatable": true
				},
				"color": {
					"type": "<color>",
					"animatable": true
				},
				"color-interpolation": {
					"type": {
						"enum": ["auto", "sRGB", "linearRGB"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "sRGB",
					"animatable": true
				},
				"color-interpolation-filters": {
					"type": {
						"enum": ["auto", "sRGB", "linearRGB"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "linearRGB",
					"animatable": true
				},
				"cursor": {
					"type": "<'cursor'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"direction": {
					"type": "<'direction'>",
					"defaultValue": "ltr"
				},
				"display": {
					"type": "<'display'>",
					"defaultValue": "inline"
				},
				"dominant-baseline": {
					"type": "<'dominant-baseline'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"fill": {
					"type": "<'fill'>",
					"defaultValue": "black",
					"animatable": true
				},
				"fill-opacity": {
					"type": "<'fill-opacity'>",
					"defaultValue": "1",
					"animatable": true
				},
				"fill-rule": {
					"type": "<'fill-rule'>",
					"defaultValue": "nonzero",
					"animatable": true
				},
				"filter": {
					"type": "<'filter'>",
					"defaultValue": "none",
					"animatable": true
				},
				"flood-color": {
					"type": "<color>",
					"defaultValue": "black",
					"animatable": true
				},
				"flood-opacity": {
					"type": "<alpha-value>",
					"defaultValue": "1",
					"animatable": true
				},
				"font": {
					"type": "<'font'>",
					"animatable": true
				},
				"font-family": {
					"type": "<'font-family'>",
					"animatable": true
				},
				"font-size": {
					"type": "<svg-font-size>",
					"defaultValue": "medium",
					"animatable": true
				},
				"font-size-adjust": {
					"type": "<svg-font-size-adjust>",
					"defaultValue": "none",
					"animatable": true
				},
				"font-stretch": {
					"type": "<'font-stretch'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"font-style": {
					"type": "<'font-style'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"font-variant": {
					"type": "<'font-variant'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"font-weight": {
					"type": "<'font-weight'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"glyph-orientation-horizontal": {
					"type": "<'glyph-orientation-horizontal'>",
					"defaultValue": "0deg",
					"deprecated": true
				},
				"glyph-orientation-vertical": {
					"type": "<'glyph-orientation-vertical'>",
					"deprecated": true
				},
				"image-rendering": {
					"type": "<'image-rendering'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"isolation": {
					"type": "<'isolation'>",
					"defaultValue": "auto"
				},
				"letter-spacing": {
					"type": "<'letter-spacing'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"lighting-color": {
					"type": "<color>",
					"defaultValue": "white",
					"animatable": true
				},
				"marker": {
					"type": "<'marker'>",
					"animatable": true
				},
				"marker-end": {
					"type": "<'marker-end'>",
					"defaultValue": "none",
					"animatable": true
				},
				"marker-mid": {
					"type": "<'marker-mid'>",
					"defaultValue": "none",
					"animatable": true
				},
				"marker-start": {
					"type": "<'marker-start'>",
					"defaultValue": "none",
					"animatable": true
				},
				"mask": {
					"type": "<'mask'>",
					"animatable": true
				},
				"mask-type": {
					"type": "<'mask-type'>",
					"animatable": true
				},
				"opacity": {
					"type": "<alpha-value>",
					"defaultValue": "1",
					"animatable": true
				},
				"overflow": {
					"type": "<'overflow'>",
					"defaultValue": "visible",
					"animatable": true
				},
				"paint-order": {
					"type": "<'paint-order'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"pointer-events": {
					"type": "<'pointer-events'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"shape-rendering": {
					"type": "<'shape-rendering'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"stop-color": {
					"type": "<'color'>",
					"defaultValue": "black",
					"animatable": true
				},
				"stop-opacity": {
					"type": "<'opacity'>",
					"defaultValue": "1",
					"animatable": true
				},
				"stroke": {
					"type": "<'stroke'>",
					"defaultValue": "none",
					"animatable": true
				},
				"stroke-dasharray": {
					"type": "<'stroke-dasharray'>",
					"defaultValue": "none",
					"animatable": true
				},
				"stroke-dashoffset": {
					"type": "<'stroke-dashoffset'>",
					"defaultValue": "0",
					"animatable": true
				},
				"stroke-linecap": {
					"type": "<'stroke-linecap'>",
					"defaultValue": "butt",
					"animatable": true
				},
				"stroke-linejoin": {
					"type": "<'stroke-linejoin'>",
					"defaultValue": "miter",
					"animatable": true
				},
				"stroke-miterlimit": {
					"type": "<'stroke-miterlimit'>",
					"defaultValue": "4",
					"animatable": true
				},
				"stroke-opacity": {
					"type": "<'stroke-opacity'>",
					"defaultValue": "1",
					"animatable": true
				},
				"stroke-width": {
					"type": "<'stroke-width'>",
					"defaultValue": "1px",
					"animatable": true
				},
				"text-anchor": {
					"type": "<'text-anchor'>",
					"defaultValue": "start",
					"animatable": true
				},
				"text-decoration": {
					"type": "<'text-decoration'>",
					"animatable": true
				},
				"text-overflow": {
					"type": "<'text-overflow'>",
					"animatable": true
				},
				"text-rendering": {
					"type": "<'text-rendering'>",
					"defaultValue": "auto",
					"animatable": true
				},
				"unicode-bidi": {
					"type": "<'unicode-bidi'>",
					"defaultValue": "normal"
				},
				"vector-effect": {
					"type": {
						"enum": ["none", "non-scaling-stroke", "non-scaling-size", "non-rotation", "fixed-position"]
					},
					"defaultValue": "none",
					"animatable": true
				},
				"visibility": {
					"type": "<'visibility'>",
					"defaultValue": "visible",
					"animatable": true
				},
				"white-space": {
					"type": "<'white-space'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"word-spacing": {
					"type": "<'word-spacing'>",
					"defaultValue": "normal",
					"animatable": true
				},
				"writing-mode": {
					"type": "<'writing-mode'>",
					"defaultValue": "horizontal-tb"
				},
				"clip": {
					"type": "<'clip'>",
					"defaultValue": "auto",
					"animatable": true,
					"deprecated": true
				},
				"color-profile": {
					"type": "<'color-profile'>",
					"defaultValue": "auto",
					"animatable": true,
					"deprecated": true
				},
				"color-rendering": {
					"type": "<'color-rendering'>",
					"defaultValue": "auto",
					"animatable": true,
					"deprecated": true
				},
				"enable-background": {
					"type": "<'enable-background'>",
					"defaultValue": "accumulate",
					"deprecated": true
				},
				"kerning": {
					"type": "<'kerning'>",
					"defaultValue": "auto",
					"animatable": true,
					"deprecated": true
				}
			},
			"#SVGTransferFunctionAttrs": {
				"type": {
					"type": {
						"enum": ["identity", "table", "discrete", "linear", "gamma"]
					},
					"defaultValue": "identity",
					"animatable": true
				},
				"tableValues": {
					"type": "<list-of-numbers>",
					"animatable": true
				},
				"slope": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"intercept": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"amplitude": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"exponent": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"offset": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				}
			},
			"#XLinkAttrs": {
				"xlink:href": {
					"type": "URL",
					"deprecated": true
				},
				"xlink:title": {
					"type": "Any",
					"deprecated": true
				},
				"xlink:type": {
					"type": {
						"enum": ["simple"]
					},
					"defaultValue": "simple",
					"deprecated": true
				},
				"xlink:role": {
					"type": "Any",
					"deprecated": true
				},
				"xlink:arcrole": {
					"type": "URL",
					"deprecated": true
				},
				"xlink:show": {
					"type": {
						"enum": ["new", "replace", "embed", "other", "none"]
					},
					"defaultValue": "replace",
					"deprecated": true
				},
				"xlink:actuate": {
					"type": "Any",
					"deprecated": true
				}
			}
		},
		"#aria": {
			"1.3": {
				"roles": [
					{
						"name": "alert",
						"description": "A type of live region with important, and usually time-sensitive, information. See related alertdialog and status.\n\nAlerts are used to convey messages that might be immediately important to users. In the case of audio warnings, alerts provide an accessible alternative for hearing-impaired users. The alert role is applied to the element containing the alert message. An alert is a specialized form of the status role, which is processed as an atomic live region.\n\nAlerts are assertive live regions, which means they cause immediate notification for assistive technology users. If the operating system allows, the user agent SHOULD fire a system alert event through the accessibility API when the WAI-ARIA alert is created.\n\nNeither authors nor user agents are required to set or manage focus to an alert in order for it to be processed. Since alerts are not required to receive focus, authors SHOULD NOT require users to close an alert. If an author desires focus to move to a message when it is conveyed, the author SHOULD use alertdialog instead of alert.\n\nElements with the role alert have an implicit aria-live value of assertive, and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "alertdialog",
						"description": "A type of dialog that contains an alert message, where initial focus goes to an element within the dialog. See related alert and dialog.\n\nAlert dialogs are used to convey messages to alert the user. The alertdialog role goes on the node containing both the alert message and the rest of the dialog. Authors SHOULD make alert dialogs modal by ensuring that, while the alertdialog is shown, keyboard and mouse interactions only operate within the dialog. See aria-modal.\n\nUnlike alert, alertdialog can receive a response from the user. For example, to confirm that the user understands the alert being generated. When the alert dialog is displayed, authors SHOULD set focus to an active element within the alert dialog, such as a form control or confirmation button. The user agent SHOULD fire a system alert event through the accessibility API when the alert is created, provided one is specified by the intended accessibility API.\n\nAuthors SHOULD use aria-describedby on an alertdialog to reference the alert message element in the dialog. If they do not, an assistive technology can resort to its internal recovery mechanism to determine the contents of the alert message.",
						"generalization": ["alert", "dialog"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "application",
						"description": "A structure containing one or more focusable elements requiring user input, such as keyboard or gesture events, that do not follow a standard interaction pattern supported by a widget role.\n\nSome user agents and assistive technologies have a browse mode where standard input events, such as up and down arrow key events, are intercepted and used to control a reading cursor. This browse mode behavior prevents elements that do not have a widget role from receiving and using such keyboard and gesture events to provide interactive functionality.\n\nWhen there is a need to create an element with an interaction model that is not supported by any of the WAI-ARIA widget roles, authors MAY give that element role application. And, when a user navigates into an element with role application, assistive technologies that intercept standard input events SHOULD switch to a mode that passes most or all standard input events through to the web application.\n\nFor example, a presentation slide editor uses arrow keys to change the positions of textbox and image elements on the slide. There are not any WAI-ARIA widget roles that correspond to such an interaction model so an author could give the slide container role application, an aria-roledescription of \"Slide Editor\", and use aria-describedby to provide instructions.\n\nBecause only the focusable elements contained in an application element are accessible to users of some assistive technologies, authors MUST use one of the following techniques to ensure all non-decorative static text or image content inside an application is accessible:",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "article",
						"description": "A section of a page that consists of a composition that forms an independent part of a document, page, or site.\n\nAn article is not a navigational landmark, but can be nested to form a discussion where assistive technologies could pay attention to article nesting to assist the user in following the discussion. An article could be a forum post, a magazine or newspaper article, a web log entry, a user-submitted comment, or any other independent item of content. It is independent in that its contents could stand alone, for example in syndication. However, the element is still associated with its ancestors; for instance, contact information that applies to a parent body element still covers the article as well. When nesting articles, the child articles represent content that is related to the content of the parent article. For instance, a web log entry on a site that accepts user-submitted comments could represent the comments as articles nested within the article for the web log entry. Author, heading, date, or other information associated with an article does not apply to nested articles.\n\nWhen the user navigates to an element assigned the role of article, assistive technologies that typically intercept standard keyboard events SHOULD switch to document browsing mode, as opposed to passing keyboard events through to the web application. Some assistive technologies provide a feature allowing the user to navigate the hierarchy of any nested article elements.\n\nWhen an article is in the context of a feed, the author MAY specify values for aria-posinset and aria-setsize.",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "banner",
						"description": "A landmark that contains mostly site-oriented content, rather than page-specific content.\n\nSite-oriented content typically includes things such as the logo or identity of the site sponsor, and a site-specific search tool. A banner usually appears at the top of the page and typically spans the full width.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role banner. user agents SHOULD treat elements with role banner as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role banner.\n\nThe author SHOULD mark no more than one element on a page with the banner role.\n\nBecause document and application elements can be nested in the DOM, they can have multiple banner elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "blockquote",
						"description": "A section of content that is quoted from another source.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "button",
						"description": "An input that allows for user-triggered actions when clicked or pressed. See related link.\n\nButtons are mostly used for discrete actions. Standardizing the appearance of buttons enhances the user's recognition of the widgets as buttons and allows for a more compact display in toolbars.\n\nButtons support the optional attribute aria-pressed. Buttons with a non-empty aria-pressed attribute are toggle buttons. When aria-pressed is true the button is in a \"pressed\" state, when aria-pressed is false it is not pressed. If the attribute is not present, the button is a simple command button.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-pressed"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "caption",
						"description": "Visible content that names, or describes a figure, grid, group, radiogroup, table or treegrid.\n\nWhen using caption authors SHOULD ensure:\n\nIf the caption represents an accessible name for its containing element, authors SHOULD specify aria-labelledby on the containing element to reference the element with role caption.\n\nIf a caption contains content that serves as both a name and description for its containing element, authors MAY instead specify aria-labelledby to reference an element within the caption that represents the \"name\" of the containing element, and specify aria-describedby to reference an element within the caption that represents the descriptive content.\n\nIf the caption represents a long-form description, or if the description contains semantic elements which are important in understanding the description, authors MAY instead specify aria-labelledby to reference an element within the caption that represents the \"name\" of the containing element, and specify aria-details to reference an element within the caption that represents the descriptive content.\n\nIf a caption contains only a description, without a suitable text string to serve as the accessible name for its containing element, then aria-label or aria-labelledby MAY be used to provide an accessible name, and the caption MAY be treated solely as descriptive content, referenced via aria-details.",
						"generalization": ["section"],
						"requiredContextRole": ["figure", "grid", "group", "radiogroup", "table", "treegrid"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "cell",
						"description": "A cell in a tabular container. See related gridcell.\n\nAuthors MUST ensure elements with role cell are the accessibility children of an element with the role row.",
						"generalization": ["section"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-colindextext"
							},
							{
								"name": "aria-colspan"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-rowindextext"
							},
							{
								"name": "aria-rowspan"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "checkbox",
						"description": "A checkable input that has three possible values: true, false, or mixed.\n\nThe aria-checked attribute of a checkbox indicates whether the input is checked (true), unchecked (false), or represents a group of elements that have a mixture of checked and unchecked values (mixed). Many checkboxes do not use the mixed value, and thus are effectively boolean checkboxes.\n\nDue to the strong native semantics of HTML's native checkbox, authors are advised against using aria-checked on an input type=checkbox. Rather, use the native checked attribute or the indeterminate IDL attribute to specify the checkbox's \"checked\" or \"mixed\" state, respectively.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "code",
						"description": "A section whose content represents a fragment of computer code.\n\nThe primary purpose of the code role is to inform assistive technologies that the content is computer code and thus might require special presentation, in particular with respect to synthesized speech. More specifically, screen readers and other tools which provide text-to-speech presentation of content SHOULD prefer full punctuation verbosity to ensure common symbols (e.g. \"-\") are spoken.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "columnheader",
						"description": "A cell containing header information for a column.\n\ncolumnheader can be used as a column header in a table or grid. It could also be used in a pie chart to show a similar relationship in the data.\n\nThe columnheader establishes a relationship between it and all cells in the corresponding column. It is the structural equivalent to an HTML th element with a column scope.\n\nAuthors MUST ensure elements with role columnheader are the accessibility children of an element with the role row.\n\nApplying the aria-selected state on a columnheader MUST not cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding column. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the columnheader role can be used in both interactive grids and non-interactive tables, the use of aria-readonly and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-required or aria-readonly in a columnheader that descends from a table, and user agents SHOULD NOT expose either property to assistive technologies unless the columnheader descends from a grid.\n\nBecause cells are organized into rows, there is not a single container element for the column. The column is the set of gridcell elements in a particular position within their respective row containers.\n\nWhile aria-disabled is currently supported on columnheader, in a future version the working group plans to prohibit its use on elements with role columnheader except when the element is in the context of a grid or treegrid.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colindextext",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowindextext",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "combobox",
						"description": "An input that controls another element, such as a listbox or grid, that can dynamically pop up to help the user set the value of the input.\n\nThe Guidance for combobox has changed significantly in ARIA 1.2 due to problems with implementation of the previous patterns. Authors and developers of User Agents, Assistive Technologies, and Conformance Checkers are advised to review this section carefully to understand the changes. Explanation of the changes is available in the ARIA repository wiki.\n\nA combobox functionally combines a named input field with the ability to assist value selection via a supplementary popup element. A combobox input MAY be either a single-line text field that supports editing and typing or an element that only displays the current value of the combobox. If the combobox supports text input and provides autocompletion behavior as described in aria-autocomplete, authors MUST set aria-autocomplete on the combobox element to the value that corresponds to the provided behavior.\n\nTypically, the initial state of a combobox is collapsed. In the collapsed state, only the combobox element and a separate, optional popup control button are visible. A combobox is said to be expanded when both the combobox element showing its current value and its associated popup element are visible. Authors MUST set aria-expanded to true on an element with role combobox when it is expanded and false when it is collapsed.\n\nElements with the role combobox have an implicit aria-haspopup value of listbox. If the combobox popup element has a role other than listbox, authors MUST specify an aria-haspopup value of tree, grid, or dialog that corresponds to the role of its popup.\n\nIf the user interface includes an additional icon that allows the visibility of the popup to be controlled via pointer and touch events, authors SHOULD ensure that element has role button, that it is focusable but not included in the page Tab sequence, and that it is not a descendant of the element with role combobox. In addition, to be keyboard accessible, authors SHOULD provide keyboard mechanisms for moving focus between the combobox element and elements contained in the popup. For example, one common convention is that Down Arrow moves focus from the input to the first focusable descendant of the popup element. If the popup element supports aria-activedescendant, in lieu of moving focus, such keyboard mechanisms can control the value of aria-activedescendant on the combobox element. When a descendant of the popup element is active, authors MAY set aria-activedescendant on the combobox to a value that refers to the active element within the popup while focus remains on the combobox element.\n\nUser agents MUST expose the value of elements with role combobox to assistive technologies. The value of a combobox is represented by one of the following:\n\nPlease review the following carefully. As a result of these changes a combobox following the ARIA 1.1 combobox specification will no longer conform with the ARIA specification.\n\nThe structural requirements for combobox defined by this version of the specification are different from the requirements defined by ARIA 1.0 and ARIA 1.1:\n\nThe features and behaviors of combobox implementations vary widely. Consequently, there are many important authoring considerations. See the ARIA Authoring Practices Guide for additional details on implementing combobox design patterns.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls"
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded",
								"required": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "command",
						"description": "A form of widget that performs an action but does not receive input data.\n\ncommand is an abstract role used for the ontology. Authors MUST NOT use commmand role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "comment",
						"description": "A comment contains content expressing reaction to other content.\n\nComments can annotate any visible content, from small spans of text, to other comments, to entire articles. Authors SHOULD identify the relationships between comments and the commented content, as follows:\n\nIf the author has not explicitly declared aria-level, aria-posinset, or aria-setsize for a comment element, user agents MUST automatically compute the missing values and expose them to assistive technologies.",
						"generalization": ["article"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "complementary",
						"description": "A landmark that is designed to be complementary to the main content that it is a sibling to, or a direct descendant of. The contents of a complementary landmark would be expected to remain meaningful if it were to be separated from the main content it is relevant to.\n\nThere are various types of content that would appropriately have this role. For example, in the case of a portal, this can include but not be limited to show times, current weather, related articles, or stocks to watch. If the complementary content is completely separable from the main content, it might be appropriate to use a more general role.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role complementary. user agents SHOULD treat elements with role complementary as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role complementary.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "composite",
						"description": "A widget that can contain navigable accessibility descendants.\n\nAuthors SHOULD ensure that a composite widget exists as a single navigation stop within the larger navigation system of the web page. Once the composite widget has focus, authors SHOULD provide a separate navigation mechanism for users to navigate to elements that are accessibility descendants of the composite element.\n\ncomposite is an abstract role used for the ontology. Authors MUST NOT use composite role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "contentinfo",
						"description": "A landmark that contains information about the parent document.\n\nExamples of information included in this region of the page are copyrights and links to privacy statements.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role contentinfo. user agents SHOULD treat elements with role contentinfo as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role contentinfo.\n\nThe author SHOULD mark no more than one element on a page with the contentinfo role.\n\nBecause document and application elements can be nested in the DOM, they can have multiple contentinfo elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "definition",
						"description": "A definition of a term or concept. See related term.\n\nAuthors MUST identify the element being defined and assign that element a role of term.\n\nAuthors SHOULD NOT use the definition role on interactive elements such as form controls because doing so could prevent users of assistive technologies from interacting with those elements.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "deletion",
						"description": "A deletion represents content that is marked as removed, content that is being suggested for removal, or content that is no longer relevant in the context of its accompanying content. See related insertion.\n\nDeletions are typically used to either mark differences between two versions of content or to designate content suggested for removal in scenarios where multiple people are revising content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "dialog",
						"description": "A dialog is a descendant window of the primary window of a web application. For HTML pages, the primary application window is the entire web document.\n\nDialogs are often used to prompt the user to enter or respond to information, or can represent content related to understanding or modifying the content of the primary application window. A dialog that is designed to interrupt workflow and prevent users from interacting with the primary web application is usually modal. See related alertdialog. A dialog that allows for the user to switch between interacting with the content of the primary web application and the content the dialog is usually modeless (i.e., non-modal). In lieu of using robust host language features for marking content of the primary web application as inert, authors SHOULD use the aria-modal attribute, and constrain focus to dialogs. See the WAI-ARIA Authoring Practices: Dialog (modal) pattern for additional details on implementing modal dialog design patterns.\n\nAuthors MUST provide an accessible name for a dialog, which can be done with the aria-label or aria-labelledby attribute.\n\nAuthors SHOULD ensure that all dialogs (both modal and non-modal) have at least one focusable descendant element. Authors SHOULD focus an element in the modal dialog when it is displayed, and authors SHOULD constrain keyboard focus to focusable elements within a modal dialog, until dismissed.\n\nAuthors SHOULD provide a dialog an accessible description, with the aria-describedby attribute, for instances where authors have set initial keyboard focus on an element that follows content that outlines the purpose of the dialog. Assistive technology SHOULD give precedence to exposing author defined dialog accessible descriptions when a dialog is invoked and user focus is moved to a descendant of the dialog element.\n\nAuthors are strongly encouraged to use aria-describedby, rather than aria-description, to provide descriptions to dialogs. While aria-description could be used to provide an accessible description for a dialog, it will provide a better and more consistent user experience to reference visible content that can also be independently read by all users. Doing so will help ensure important descriptive information is less likely to be missed.\n\nIn the following example, the first text field will receive initial focus when the dialog is rendered. As this means focus will be set \"after\" the preceding content that provides instructions for the form fields, an aria-describedby attribute is used to expose this content as a description for the dialog.\n\nIn the description of this role, the term \"web application\" does not refer to the application role, which specifies specific assistive technology behaviors.",
						"generalization": ["window"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "directory",
						"description": "[Deprecated in ARIA 1.2] A list of references to members of a group, such as a static table of contents.\n\nAs exposed by accessibility APIs, the directory role is essentially equivalent to the list role. So, using directory does not provide any additional benefits to assistive technology users. Authors are advised to treat directory as deprecated and to use list, or a host language's equivalent semantics instead.\n\nA directory is a static table of contents, whether linked or unlinked. This includes tables of contents built with lists, including nested lists. Dynamic tables of contents, however, might use a tree role instead.",
						"deprecated": true,
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "document",
						"description": "An element containing content that assistive technology users might want to browse in a reading mode.\n\nWhen user agent focus moves to an element assigned the role of document, assistive technologies having a reading mode for browsing static content MAY switch to that reading mode and intercept standard input events, such as Up or Down arrow keyboard events, to control the reading cursor.\n\nBecause assistive technologies that have a reading mode default to that mode for all elements except for those with either a widget or application role, the only circumstance where the document role is useful for changing assistive technology behavior is when the element with role document is a focusable child element of a widget or application. For example, given an application element which contains some static rich text, the author can apply role document to the element containing the text and give it a tabindex of 0. When a screen reader user presses the Tab key and places focus on the document element, the user will be able to read the text with the screen reader's reading cursor.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "emphasis",
						"description": "One or more emphasized characters. See related strong.\n\nThe purpose of the emphasis role is to stress or emphasize content. It is not for communicating changes in typographical presentation that do not impact the meaning of the content. Authors SHOULD use the emphasis role only if its absence would change the meaning of the content.\n\nThe emphasis role is not intended to convey importance; for that purpose, the strong role is more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "feed",
						"description": "A scrollable list of articles where scrolling might cause articles to be added to or removed from either end of the list.\n\nA feed enables users of assistive technologies that have a document browse mode, such as screen readers, to use the browse mode reading cursor to both read and scroll through a stream of rich content that might continue scrolling infinitely by loading more content as the user reads. In a feed, assistive technologies provide a web application with signals of the user's reading cursor movement by moving user agent focus, enabling the application to both add new content and visually position content as the user browses the page. The feed also lets authors inform assistive technologies when additions and removals are occurring so assistive technologies can more reliably update their reading view without disrupting reading or degrading performance.\n\nFor example, a feed could be used to present a stream of news stories where each article contains a story with text, links, images, and comments as well as widgets for sharing and commenting. As a screen reader user reads and interacts with each story and moves the screen reader reading cursor from story to story, each story scrolls into view and, as needed, new stories are loaded.\n\nA feed is a container element whose children have role article. When articles are added or removed from either or both ends of a feed, authors SHOULD set aria-busy to true on the feed element before the changes are made and set it to false after the changes are complete. Authors SHOULD avoid inserting or removing articles in the middle of a feed. These requirements help assistive technologies gracefully respond to changes in the feed content that occur simultaneously with user commands to move the reading cursor within the feed.\n\nAuthors SHOULD make each article in a feed focusable and ensure that the application scrolls an article into view when user agent focus is set on the article or one of its descendant elements. For example, in HTML, each article element should have a tabindex value of either -1 or 0.\n\nWhen an assistive technology reading cursor moves from one article to another, assistive technologies SHOULD set user agent focus on the article that contains the reading cursor. If the reading cursor lands on a focusable element inside the article, the assistive technology MAY set focus on that element in lieu of setting focus on the containing article.\n\nBecause the ability to scroll to another article with an assistive technology reading cursor depends on the presence of another article in the page, authors SHOULD attempt to load additional articles before user agent focus reaches an article at either end of the set of articles that has been loaded. Alternatively, authors MAY include an article at either or both ends of the loaded set of articles that includes an element, such as a button, that lets the user request more articles to be loaded.\n\nIn addition to providing a brief label, authors MAY apply aria-describedby to article elements in a feed to suggest to screen readers which elements to speak after the label when users navigate by article. Screen readers MAY provide users with a way to quickly scan feed content by speaking both the label and accessible description when navigating by article, enabling the user to ignore repetitive or less important elements, such as embedded interaction widgets, that the author has left out of the description.\n\nAuthors SHOULD provide keyboard commands for moving focus among articles in a feed so users who do not utilize an assistive technology that provides article navigation features can use the keyboard to navigate the feed.\n\nIf the number of articles available in a feed supply is static, authors MAY specify aria-setsize on article elements in that feed. However, if the total number is extremely large, indefinite, or changes often, authors MAY set aria-setsize to -1 to communicate the unknown size of the set.\n\nSee the ARIA Authoring Practices Guide for additional details on implementing a feed design pattern.",
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["article"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "figure",
						"description": "A perceivable section of content that typically contains a graphical document, images, media player, code snippets, or example text. The parts of a figure MAY be user-navigable.\n\nAuthors SHOULD provide a reference to the figure from the main text, but the figure need not be displayed at the same location as the referencing element. Authors MAY provide a figure a caption which can include its name, descriptive text, or both. If a caption is provided, and it serves as a description to the contents of the figure, authors SHOULD associate it to the figure element using aria-details.\n\nAuthors MAY provide a figure an accessible name using aria-label or use aria-labelledby to reference other text in the page to serve as the element's label and accessible name.\n\nPlease refer to the caption role for more information on how to associate a figure with its caption.\n\nAssistive technologies SHOULD enable users to quickly navigate to figures. User agents MAY enable users to quickly navigate to figures.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "form",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a form. See related search.\n\nA form can contain a mix of host language form controls, scripted controls, and hyperlinks. Authors are reminded to use native host language semantics to create form controls whenever possible. If the purpose of a form is to submit search criteria, authors SHOULD use the search role instead of the generic form role.\n\nAuthors MUST give each element with role form a brief label that describes the purpose of the form. Authors SHOULD reference a visible label with aria-labelledby if a visible label is present. Authors SHOULD include the label inside of a heading whenever possible. The heading MAY be an instance of the standard host language heading element or an instance of an element with role heading.\n\nIf an author uses a script to submit a form based on a user action that would otherwise not trigger an onsubmit event (for example, a form submission triggered by the user changing a form element's value), the author SHOULD provide the user with advance notification of the behavior.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role form. User agents SHOULD treat elements with role form and an accessible name as navigational landmarks. User agents MAY enable users to quickly navigate to elements with role form.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "generic",
						"description": "A nameless container element that has no semantic meaning on its own.\n\nThe generic role is intended for use as the implicit role of generic elements in host languages (such as HTML div or span), so is primarily for implementors of user agents. Authors SHOULD NOT use this role in content. Authors MAY use presentation or none to remove implicit accessibility semantics, or a semantic container role such as group to semantically group descendants in a named container.\n\nLike an element with role presentation, an element with role generic can provide a limited number of accessible states and properties for its descendants, such as aria-live attributes.\n\nHowever, unlike elements with role presentation, user agents expose generic elements in accessibility APIs when permitted accessibility attributes have been specified. User agents MAY otherwise ignore generic elements if such permitted attributes have not been specified.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							}
						],
						"prohibitedProperties": [
							"aria-braillelabel",
							"aria-brailleroledescription",
							"aria-label",
							"aria-labelledby",
							"aria-roledescription"
						]
					},
					{
						"name": "grid",
						"description": "A composite widget containing a collection of one or more rows with one or more cells where some or all cells in the grid are focusable by using methods of two-dimensional navigation, such as directional arrow keys.\n\nThe grid role does not imply a specific visual, e.g., tabular, presentation. It describes relationships among elements. It can be used for purposes as simple as grouping a collection of checkboxes or navigation links or as complex as creating a full-featured spreadsheet application.\n\nThe cell elements of a grid have role gridcell. Authors MAY designate a cell as a row or column header by using either the rowheader or columnheader role in lieu of the gridcell role. Authors MUST ensure elements with role gridcell, columnheader, or rowheader are accessibility children of elements with role row, which are in turn are accessibility children of an element with role rowgroup, or grid.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants of a grid as described in Managing Focus. When a user is navigating the grid content with a keyboard, authors SHOULD set focus as follows:\n\nAuthors SHOULD provide a mechanism for changing to an interaction or edit mode that allows users to navigate and interact with content contained inside a focusable cell if that focusable cell contains any of the following:\n\nFor example, if a cell in a spreadsheet contains a combobox or editable text, the Enter key might be used to activate a cell interaction or editing mode when that cell has focus so the directional arrow keys can be used to operate the contained combobox or textbox. Depending on the implementation, pressing Enter again, Tab, Escape, or another key might switch the application back to the grid navigation mode.\n\nAuthors MAY use a gridcell to display the result of a formula, which could be editable by the user. In a spreadsheet application, for example, a gridcell might show a value calculated from a formula until the user activates the gridcell for editing when a textbox appears in the gridcell containing the formula in an editable state.\n\nIf aria-readonly is set on an element with role grid, user agents MUST propagate the value to all gridcell elements that are accessibility descendants of that grid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nIn a grid that provides cell content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, the value of aria-readonly, whether specified for a grid or individual cells, only indicates whether the content contained in cells is editable. It does not represent availability of functions for navigating or manipulating the grid itself.\n\nAn unspecified value for aria-readonly does not imply that a grid or a gridcell contains editable content. For example, if a grid presents a collection of elements that are not editable, such as a collection of link elements representing dates in a datepicker, it is not necessary for the author to specify a value for aria-readonly.\n\nAuthors MAY indicate that a focusable gridcell is selectable as the object of an action with the aria-selected attribute. If the grid allows multiple gridcells to be selected, the author SHOULD set aria-multiselectable to true on the element with role grid.\n\nSince WAI-ARIA can augment an element of the host language, a grid can reuse the elements and attributes of a native table, such as an HTML table element. For example, if an author applies the grid role to an HTML table element, the author does not need to apply the row and gridcell roles to the descendant HTML tr and td elements because the user agent will automatically make the appropriate translations. When the author is reusing a native host language table element and needs a gridcell element to span multiple rows or columns, the author SHOULD apply the appropriate host language attributes instead of WAI-ARIA aria-rowspan or aria-colspan properties.\n\nSee the ARIA Authoring Practices Guide for additional details on implementing grid design patterns.",
						"generalization": ["composite", "table"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["caption", "row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "gridcell",
						"description": "A cell in a grid or treegrid.\n\nA gridcell can be focusable, editable, and selectable. A gridcell can have relationships such as aria-controls to address the application of functional relationships.\n\nIf an author intends a gridcell to have a row header, column header, or both, and if the relevant headers cannot be determined from the DOM structure, authors SHOULD explicitly indicate which header cells are relevant to the gridcell by applying aria-describedby on the gridcell and referencing elements with role rowheader or columnheader.\n\nIn a treegrid, authors MAY define a gridcell as expandable by using the aria-expanded attribute. If the aria-expanded attribute is provided, it applies only to the individual cell. It is not a proxy for the container row, which also can be expanded. The main use case for providing this attribute on a gridcell is pivot table behavior.\n\nAuthors MUST ensure elements with role gridcell are accessibility children of an element with the role row.",
						"generalization": ["cell", "widget"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colindextext",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowindextext",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "group",
						"description": "A set of user interface objects that is not intended to be included in a page summary or table of contents by assistive technologies.\n\nContrast with region, which is a grouping of user interface objects that will be included in a page summary or table of contents.\n\nAuthors SHOULD use a group to form a logical collection of items in a widget, such as children in a tree widget forming a collection of siblings in a hierarchy. However, when a group is used in the context of a listbox, for example, authors MUST limit its children to option elements. Therefore, proper handling of group by authors and assistive technologies is determined by the context in which it is provided.\n\nAuthors MAY nest group elements. If a section is significant enough to warrant inclusion in the web page's table of contents, the author SHOULD assign it a role of region or a standard landmark role.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "heading",
						"description": "A heading for a section of the page.\n\nTo ensure elements with a role of heading are organized into a logical outline, authors MUST use the aria-level attribute to indicate the proper nesting level.",
						"generalization": ["sectionhead"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"required": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "image",
						"description": "A container for a collection of elements that form an image. See synonym img.\n\nAn img can contain captions and descriptive text, as well as multiple image files that when viewed together give the impression of a single image. An img represents a single graphic within a document, whether or not it is formed by a collection of drawing objects. In order for an element with a role of img to be perceivable, authors MUST provide the element with an accessible name. This can be done using the aria-label or aria-labelledby attribute.\n\nThe image role was added to ARIA in version 1.3 as a synonym of the ARIA 1.0 img role. The image role improves syntactic consistency with the names of other roles, which are complete words or concatenations of complete words.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "img",
						"description": "A container for a collection of elements that form an image. See synonym image.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "input",
						"description": "A generic type of widget that allows user input.\n\ninput is an abstract role used for the ontology. Authors MUST NOT use input role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "insertion",
						"description": "An insertion contains content that is marked as added or content that is being suggested for addition. See related deletion.\n\nInsertions are typically used to either mark differences between two versions of content or to designate content suggested for addition in scenarios where multiple people are revising content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "landmark",
						"description": "A perceivable section containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nlandmark is an abstract role used for the ontology. Authors MUST NOT use landmark role in content.\n\nAuthors designate the purpose of the content by assigning a role that is a subclass of the landmark role and, when needed, by providing a brief, descriptive label.\n\nElements with a role that is a subclass of the landmark role are known as landmark regions or navigational landmark regions.\n\nAssistive technologies SHOULD enable users to quickly navigate to landmark regions. user agents MAY enable users to quickly navigate to landmark regions.",
						"isAbstract": true,
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "link",
						"description": "An interactive reference to an internal or external resource that, when activated, causes the user agent to navigate to that resource. See related button.\n\nIf this is a native link in the host language (such as an HTML anchor with an href value), activating the link causes the user agent to navigate to that resource. If this is a simulated link, the author is responsible for managing navigation.\n\nIf pressing the link triggers an action but does not change browser focus or page location, authors are advised to consider using the button role instead of the link role.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "list",
						"description": "A section containing listitem elements. See related listbox.\n\nLists contain children whose role is listitem.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["listitem"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listbox",
						"description": "A widget that allows the user to select one or more items from a list of choices. See related combobox and list.\n\nItems within the list are static and, unlike standard HTML select elements, can contain images. List boxes contain children whose role is option or elements whose role is group which in turn contain children whose role is option.\n\nTo be keyboard accessible, authors SHOULD manage focus of option descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role listbox have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > option", "option"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listitem",
						"description": "A single item in a list or directory.\n\nAuthors MUST ensure elements whose role is listitem are accessibility children of an element whose role is list.",
						"generalization": ["section"],
						"requiredContextRole": ["directory", "list"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "log",
						"description": "A type of live region where new information is added in meaningful order and old information can disappear. See related marquee.\n\nExamples include chat logs, messaging history, game log, or an error log. In contrast to other live regions, in this role there is a relationship between the arrival of new items in the log and the reading order. The log contains a meaningful sequence and new information is added only to the end of the log, not at arbitrary points.\n\nElements with the role log have an implicit aria-live value of polite.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "main",
						"description": "A landmark containing the main content of a document.\n\nThis marks the content that is directly related to or expands upon the central topic of the document. The main role is a non-obtrusive alternative for \"skip to main content\" links, where the navigation option to go to the main content (or other landmarks) is provided by assistive technologies, or by a user agent or browser extension, through a keyboard shortcut or UI feature such as a side panel or dialog.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role main. user agents SHOULD treat elements with role main as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role main.\n\nThe author SHOULD mark no more than one element on a page with the main role.\n\nBecause document and application elements can be nested in the DOM, they can have multiple main elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "mark",
						"description": "Content which is marked or highlighted for reference or notation purposes, due to the content's relevance in the enclosing context.\n\nExample uses for mark include:\n\nAuthors SHOULD NOT use mark for purely decorative styling such as syntax highlighting.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "marquee",
						"description": "A type of live region where non-essential information changes frequently. See related log.\n\nCommon usages of marquee include stock tickers and ad banners. The primary difference between a marquee and a log is that logs usually have a meaningful order or sequence of important content changes.\n\nElements with the role marquee have an implicit aria-live value of off.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "math",
						"description": "Content that represents a mathematical expression.\n\nContent with the role math is intended to be marked up in an accessible format such as MathML [MathML3], or with another type of textual representation such as TeX or LaTeX, which can be converted to an accessible format by native browser implementations or a polyfill library.\n\nWhile it is not ideal to use an image of a mathematical expression, there exists a significant amount of legacy content where images are used to represent mathematical expressions. Authors SHOULD ensure that images of math are labeled by text that describes the mathematical expression as it might be spoken.\n\nBrowsers that support native implementations of MathML are able to provide a more robust, accessible math experience than can be accomplished with plain text approximations of math. Some rendering engines have close integration with screen readers that allow spacial touch exploration of the formula and refreshable braille display output in the Nemeth Braille format. This level of integration is not supported with images of mathematical formulas, even if the author provides a plain text approximation.\n\nAt the time of this writing, some mainstream browsers do not support MathML natively, and must be retrofit using a JavaScript polyfill library. When authoring math content, use native MathML wherever possible, and test thoroughly. Use a polyfill library or provide a fallback image with a text alternative approximation if necessary.\n\nIf a rendering engine does not support a native math format such as MathML, authors MAY use JavaScript to downgrade the content to a format the browser can display, such as this HTML image using a data URI and plain text alternative.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menu",
						"description": "A type of widget that offers a list of choices to the user.\n\nA menu is a container, generally rendered as a popup or overlay, for a set of menu items that can be invoked to perform an action or function. The function is almost always closely related or directly related to the element that the user activated to invoke the menu. Activating a menu item both performs the associated function of the menu item, and results in the automatic dismissal of the menu.\n\nThe menu role is appropriate when a set of menu items is presented in a manner similar to a popup menu. For instance, a menu could be used to represent a context menu for its invoking element, or it would be used to render sub-menus for items of a menubar or another menu popup.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menu have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitem",
							"group > menuitemradio",
							"group > menuitemcheckbox",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio",
							"separator"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menubar",
						"description": "A presentation of menu that usually remains visible and is usually presented horizontally.\n\nThe menubar role is used to create a menu bar similar to those found in Windows, Mac, and Gnome desktop applications. A menu bar is used to create a consistent set of frequently used commands. Authors SHOULD ensure that menubar interaction is similar to the typical menu bar interaction in a desktop graphical user interface.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menubar have an implicit aria-orientation value of horizontal.",
						"generalization": ["menu"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitem",
							"group > menuitemradio",
							"group > menuitemcheckbox",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio",
							"separator"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitem",
						"description": "An option in a set of choices contained by a menu or menubar.\n\nAuthors MUST ensure elements with role menuitem are accessibility children of an element with role menu, menubar, or an element with role group that is an accessibility child of an element with role menu or menubar.\n\nAuthors MAY disable a menu item with the aria-disabled attribute. If the menu item has its aria-haspopup attribute set to true, it indicates that the menu item can be used to launch a sub-level menu, and authors SHOULD display a new sub-level menu when the menu item is activated.\n\nIn order to identify that they are related widgets, authors MUST ensure that menu items are accessibility descendants of an element with role menu or menubar. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["command"],
						"requiredContextRole": ["menu", "menubar", "menu > group", "menubar > group"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemcheckbox",
						"description": "A menuitem with a checkable state whose possible values are true, false, or mixed.\n\nAuthors MUST ensure elements with role menuitemcheckbox are accessibility children of an element with role menu, menubar, or an element with role group that is an accessibility child of an element with role menu or menubar.\n\nThe aria-checked attribute of a menuitemcheckbox indicates whether the menu item is checked (true), unchecked (false), or represents a sub-level menu of other menu items that have a mixture of checked and unchecked values (mixed).\n\nIn order to identify that they are related widgets, authors MUST ensure that menu item checkboxes are the accessibility descendants of an element with role menu or menubar. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["menuitem"],
						"requiredContextRole": ["menu", "menubar", "menu > group", "menubar > group"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemradio",
						"description": "A checkable menuitem in a set of elements with the same role, only one of which can be checked at a time.\n\nAuthors MUST ensure elements with role menuitemradio are accessibility children of an element with role menu, menubar, or an element with role group that is an accessibility child of an element with role menu or menubar.\n\nAuthors SHOULD enforce that only one menuitemradio in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).\n\nIn order to identify that they are related widgets, authors MUST ensure that menu item radios are accessibility descendants of an element with role menu or menubar.\n\nIf a menu or menubar contains more than one group of menuitemradio elements, or if the menu contains one group and other, unrelated menu items, authors SHOULD contain each set of related menuitemradio elements in an element using the group role. Authors MAY also delimit the group from other menu items with an element using the separator role, or an element with an equivalent role from the native markup language.",
						"generalization": ["menuitem"],
						"requiredContextRole": ["menu", "menubar", "menu > group", "menubar > group"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "meter",
						"description": "An element that represents a scalar measurement within a known range, or a fractional value. See related progressbar.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum values for the meter. Otherwise, their implicit values follow the same rules as <input type=\"range\"> in HTML:\n\nThe value of aria-valuenow MUST NOT fall below or exceed the computed values of aria-valuemin and aria-valuemax, respectively.\n\nAuthors SHOULD NOT use the meter role to indicate progress; the progressbar role exists to address that need.\n\nPresently, there are no WAI-ARIA properties corresponding to the low, optimum, and high attributes supported on the <meter> element in HTML. The addition of these properties will be considered for ARIA version 1.3.",
						"generalization": ["range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"inherited": true
							},
							{
								"name": "aria-valuemin",
								"inherited": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "navigation",
						"description": "A landmark containing a collection of navigational elements (usually links) for navigating the document or related documents.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role navigation. user agents SHOULD treat elements with role navigation as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role navigation.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "none",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym presentation.\n\nIn ARIA 1.1, the working group introduced none as a synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and we believe role=\"none\" conveys the actual meaning more unambiguously.\n\nThe intended use is when an element is used to change the look of the page but does not have all the functional, interactive, or structural relevance implied by the element type, or can be used to provide for an accessible fallback in older browsers that do not support WAI-ARIA.\n\nExample use cases:\n\nFor any element with a role of none/presentation and which is not focusable, the user agent MUST NOT expose the implicit native semantics of the element (the role and its states and properties) to accessibility APIs. However, the user agent MUST expose content and descendant elements that do not have an explicit or inherited role of none/presentation. Thus, the none/presentation role causes a given element to be treated as having no role or to be removed from the accessibility tree, but does not cause the content contained within the element to be removed from the accessibility tree.\n\nFor example, the following two markup snippets will be exposed similarly to an accessibility API.\n\nIn HTML, the <img> element is treated as a single entity regardless of the type of image file. Consequently, using role=\"none\" or role=\"presentation\" on an HTML img is equivalent to using aria-hidden=\"true\". In order to make the image contents accessible, authors can embed the object using an <object> or <iframe> element, or use inline SVG code, and follow the accessibility guidelines for the image content.\n\nAuthors SHOULD NOT provide a meaningful text alternative (for example, use alt=\"\" in HTML) when the none/presentation role is applied to an image.\n\nIn the following code sample, the containing img and is appropriately labeled by the caption paragraph. In this example the img element can be marked as none/presentation because the role and the text alternatives are provided by the containing element.\n\nIn the following code sample, because the anchor (HTML a element) is acting as the treeitem, the list item (HTML li element) is assigned an explicit WAI-ARIA role of none/presentation to override the user agent's implicit native semantics for list items.\n\nThe none/presentation role is used on an element that has implicit native semantics, meaning that there is a default accessibility API role for the element. Some elements are only complete when additional descendant elements are provided. For example, in HTML, table elements (matching the table role) require tr descendants (which have an implicit row role), which in turn require th or td children (the columnheader or rowheader and cell roles, respectively). Similarly, lists require list item children. The descendant elements that complete the semantics of an element are described in WAI-ARIA as Allowed Accessibility Child Roles.\n\nWhen an explicit or inherited role of none/presentation is applied to an element with the implicit semantic of a WAI-ARIA role that has Allowed Accessibility Child Roles, in addition to the element with the explicit role of none/presentation, the user agent MUST apply an inherited role of none to any accessibility descendants that do not have an explicit role defined. Also, when an explicit or inherited role of none/presentation is applied to a host language element which has specifically allowed children as defined by the host language specification, in addition to the element with the explicit role of none/presentation, the user agent MUST apply an inherited role of none to any specifically allowed children that do not have an explicit role defined.\n\nFor any element with an explicit or inherited role of none/presentation and which is not focusable, user agents MUST ignore role-specific WAI-ARIA states and properties for that element. For example, in HTML, a ul or ol element with a role of none/presentation will have the implicit native semantics of its li elements removed because the list role to which the ul or ol corresponds has an Allowed Accessibility Child Role of listitem. Likewise, the implicit native semantics of an HTML table element's thead/tbody/tfoot/tr/th/td descendants will also be removed, because the HTML specification indicates that these are required structural descendants of the table element.\n\nOnly the implicit native semantics of elements that correspond to WAI-ARIA Allowed Accessibility Child Roles are removed. All other content remains intact, including nested tables or lists, unless those elements also have an explicit role of none/presentation specified.\n\nFor example, according to an accessibility API, the following markup elements might have identical or very similar role semantics (generic or none role) and identical content.\n\nThere are other WAI-ARIA roles with specific allowed children for which this situation is applicable (e.g., feeds and listboxes), but tables and lists are the most common real-world cases in which the none/presentation inheritance is likely to apply.\n\nFor any element with an explicit or inherited role of none/presentation, user agents MUST apply an inherited role of none to all host-language-specific labeling elements for the presentational element. For example, a table element with a role of none/presentation will have the implicit native semantics of its caption element removed, because the caption is merely a label for the presentational table.\n\nInformation about resolving conflicts in the none/presentation role has been moved to Handling Author Errors",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "note",
						"description": "A section whose content represents additional information or parenthetical context to the primary content it supplements.\n\nA note is content provided by the author of the page or document, it is not to be used for providing reactions or suggestions. For these purposes, please review comment and suggestion.\n\nWhen used within the normal flow of a page's content, a note has an implicit association with the content that it supplements. The following example demonstrates using a note to call out additional information in the natural reading order of a page:\n\nIn cases where an element with role note has been determined to need a programmatic association with the content it supplements, authors can use one of the following mechanisms to associate the elements:",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "option",
						"description": "An item in a listbox.\n\nAuthors MUST ensure elements with role option are accessibility children of an element with role listbox or of an element with role group that is the accessibility child of an element with role listbox. Options not associated with a listbox might not be correctly mapped to an accessibility API.\n\nIn certain conditions, a user agent MAY provide an implicit value for aria-selected for each option in a listbox, and if it does, the user agent MUST ensure the following conditions are met before providing an implicit value:\n\nIf a user agent provides an implicit aria-selected value for an option, the value SHOULD be true if the option has DOM focus or the listbox has DOM focus and the option is referenced by aria-activedescendant. Otherwise, if a user agent provides an implicit aria-selected value for an option, the value SHOULD be false.\n\nAuthors SHOULD indicate selection for option elements using one of the following:\n\nAuthors SHOULD NOT specify both aria-selected and aria-checked on option elements contained by the same listbox except in the extremely rare circumstances where all the following conditions are met:",
						"generalization": ["input"],
						"requiredContextRole": ["listbox", "listbox > group"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "paragraph",
						"description": "A paragraph of content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "presentation",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym none.\n\nIn ARIA 1.1, the working group introduced none as the preferred synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and the ARIA Working Group believes role=\"none\" conveys the actual meaning more unambiguously.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "progressbar",
						"description": "An element that displays the progress status for tasks that take a long time.\n\nA progressbar indicates that the user's request has been received and the application is making progress toward completing the requested action.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum progress indicator values. Otherwise, their implicit values follow the same rules as <input type=\"range\"> in HTML:\n\nThe author SHOULD supply a value for aria-valuenow unless the value is indeterminate, in which case the author SHOULD omit the aria-valuenow attribute. Authors SHOULD update this value when the visual progress indicator is updated. If the progressbar is describing the loading progress of a particular region of a page, authors SHOULD both use aria-describedby to reference the progressbar status, and set the aria-busy attribute to true on the region until it is finished loading. It is not possible for the user to alter the value of a progressbar because it is always read-only.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified.",
						"generalization": ["range", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"inherited": true
							},
							{
								"name": "aria-valuemin",
								"inherited": true
							},
							{
								"name": "aria-valuenow",
								"inherited": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radio",
						"description": "A checkable input in a group of elements with the same role, only one of which can be checked at a time.\n\nAuthors SHOULD ensure that elements with role radio are explicitly grouped in order to indicate which ones affect the same value. This is achieved by enclosing the radio elements in an element with role radiogroup. If it is not possible to make the radio buttons DOM children of the radiogroup, authors SHOULD use the aria-owns attribute on the radiogroup element to indicate the relationship to its children.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radiogroup",
						"description": "A group of radio buttons.\n\nA radiogroup is a type of select list that can only have a single entry checked at any one time. Authors SHOULD enforce that only one radio button in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "range",
						"description": "An element representing a range of values.\n\nrange is an abstract role used for the ontology. Authors MUST NOT use range role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow"
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "region",
						"description": "A landmark containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nAuthors SHOULD limit use of the region role to sections containing content with a purpose that is not accurately described by one of the other landmark roles, such as main, complementary, or navigation.\n\nAuthors MUST give each element with role region a brief label that describes the purpose of the content in the region. Authors SHOULD reference a visible label with aria-labelledby if a visible label is present. Authors SHOULD include the label inside of a heading whenever possible. The heading MAY be an instance of the standard host language heading element or an instance of an element with role heading.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role region. User agents SHOULD treat elements with role region and an accessible name as navigational landmarks. User agents MAY enable users to quickly navigate to elements with role region.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "roletype",
						"description": "The base role from which all other roles inherit.\n\nProperties of this role describe the structural and functional purpose of objects that are assigned this role. A role is a concept that can be used to understand and operate instances.\n\nroletype is an abstract role used for the ontology. Authors MUST NOT use roletype role in content.",
						"isAbstract": true,
						"generalization": [],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic"
							},
							{
								"name": "aria-braillelabel"
							},
							{
								"name": "aria-brailleroledescription"
							},
							{
								"name": "aria-busy"
							},
							{
								"name": "aria-controls"
							},
							{
								"name": "aria-current"
							},
							{
								"name": "aria-describedby"
							},
							{
								"name": "aria-description"
							},
							{
								"name": "aria-details"
							},
							{
								"name": "aria-disabled",
								"deprecated": true
							},
							{
								"name": "aria-dropeffect"
							},
							{
								"name": "aria-errormessage",
								"deprecated": true
							},
							{
								"name": "aria-flowto"
							},
							{
								"name": "aria-grabbed"
							},
							{
								"name": "aria-haspopup",
								"deprecated": true
							},
							{
								"name": "aria-hidden"
							},
							{
								"name": "aria-invalid",
								"deprecated": true
							},
							{
								"name": "aria-keyshortcuts"
							},
							{
								"name": "aria-label"
							},
							{
								"name": "aria-labelledby"
							},
							{
								"name": "aria-live"
							},
							{
								"name": "aria-owns"
							},
							{
								"name": "aria-relevant"
							},
							{
								"name": "aria-roledescription"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "row",
						"description": "A row of cells in a tabular container.\n\nRows contain cell or gridcell elements, and thus serve to organize a table, grid, or treegrid.\n\nWhile the row role can be used in a table, grid, or treegrid, the semantics of aria-expanded, aria-posinset, aria-setsize, and aria-level are only applicable to the hierarchical structure of an interactive tree grid. Therefore, authors MUST NOT apply aria-expanded, aria-posinset, aria-setsize, and aria-level to a row that descends from a table or grid, and user agents SHOULD NOT expose any of these four properties to assistive technologies unless the row descends from a treegrid.\n\nAuthors MUST ensure elements with role row are accessibility children of an element with the role table, grid, rowgroup, or treegrid.\n\nWhile aria-disabled is currently supported on row, in a future version the working group plans to prohibit its on elements with role row except when the element is in the context of a grid or treegrid.",
						"generalization": ["group", "widget"],
						"requiredContextRole": ["grid", "table", "treegrid", "rowgroup"],
						"requiredOwnedElements": ["cell", "columnheader", "gridcell", "rowheader"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-rowindextext"
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowgroup",
						"description": "A structure containing one or more row elements in a tabular container.\n\nThe rowgroup role establishes a relationship with its accessibility children of role row. It is a structural equivalent to the thead, tfoot, and tbody elements in an HTML table element.\n\nAuthors MUST ensure elements with role rowgroup are accessibility children of an element with the role grid, table, or treegrid.\n\nThe rowgroup role exists, in part, to support role symmetry in HTML, and allows for the propagation of presentation inheritance on HTML table elements with an explicit presentation role applied.\n\nThis role does not differentiate between types of row groups (e.g., thead vs. tbody), but an issue has been raised for WAI-ARIA 2.0.",
						"generalization": ["structure"],
						"requiredContextRole": ["grid", "table", "treegrid"],
						"requiredOwnedElements": ["row"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowheader",
						"description": "A cell containing header information for a row.\n\nThe rowheader role can be used to identify a cell as a header for a row in a table, grid, or treegrid. The rowheader establishes a relationship between it and all cells in the corresponding row. It is a structural equivalent to setting scope=\"row\" on an HTML th element.\n\nAuthors MUST ensure elements with role rowheader are accessibility children of an element with the role row.\n\nApplying the aria-selected state on a rowheader MUST NOT cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding row. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the rowheader role can be used in both interactive grids and non-interactive tables, the use of aria-expanded, aria-readonly, and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-expanded, aria-readonly, or aria-required in a rowheader that descends from a table, and user agents SHOULD NOT expose these properties to assistive technologies unless the rowheader descends from a grid or treegrid.\n\nWhile aria-disabled is currently supported on rowheader, in a future version the working group plans to prohibit its use on elements with role rowheader except when the element is in the context of a grid or treegrid.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colindextext",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowindextext",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "scrollbar",
						"description": "A graphical object that controls the scrolling of content within a viewing area, regardless of whether the content is fully displayed within the viewing area.\n\nA scrollbar represents the current value and range of possible values via the size of the scrollbar and position of the thumb with respect to the visible range of the orientation (horizontal or vertical) it controls. Its orientation represents the orientation of the scrollbar and the scrolling effect on the viewing area controlled by the scrollbar. It is typically possible to add to or subtract from the current value by using directional keys such as arrow keys.\n\nAuthors MUST set the aria-controls attribute on the scrollbar element to reference the scrollable area it controls.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum thumb position. Otherwise, their implicit values follow the same rules as <input type=\"range\"> in HTML:\n\nAuthors MUST set the aria-valuenow attribute to indicate the current thumb position. If aria-valuenow is missing or has an unexpected value, browsers MAY implement the repair techniques specified in the section describing handling author errors in states and properties, which are equivalent to the repair techniques for <input type=\"range\"> in HTML.\n\nElements with the role scrollbar have an implicit aria-orientation value of vertical.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified. It is best to set the values for aria-valuemin, aria-valuemax, and aria-valuenow in a manner that is appropriate for this calculation.",
						"generalization": ["range", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"required": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "search",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a search facility. See related form and searchbox.\n\nA search region can be a mix of host language form controls, scripted controls, and hyperlinks.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role search. user agents SHOULD treat elements with role search as navigational landmarks. user agents MAY enable users to quickly navigate to elements with role search.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "searchbox",
						"description": "A type of textbox intended for specifying search criteria. See related textbox and search.",
						"generalization": ["textbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "section",
						"description": "A renderable structural containment unit on a page.\n\nsection is an abstract role used for the ontology. Authors MUST NOT use section role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "sectionfooter",
						"description": "A set of user interface objects and information representing information about its closest ancestral content group. For instance, a sectionfooter can include information about who wrote the specific section of content, such as an article. It can contain links to related documents, copyright information or other indices and colophon specific to the current section of the page.\n\nA sectionfooter does not represent information about the parent document, or globally repeating content found across multiple pages related to the website. For such content, the contentinfo role would be more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "sectionhead",
						"description": "A structure that labels or summarizes the topic of its related section.\n\nsectionhead is an abstract role used for the ontology. Authors MUST NOT use sectionhead role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "sectionheader",
						"description": "A set of user interface objects and information that represents a collection of introductory items for the element's closest ancestral content group. For instance, a sectionheader can include the heading, introductory statement and related meta data for a section of content, for instance a region or article, within a web page.\n\nA sectionheader does not represent site-oriented or globally repeating content found across multiple pages of a website. For such content, the banner role would be more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "select",
						"description": "A form widget that allows the user to make selections from a set of choices.\n\nselect is an abstract role used for the ontology. Authors MUST NOT use select role in content.",
						"isAbstract": true,
						"generalization": ["composite", "group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "separator",
						"description": "A divider that separates and distinguishes sections of content or groups of menuitems.\n\nThere are two types of separators: a static structure that provides only a visible boundary and a focusable, interactive widget that is also moveable. If a separator is not focusable, it is revealed to assistive technologies as a static structural element. For example, a static separator can be used to help visually divide two groups of menu items in a menu or to provide a horizontal rule between two sections of a page.\n\nAuthors MAY make a separator focusable to create a widget that both provides a visible boundary between two sections of content and enables the user to change the relative size of the sections by changing the position of the separator. A variable separator widget can be moved continuously within a range, whereas a fixed separator widget supports only two discrete positions. Typically, a fixed separator widget is used to toggle one of the sections between expanded and collapsed states.\n\nIf the separator is focusable, authors MUST set the value of aria-valuenow to a number reflecting the current position of the separator and update that value when it changes. Authors SHOULD also provide the value of aria-valuemin if it is not 0 and the value of aria-valuemax if it is not 100. If missing or not a number, the implicit values of these attributes are as follows:\n\nIn applications where there is more than one focusable separator, authors SHOULD provide an accessible name for each one.\n\nElements with the role separator have an implicit aria-orientation value of horizontal.",
						"generalization": ["structure", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "slider",
						"description": "An input where the user selects a value from within a given range.\n\nA slider represents the current value and range of possible values via the size of the slider and position of the thumb. It is typically possible to add to or subtract from the current value by using directional keys such as arrow keys.\n\nAuthors MAY set the aria-valuemin and aria-valuemax attributes. Otherwise, their implicit values follow the same rules as <input type=\"range\"> in HTML:\n\nAuthors MUST set the aria-valuenow attribute. If aria-valuenow is missing or has an unexpected value, browsers MAY implement the repair techniques specified in the section describing handling author errors in states and properties, which are equivalent to the repair techniques for <input type=\"range\"> in HTML.\n\nElements with the role slider have an implicit aria-orientation value of horizontal.",
						"generalization": ["input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "spinbutton",
						"description": "A form of range that expects the user to select from among discrete choices.\n\nA spinbutton typically allows users to change its displayed value by activating increment and decrement buttons that step through a set of allowed values. Some implementations display the value in an text field that allows editing and typing but typically limits input in ways that help prevent invalid values.\n\nAlthough a spinbutton is similar in appearance to many presentations of select, it is advisable to use spinbutton when working with known ranges (especially in the case of large ranges) as opposed to distinct options. For example, a spinbutton representing a range from 1 to 1,000,000 would provide much better performance than a select widget representing the same values.\n\nAuthors MAY create a spinbutton with accessibility children, but MUST limit those elements to a textbox and/or two buttons. Alternatively, authors MAY apply the spinbutton role to a text input and create sibling buttons to support the increment and decrement functions.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus. When a spinbutton receives focus, authors SHOULD ensure focus is placed on the textbox element if one is present, and on the spinbutton itself otherwise. Authors SHOULD also ensure the up and down arrows on a keyboard perform the increment and decrement functions and that the increment and decrement button elements are NOT included in the primary navigation ring, e.g., the Tab ring in HTML.\n\nAuthors SHOULD set the aria-valuenow attribute when the spinbutton has a value. Authors SHOULD set the aria-valuemin attribute when there is a minimum value, and the aria-valuemax attribute when there is a maximum value.",
						"generalization": ["composite", "input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow"
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "status",
						"description": "A type of live region whose content is advisory information for the user but is not important enough to justify an alert, often but not necessarily presented as a status bar.\n\nAuthors SHOULD ensure an element with role status does not receive focus as a result of change in status.\n\nStatus is a form of live region. If another part of the page controls what appears in the status, authors SHOULD make the relationship explicit with the aria-controls attribute.\n\nAssistive technologies MAY reserve some cells of a Braille display to render the status.\n\nElements with the role status have an implicit aria-live value of polite and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "strong",
						"description": "Content that is important, serious, or urgent. See related emphasis.\n\nThe purpose of the strong role is to communicate strong importance, seriousness, or urgency. It is not for communicating changes in typographical presentation that are not important to the meaning of the content. Authors SHOULD use the strong role only if its absence would change the meaning of the content.\n\nThe strong role is not intended to convey stress or emphasis; for that purpose, the emphasis role is more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "structure",
						"description": "A document structural element.\n\nRoles for document structure support the accessibility of dynamic web content by helping assistive technologies determine active content versus static document content. Structural roles by themselves do not all map to accessibility APIs, but are used to create widget roles or assist content adaptation for assistive technologies.\n\nstructure is an abstract role used for the ontology. Authors MUST NOT use structure role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "subscript",
						"description": "One or more subscripted characters. See related superscript.\n\nThe subscript role is intended to be used only to mark up typographical conventions that have specific meanings; not for typographical presentation for presentation's sake. In general, authors SHOULD use this role only if the absence of the subscript would change the meaning of the content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "suggestion",
						"description": "A single proposed change to content.\n\nFor example, in an editing system that supports multiple users, one user can suggest a change, and another user would be responsible for accepting or rejecting the suggestion.\n\nAuthors MUST ensure that a suggestion contains either one insertion child or one deletion child or ensure that it contains two children where one is an insertion and the other is a deletion. Authors MUST ensure a suggestion does not contain any other children.\n\nAuthors MAY use aria-details or aria-description to associate the suggestion with related information such as comments, authoring info, and time stamps.\n\nWhen a suggestion is accepted, authors SHOULD remove the suggestion role, indicating that the proposed revision has been made. After the suggestion role is removed, child insertion and deletion elements can either be retained to document the revision or replaced with the revised content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["insertion", "deletion"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "superscript",
						"description": "One or more superscripted characters. See related subscript.\n\nThe superscript role is intended to be used only to mark up typographical conventions that have specific meanings; not for typographical presentation for presentation's sake. In general, authors SHOULD use this role only if the absence of the superscript would change the meaning of the content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "switch",
						"description": "A type of checkbox that represents on/off values, as opposed to checked/unchecked values. See related checkbox.\n\nThe aria-checked attribute of a switch indicates whether the input is on (true) or off (false). The mixed value is invalid, and user agents MUST treat a mixed value as equivalent to false for this role.\n\nA switch provides approximately the same functionality as a checkbox and toggle button, but makes it possible for assistive technologies to present the widget in a fashion consistent with its on-screen appearance.",
						"generalization": ["checkbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tab",
						"description": "A grouping label providing a mechanism for selecting the tab content that is to be rendered to the user.\n\nIf a tabpanel or item in a tabpanel has focus, the associated tab is the currently active tab in the tablist, as defined in Managing Focus. tablist elements, which contain a set of associated tab elements, are typically placed near a series of tabpanel elements, usually preceding it. See the ARIA Authoring Practices Guide for details on implementing a tab set design pattern.\n\nAuthors MUST ensure elements with role tab are accessibility children of an element with the role tablist.\n\nAuthors SHOULD ensure the tabpanel associated with the currently active tab is perceivable to the user.\n\nFor a single-selectable tablist, authors SHOULD hide from all users other tabpanel elements until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure that the tab for each visible tabpanel has the aria-expanded attribute set to true, and that the tabs associated with the remaining hidden from all users tabpanel elements have their aria-expanded attributes set to false.\n\nAuthors SHOULD ensure that a selected tab has its aria-selected attribute set to true, that inactive tab elements have their aria-selected attribute set to false, and that the currently selected tab provides a visual indication that it is selected.\n\nIn certain conditions, a user agent MAY provide an implicit value for aria-selected for each tab in a tablist, and if it does, the user agent MUST ensure the following conditions are met before providing an implicit value:",
						"generalization": ["sectionhead", "widget"],
						"requiredContextRole": ["tablist"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "table",
						"description": "A section containing data arranged in rows and columns. See related grid.\n\nThe table role is intended for tabular containers which are not interactive. If the tabular container maintains a selection state, provides its own two-dimensional navigation, or allows the user to rearrange or otherwise manipulate its contents or the display thereof, authors SHOULD use grid or treegrid instead.\n\nAuthors SHOULD prefer the use of the host language's semantics for table whenever possible, such as the <table> element in HTML.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["caption", "row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tablist",
						"description": "A list of tab elements, which are references to tabpanel elements.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nFor a single-selectable tablist, authors SHOULD hide from all users other tabpanel elements until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure that the tab for each visible tabpanel has the aria-expanded attribute set to true, and that the tabs associated with the remaining hidden from all users tabpanel elements have their aria-expanded attributes set to false.\n\ntablist elements are typically placed near usually preceding, a series of tabpanel elements. See the ARIA Authoring Practices Guide for details on implementing a tab set design pattern.\n\nElements with the role tablist have an implicit aria-orientation value of horizontal.",
						"generalization": ["composite"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["tab"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tabpanel",
						"description": "A container for the resources associated with a tab, where each tab is contained in a tablist.\n\nAuthors SHOULD associate a tabpanel element with its tab, by using the aria-controls attribute on the tab to reference the tab panel, and/or by using the aria-labelledby attribute on the tab panel to reference the tab.\n\ntablist elements are typically placed near, usually preceding, a series of tabpanel elements. See the ARIA Authoring Practices Guide for details on implementing a tab set design pattern.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "term",
						"description": "A word or phrase with an optional corresponding definition. See related definition.\n\nThe term role is used to explicitly identify a word or phrase for which a definition has been provided by the author or is expected to be provided by the user. If there is an existing definition, or a form or form control to enter a definition, authors SHOULD set aria-details to point to the related element.\n\nAuthors SHOULD NOT use the term role on interactive elements such as links because doing so could prevent users of assistive technologies from interacting with those elements.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "textbox",
						"description": "A type of input that allows free-form text as its value.\n\nIf the aria-multiline attribute is true, the widget accepts line breaks within the input, as in an HTML textarea. Otherwise, this is a simple text box. The intended use is for languages that do not have a text input element, or cases in which an element with different semantics is repurposed as a text field.\n\nAuthors MUST limit the children of a textbox to non-interactive, entirely presentational elements such as icons used to visually convey information that is already exposed in an accessible manner. Examples include:\n\nIn most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line <input type=\"text\"> element, the keystroke usually submits the form. When user has focus in a multi-line <textarea> element, the keystroke inserts a line break. The WAI-ARIA textbox role differentiates these types of boxes with the aria-multiline attribute, so authors are advised to be aware of this distinction when designing the field.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder"
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "time",
						"description": "An element that represents a specific point in time.\n\nAt the present time, there are no WAI-ARIA properties corresponding to the datetime attribute supported on <time> in HTML. The addition of this property will be considered for ARIA version 1.3.\n\nAuthors SHOULD limit text contents to a valid date- or time-related string, or apply this future datetime-equivalent property to the element which has role time.\n\nExamples of valid date- or time-related strings as text contents of an element with the time role:",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-braillelabel", "aria-label", "aria-labelledby"]
					},
					{
						"name": "timer",
						"description": "A type of live region containing a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an end point.\n\nThe text contents of the timer object indicate the current time measurement, and are updated as that amount changes. The timer value is not necessarily machine parsable, but authors SHOULD update the text contents at fixed intervals, except when the timer is paused or reaches an end-point.\n\nElements with the role timer have an implicit aria-live value of off.",
						"generalization": ["status"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "toolbar",
						"description": "A collection of commonly used function buttons or controls represented in compact visual form.\n\nThe toolbar is often a subset of functions found in a menubar, designed to reduce user effort in using these functions. Authors MUST supply a label on each toolbar when the application contains more than one toolbar.\n\nAuthors MAY manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role toolbar have an implicit aria-orientation value of horizontal.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tooltip",
						"description": "A contextual popup that displays a description for an element.\n\nThe tooltip typically becomes visible, after a short delay, in response to a mouse hover, or after the accessibility parent receives keyboard focus. The use of a WAI-ARIA tooltip is a supplement to the normal tooltip behavior of the user agent.\n\nTypical tooltip delays last from one to five seconds.\n\nAuthors SHOULD ensure that elements with the role tooltip are referenced through the use of aria-describedby before or at the time the tooltip is displayed.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tree",
						"description": "A widget that allows the user to select one or more items from a hierarchically organized collection.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role tree have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > treeitem", "treeitem"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treegrid",
						"description": "A grid whose rows can be expanded and collapsed in the same manner as for a tree.\n\nIf aria-readonly is set on an element with role treegrid, user agents MUST propagate the value to all gridcell elements that are accessibility descendants of the treegrid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nWhen the aria-readonly attribute is applied to a focusable gridcell, it indicates whether the content contained in the gridcell is editable. The aria-readonly attribute does not represent availability of functions for navigating or manipulating the treegrid itself.\n\nIn a treegrid that provides content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, if a treegrid presents a collection of elements that do not support aria-readonly, such as a collection of link elements, it is not necessary for the author to specify a value for aria-readonly.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.",
						"generalization": ["grid", "tree"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["caption", "row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treeitem",
						"description": "An item in a tree.\n\nA treeitem element can contain a sub-level group of elements that can be expanded or collapsed. An expandable collection of treeitem elements are enclosed in an element with the group role.\n\nAuthors MUST ensure elements with role treeitem are accessibility children of an element with role tree or an element with role group that is the accessibility child of an element with role treeitem.\n\nIn certain conditions, a user agent MAY provide an implicit value for aria-selected for each treeitem in a tree, and if it does, the user agent MUST ensure the following conditions are met before providing an implicit value:\n\nIf a user agent provides an implicit aria-selected value for a treeitem, the value SHOULD be true if the treeitem has DOM focus or the tree has DOM focus and the treeitem is referenced by aria-activedescendant. Otherwise, if a user agent provides an implicit aria-selected value for a treeitem, the value SHOULD be false.\n\nAuthors MAY indicate selection for treeitem elements using either aria-selected or aria-checked. Some user interfaces indicate selection with aria-selected in single-select trees and with aria-checked in multi-select trees. Authors SHOULD NOT specify both aria-selected and aria-checked on treeitem elements contained by the same tree except in the extremely rare circumstances where all the following conditions are met:",
						"generalization": ["listitem", "option"],
						"requiredContextRole": ["tree", "treeitem > group"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "widget",
						"description": "An interactive component of a graphical user interface (GUI).\n\nWidgets are discrete user interface objects with which the user can interact. Widget roles map to standard features in accessibility APIs. When the user navigates an element assigned any of the non-abstract subclass roles of widget, assistive technologies that typically intercept standard keyboard events SHOULD switch to an application browsing mode, and pass keyboard events through to the web application. The intent is to hint to certain assistive technologies to switch from normal browsing mode into a mode more appropriate for interacting with a web application; some user agents have a browse navigation mode where keys, such as up and down arrows, are used to browse the document, and this native behavior prevents the use of these keys by a web application.\n\nwidget is an abstract role used for the ontology. Authors MUST NOT use widget role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "window",
						"description": "A browser or application window.\n\nElements with this role have a window-like behavior in a graphical user interface (GUI) context, regardless of whether they are implemented as a native window in the operating system, or merely as a section of the document styled to look like a window.\n\nwindow is an abstract role used for the ontology. Authors MUST NOT use window role in content.\n\nIn the description of this role, the term \"application\" does not refer to the application role, which specifies specific assistive technology behaviors.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				],
				"props": [
					{
						"name": "aria-activedescendant",
						"type": "property",
						"value": "ID reference",
						"enum": []
					},
					{
						"name": "aria-atomic",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Assistive technologies will present only the changed node or nodes.",
							"true": "Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists."
						}
					},
					{
						"name": "aria-autocomplete",
						"type": "property",
						"value": "token",
						"enum": ["inline", "list", "both", "none"],
						"defaultValue": "none",
						"valueDescriptions": {
							"inline": "When a user is providing input, text suggesting one way to complete the provided input might be dynamically inserted after the caret.",
							"list": "When a user is providing input, an element containing a collection of values that could complete the provided input might be displayed.",
							"both": "When a user is providing input, an element containing a collection of values that could complete the provided input might be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.",
							"none": "When a user is providing input, an automatic suggestion that attempts to predict how the user intends to complete the input is not displayed."
						}
					},
					{
						"name": "aria-braillelabel",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-brailleroledescription",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-busy",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "There are no expected updates for the element.",
							"true": "The element is being updated."
						}
					},
					{
						"name": "aria-checked",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "undefined",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "checked",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element supports being checked but is not currently checked.",
							"mixed": "Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.",
							"true": "The element is checked.",
							"undefined": "The element does not support being checked."
						},
						"conditionalValue": [
							{
								"role": ["checkbox", "menuitemcheckbox"],
								"value": "tristate"
							}
						]
					},
					{
						"name": "aria-colcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colindextext",
						"type": "property",
						"value": "string",
						"enum": []
					},
					{
						"name": "aria-colspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "colspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-controls",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-current",
						"type": "state",
						"value": "token",
						"enum": ["page", "step", "location", "date", "time", "true", "false"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"page": "Represents the current page within a set of pages.",
							"step": "Represents the current step within a process.",
							"location": "Represents the current location within an environment or context.",
							"date": "Represents the current date within a collection of dates.",
							"time": "Represents the current time within a set of times.",
							"true": "Represents the current item within a set.",
							"false": "Does not represent the current item within a set."
						}
					},
					{
						"name": "aria-describedby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-description",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-details",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-disabled",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "disabled",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element is enabled.",
							"true": "The element and all focusable descendants are disabled and its value cannot be changed by the user."
						}
					},
					{
						"name": "aria-dropeffect",
						"type": "property",
						"deprecated": true,
						"value": "token list",
						"enum": ["copy", "execute", "link", "move", "none", "popup"],
						"defaultValue": "none",
						"isGlobal": true,
						"valueDescriptions": {
							"copy": "A duplicate of the source object will be dropped into the target.",
							"execute": "A function supported by the drop target is executed, using the drag source as an input.",
							"link": "A reference or shortcut to the dragged object will be created in the target object.",
							"move": "The source object will be removed from its current location and dropped into the target.",
							"none": "No operation can be performed; effectively cancels the drag operation if an attempt is made to drop on this object. Ignored if combined with any other token value. e.g., 'none copy' is equivalent to a 'copy' value.",
							"popup": "There is a popup menu or dialog that allows the user to choose one of the drag operations (copy, move, link, execute) and any other drag functionality, such as cancel."
						}
					},
					{
						"name": "aria-errormessage",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-expanded",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The grouping element this element controls or is the accessibility parent of is collapsed.",
							"true": "The grouping element this element controls or is the accessibility parent of is expanded.",
							"undefined": "The element does not own or control a grouping element that is expandable."
						}
					},
					{
						"name": "aria-flowto",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-grabbed",
						"type": "state",
						"deprecated": true,
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates that the element supports being dragged.",
							"true": "Indicates that the element has been \"grabbed\" for dragging.",
							"undefined": "Indicates that the element does not support being dragged."
						}
					},
					{
						"name": "aria-haspopup",
						"type": "property",
						"value": "token",
						"enum": ["false", "true", "menu", "listbox", "tree", "grid", "dialog"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates the element does not have a popup.",
							"true": "Indicates the popup is a menu.",
							"menu": "Indicates the popup is a menu.",
							"listbox": "Indicates the popup is a listbox.",
							"tree": "Indicates the popup is a tree.",
							"grid": "Indicates the popup is a grid.",
							"dialog": "Indicates the popup is a dialog."
						}
					},
					{
						"name": "aria-hidden",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "hidden",
								"value": "true",
								"isNotStrictEquivalent": true
							}
						],
						"valueDescriptions": {
							"false": "The element's hidden state is determined by the user agent based on whether it is rendered. Synonym of undefined.",
							"true": "The element is hidden from the accessibility API.",
							"undefined": "The element's hidden state is determined by the user agent based on whether it is rendered."
						}
					},
					{
						"name": "aria-invalid",
						"type": "state",
						"value": "token",
						"enum": ["grammar", "false", "spelling", "true"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"grammar": "A grammatical error was detected.",
							"false": "There are no detected errors in the value.",
							"spelling": "A spelling error was detected.",
							"true": "The value entered by the user has failed validation."
						}
					},
					{
						"name": "aria-keyshortcuts",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-label",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-labelledby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-level",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-live",
						"type": "property",
						"value": "token",
						"enum": ["assertive", "off", "polite"],
						"defaultValue": "off",
						"isGlobal": true,
						"valueDescriptions": {
							"assertive": "Indicates that updates to the region have the highest priority and should be presented the user immediately.",
							"off": "Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.",
							"polite": "Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing."
						}
					},
					{
						"name": "aria-modal",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Element is not modal.",
							"true": "Element is modal."
						}
					},
					{
						"name": "aria-multiline",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "This is a single-line text box.",
							"true": "This is a multi-line text box."
						}
					},
					{
						"name": "aria-multiselectable",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Only one item can be selected.",
							"true": "More than one item in the widget can be selected at a time."
						}
					},
					{
						"name": "aria-orientation",
						"type": "property",
						"value": "token",
						"enum": ["horizontal", "undefined", "vertical"],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"horizontal": "The element is oriented horizontally.",
							"undefined": "The element's orientation is unknown/ambiguous.",
							"vertical": "The element is oriented vertically."
						}
					},
					{
						"name": "aria-owns",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-placeholder",
						"type": "property",
						"value": "string",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "placeholder",
								"value": null
							}
						]
					},
					{
						"name": "aria-posinset",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-pressed",
						"type": "state",
						"value": "tristate",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The element supports being pressed but is not currently pressed.",
							"mixed": "Indicates a mixed mode value for a tri-state toggle button.",
							"true": "The element is pressed.",
							"undefined": "The element does not support being pressed."
						}
					},
					{
						"name": "aria-readonly",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "readonly",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The user can set the value of the element.",
							"true": "The user cannot change the value of the element."
						}
					},
					{
						"name": "aria-relevant",
						"type": "property",
						"value": "token list",
						"enum": ["additions", "additions text", "all", "removals", "text"],
						"defaultValue": "additions text",
						"isGlobal": true,
						"valueDescriptions": {
							"additions": "Element nodes are added to the accessibility tree within the live region.",
							"additions text": "Equivalent to the combination of values, \"additions text\".",
							"all": "Equivalent to the combination of all values, \"additions removals text\".",
							"removals": "Text content, a text alternative, or an element node within the live region is removed from the accessibility tree.",
							"text": "Text content or a text alternative is added to any descendant in the accessibility tree of the live region."
						}
					},
					{
						"name": "aria-required",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "required",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "User input is not necessary to submit the form.",
							"true": "Users need to provide input on an element before a form is submitted."
						}
					},
					{
						"name": "aria-roledescription",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-rowcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowindextext",
						"type": "property",
						"value": "string",
						"enum": []
					},
					{
						"name": "aria-rowspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "rowspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-selected",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The selectable element is not selected.",
							"true": "The selectable element is selected.",
							"undefined": "The element is not selectable."
						}
					},
					{
						"name": "aria-setsize",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-sort",
						"type": "property",
						"value": "token",
						"enum": ["ascending", "descending", "none", "other"],
						"defaultValue": "none",
						"valueDescriptions": {
							"ascending": "Items are sorted in ascending order.",
							"descending": "Items are sorted in descending order.",
							"none": "There is no defined sort applied.",
							"other": "A sort algorithm other than ascending or descending has been applied."
						}
					},
					{
						"name": "aria-valuemax",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "max",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuemin",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "min",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuenow",
						"type": "property",
						"value": "number",
						"enum": []
					},
					{
						"name": "aria-valuetext",
						"type": "property",
						"value": "string",
						"enum": []
					}
				],
				"graphicsRoles": [
					{
						"name": "graphics-document",
						"description": "A type of document in which the visual appearance or layout of content conveys meaning.\n\nSimilar to other document types, the graphics-document role applies to the root element of a region of the page containing related information, where the user's primary interaction mode is expected to be browsing the document rather than controlling an application. The element with this role may be the root element of the document file, or of a nested structure within it.\n\nThe graphics-document may be distinguished from similar roles as follows:\n\nRelative to other documents, a graphics-document is distinguished by the semantic importance of its visual (usually two-dimensional) representation. User agents and assistive technologies SHOULD take this into consideration when supporting navigation of the graphic. Accessibility technologies that re-format or re-style a document SHOULD NOT alter the layout of a graphics-document except in ways that are consistent with the semantic roles and relationships of its content.\n\nRelative to an img, a graphics-document is distinguished by the structured nature of its content. Its child elements may have semantic meaning, and may include links or other interactive widgets.\n\nRelative to a graphics-object, a graphics-document is self-contained. Its meaning persists when separated from surrounding content. The element with the graphics-document role defines the scope and context for interpretation of the child content.\n\nIn general, authors SHOULD use the graphics-document role for structured graphics such as charts, maps, diagrams, technical drawing, blue prints and instructional graphics. However, if a single large graphic has discrete regions that may be safely re-arranged without sacrificing meaning, each of those regions SHOULD be a distinct graphics-document. An alternative role (such as figure) may be used to group them together. One graphics-document may also be nested inside another, for example a bar chart that is embedded in a map or a matrix of chart panels should have a role of graphics-document. The nested document provides encapsulation; navigation between components of the inner and outer graphics should be explicit.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the document role as a fallback value, in the form role=\"graphics-document document\".\n\nFuture specifications may define more specific roles for particular types of graphical documents with special semantic structures. Those more specific roles would be subclasses of graphics-document.\n\nAn SVG diagram of an electrical circuit is a simple graphical document:",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-object",
						"description": "A section of a graphics-document that represents a distinct object or sub-component with semantic meaning. A graphical object may itself have nested sub-components.\n\nContainer elements that represent a collection of disconnected objects should be given the group or list roles, instead. Grouping elements that do not have semantic meaning and do not alter the semantic context provided by an ancestor (for example, a div or SVG g that is only used for styling or layout) SHOULD NOT be given a role. The lack of role may be explicitly indicated with the role none or presentation.\n\nUnlike a graphics-document, a graphics-object need not be self-contained, and it does not establish a new context for navigation. However, user agents and assistive technologies SHOULD provide a way for users, particularly non-visual users, to navigate the nested structure of objects in a hierarchical manner, similar to nested lists.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the group role as a fallback value, in the form role=\"graphics-object group\".\n\nThe code that follows is a portion of the markup for a structured graphic. It includes SVG g grouping elements with various roles:\n\nWhere a graphical object has multiple sub-components, the group role is provided as an explicit fallback.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-symbol",
						"description": "A graphical object used to convey a simple meaning or category, where the meaning is more important than the particular visual appearance. It may be a component of a larger structured graphic such as a chart or map. The symbol itself is an atomic object; children are presentational.\n\nWhen used as part of a structured symbolic language, the aria-roledescription property (introduced in ARIA 1.1 [WAI-ARIA-1.1]) can be used to name the symbol type separately from the name and description for the particular instance of the symbol.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the img role as a fallback value, in the form role=\"graphics-symbol img\", if that is not already the default semantic role for the element.\n\nWithin an HTML document for a restaurant menu, an img element can represent a repeated symbol:\n\nWithin an SVG diagram of an electrical circuit, the graphics that represent batteries, switches, and loads like this lightbulb are each symbols:\n\nNote that the visible text must be included in the label for its parent symbol, in this example. As the child of a graphics-symbol, it is treated as presentational content, and is therefore not accessible as a separate element of the graphic.\n\nWithin an architectural blueprint-style SVG diagram, each SVG use element that creates a copy of a simple SVG symbol is a graphics-symbol:",
						"generalization": ["img"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				]
			},
			"1.2": {
				"roles": [
					{
						"name": "alert",
						"description": "A type of live region with important, and usually time-sensitive, information. See related alertdialog and status.\n\nAlerts are used to convey messages that may be immediately important to users. In the case of audio warnings, alerts provide an accessible alternative for hearing-impaired users. The alert role is applied to the element containing the alert message. An alert is a specialized form of the status role, which is processed as an atomic live region.\n\nAlerts are assertive live regions, which means they cause immediate notification for assistive technology users. If the operating system allows, the user agent SHOULD fire a system alert event through the accessibility API when the WAI-ARIA alert is created.\n\nNeither authors nor user agents are required to set or manage focus to an alert in order for it to be processed. Since alerts are not required to receive focus, authors SHOULD NOT require users to close an alert. If an author desires focus to move to a message when it is conveyed, the author SHOULD use alertdialog instead of alert.\n\nElements with the role alert have an implicit aria-live value of assertive, and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "alertdialog",
						"description": "A type of dialog that contains an alert message, where initial focus goes to an element within the dialog. See related alert and dialog.\n\nAlert dialogs are used to convey messages to alert the user. The alertdialog role goes on the node containing both the alert message and the rest of the dialog. Content authors SHOULD make alert dialogs modal by ensuring that, while the alertdialog is shown, keyboard and mouse interactions only operate within the dialog. See aria-modal.\n\nUnlike alert, alertdialog can receive a response from the user. For example, to confirm that the user understands the alert being generated. When the alert dialog is displayed, authors SHOULD set focus to an active element within the alert dialog, such as a form control or confirmation button. The user agent SHOULD fire a system alert event through the accessibility API when the alert is created, provided one is specified by the intended accessibility API.\n\nAuthors SHOULD use aria-describedby on an alertdialog to reference the alert message element in the dialog. If they do not, an assistive technology can resort to its internal recovery mechanism to determine the contents of the alert message.",
						"generalization": ["alert", "dialog"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "application",
						"description": "A structure containing one or more focusable elements requiring user input, such as keyboard or gesture events, that do not follow a standard interaction pattern supported by a widget role.\n\nSome user agents and assistive technologies have a browse mode where standard input events, such as up and down arrow key events, are intercepted and used to control a reading cursor. This browse mode behavior prevents elements that do not have a widget role from receiving and using such keyboard and gesture events to provide interactive functionality.\n\nWhen there is a need to create an element with an interaction model that is not supported by any of the WAI-ARIA widget roles, authors MAY give that element role application. And, when a user navigates into an element with role application, assistive technologies that intercept standard input events SHOULD switch to a mode that passes most or all standard input events through to the web application.\n\nFor example, a presentation slide editor uses arrow keys to change the positions of textbox and image elements on the slide. There are not any WAI-ARIA widget roles that correspond to such an interaction model so an author could give the slide container role application, an aria-roledescription of \"Slide Editor\", and use aria-describedby to provide instructions.\n\nBecause only the focusable elements contained in an application element are accessible to users of some assistive technologies, authors MUST use one of the following techniques to ensure all non-decorative static text or image content inside an application is accessible:",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "article",
						"description": "A section of a page that consists of a composition that forms an independent part of a document, page, or site.\n\nAn article is not a navigational landmark, but may be nested to form a discussion where assistive technologies could pay attention to article nesting to assist the user in following the discussion. An article could be a forum post, a magazine or newspaper article, a web log entry, a user-submitted comment, or any other independent item of content. It is independent in that its contents could stand alone, for example in syndication. However, the element is still associated with its ancestors; for instance, contact information that applies to a parent body element still covers the article as well. When nesting articles, the child articles represent content that is related to the content of the parent article. For instance, a web log entry on a site that accepts user-submitted comments could represent the comments as articles nested within the article for the web log entry. Author, heading, date, or other information associated with an article does not apply to nested articles.\n\nWhen the user navigates to an element assigned the role of article, assistive technologies that typically intercept standard keyboard events SHOULD switch to document browsing mode, as opposed to passing keyboard events through to the web application. Assistive technologies MAY provide a feature allowing the user to navigate the hierarchy of any nested article elements.\n\nWhen an article is in the context of a feed, the author MAY specify values for aria-posinset and aria-setsize.",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "banner",
						"description": "A landmark that contains mostly site-oriented content, rather than page-specific content.\n\nSite-oriented content typically includes things such as the logo or identity of the site sponsor, and a site-specific search tool. A banner usually appears at the top of the page and typically spans the full width.\n\nUser agents SHOULD treat elements with the role of banner as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the banner role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple banner elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "blockquote",
						"description": "A section of content that is quoted from another source.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "button",
						"description": "An input that allows for user-triggered actions when clicked or pressed. See related link.\n\nButtons are mostly used for discrete actions. Standardizing the appearance of buttons enhances the user's recognition of the widgets as buttons and allows for a more compact display in toolbars.\n\nButtons support the optional attribute aria-pressed. Buttons with a non-empty aria-pressed attribute are toggle buttons. When aria-pressed is true the button is in a \"pressed\" state, when aria-pressed is false it is not pressed. If the attribute is not present, the button is a simple command button.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-pressed"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "caption",
						"description": "Visible content that names, and may also describe, a figure, table, grid, or treegrid.\n\nWhen using caption authors SHOULD ensure:\n\nAuthors SHOULD set aria-labelledby on the parent figure, table, grid, or treegrid to reference the element with role caption. However, if a caption contains content that serves as both a name and description for its parent, authors MAY instead set aria-labelledby to reference an element within the caption that contains a concise name, and set aria-describedby to reference an element within the caption that contains the descriptive content.",
						"generalization": ["section"],
						"requiredContextRole": ["figure", "grid", "table", "treegrid"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "cell",
						"description": "A cell in a tabular container. See related gridcell.\n\nAuthors MUST ensure elements with role cell are contained in, or owned by, an element with the role row.",
						"generalization": ["section"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-colspan"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-rowspan"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "checkbox",
						"description": "A checkable input that has three possible values: true, false, or mixed.\n\nThe aria-checked attribute of a checkbox indicates whether the input is checked (true), unchecked (false), or represents a group of elements that have a mixture of checked and unchecked values (mixed). Many checkboxes do not use the mixed value, and thus are effectively boolean checkboxes.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "code",
						"description": "A section whose content represents a fragment of computer code.\n\nThe primary purpose of the code role is to inform assistive technologies that the content is computer code and thus may require special presentation, in particular with respect to synthesized speech. More specifically, screen readers and other tools which provide text-to-speech presentation of content SHOULD prefer full punctuation verbosity to ensure common symbols (e.g. \"-\") are spoken.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "columnheader",
						"description": "A cell containing header information for a column.\n\ncolumnheader can be used as a column header in a table or grid. It could also be used in a pie chart to show a similar relationship in the data.\n\nThe columnheader establishes a relationship between it and all cells in the corresponding column. It is the structural equivalent to an HTML th element with a column scope.\n\nAuthors MUST ensure elements with role columnheader are contained in, or owned by, an element with the role row.\n\nApplying the aria-selected state on a columnheader MUST not cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding column. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the columnheader role can be used in both interactive grids and non-interactive tables, the use of aria-readonly and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-required or aria-readonly in a columnheader that descends from a table, and user agents SHOULD NOT expose either property to assistive technologies unless the columnheader descends from a grid.\n\nBecause cells are organized into rows, there is not a single container element for the column. The column is the set of gridcell elements in a particular position within their respective row containers.\n\nWhile aria-disabled is currently supported on columnheader, in a future version the working group plans to prohibit its use on elements with role columnheader except when the element is in the context of a grid or treegrid.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "combobox",
						"description": "An input that controls another element, such as a listbox or grid, that can dynamically pop up to help the user set the value of the input.\n\nThe Guidance for combobox has changed significantly in ARIA 1.2 due to problems with implementation of the previous patterns. Authors and developers of User Agents, Assistive Technologies, and Conformance Checkers are advised to review this section carefully to understand the changes. Explanation of the changes is available in the ARIA repository wiki.\n\nA combobox functionally combines a named input field with the ability to assist value selection via a supplementary popup element. A combobox input MAY be either a single-line text field that supports editing and typing or an element that only displays the current value of the combobox. If the combobox supports text input and provides autocompletion behavior as described in aria-autocomplete, authors MUST set aria-autocomplete on the combobox element to the value that corresponds to the provided behavior.\n\nTypically, the initial state of a combobox is collapsed. In the collapsed state, only the combobox element and a separate, optional popup control button are visible. A combobox is said to be expanded when both the combobox element showing its current value and its associated popup element are visible. Authors MUST set aria-expanded to true on an element with role combobox when it is expanded and false when it is collapsed.\n\nAuthors MUST ensure the popup element associated with a combobox has a role of listbox, tree, grid, or dialog. Authors MUST set aria-controls on a combobox element to a value that refers to the combobox popup element.\n\nElements with the role combobox have an implicit aria-haspopup value of listbox. If the combobox popup element has a role other than listbox, authors MUST specify a value for aria-haspopup that corresponds to the role of its popup.\n\nIf the user interface includes an additional icon that allows the visibility of the popup to be controlled via pointer and touch events, authors SHOULD ensure that element has role button, that it is focusable but not included in the page Tab sequence, and that it is not a descendant of the element with role combobox. In addition, to be keyboard accessible, authors SHOULD provide keyboard mechanisms for moving focus between the combobox element and elements contained in the popup. For example, one common convention is that Down Arrow moves focus from the input to the first focusable descendant of the popup element. If the popup element supports aria-activedescendant, in lieu of moving focus, such keyboard mechanisms can control the value of aria-activedescendant on the combobox element. When a descendant of the popup element is active, authors MAY set aria-activedescendant on the combobox to a value that refers to the active element within the popup while focus remains on the combobox element.\n\nUser agents MUST expose the value of elements with role combobox to assistive technologies. The value of a combobox is represented by one of the following:\n\nPlease review the following carefully. As a result of these changes a combobox following the ARIA 1.1 combobox specification will no longer conform with the ARIA specification.\n\nThe structural requirements for combobox defined by this version of the specification are different from the requirements defined by ARIA 1.0 and ARIA 1.1:\n\nThe features and behaviors of combobox implementations vary widely. Consequently, there are many important authoring considerations. See the WAI-ARIA Authoring Practices for additional details on implementing combobox design patterns.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"required": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded",
								"required": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "command",
						"description": "A form of widget that performs an action but does not receive input data.\n\ncommand is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "complementary",
						"description": "A landmark that is designed to be complementary to the main content at a similar level in the DOM hierarchy, but remaining meaningful when separated from the main content.\n\nThere are various types of content that would appropriately have this role. For example, in the case of a portal, this may include but not be limited to show times, current weather, related articles, or stocks to watch. The complementary role indicates that contained content is relevant to the main content. If the complementary content is completely separable from the main content, it may be appropriate to use a more general role.\n\nUser agents SHOULD treat elements with the role of complementary as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "composite",
						"description": "A widget that may contain navigable descendants or owned children.\n\nAuthors SHOULD ensure that a composite widget exists as a single navigation stop within the larger navigation system of the web page. Once the composite widget has focus, authors SHOULD provide a separate navigation mechanism for users to navigate to elements that are descendants or owned children of the composite element.\n\ncomposite is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "contentinfo",
						"description": "A landmark that contains information about the parent document.\n\nExamples of information included in this region of the page are copyrights and links to privacy statements.\n\nUser agents SHOULD treat elements with the role of contentinfo as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the contentinfo role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple contentinfo elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "definition",
						"description": "A definition of a term or concept. See related term.\n\nAuthors SHOULD identify the element being defined by giving that element a role of term and referencing it with the aria-labelledby attribute or by making the element with role term a descendant of the element with role definition.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "deletion",
						"description": "A deletion contains content that is marked as removed or content that is being suggested for removal. See related insertion.\n\nDeletions are typically used to either mark differences between two versions of content or to designate content suggested for removal in scenarios where multiple people are revising content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "dialog",
						"description": "A dialog is a descendant window of the primary window of a web application. For HTML pages, the primary application window is the entire web document, i.e., the body element.\n\nDialogs are most often used to prompt the user to enter or respond to information. A dialog that is designed to interrupt workflow is usually modal. See related alertdialog.\n\nAuthors MUST provide an accessible name for a dialog, which can be done with the aria-label or aria-labelledby attribute.\n\nAuthors SHOULD ensure that all dialogs (both modal and non-modal) have at least one focusable descendant element. Authors SHOULD focus an element in the modal dialog when it is displayed, and authors SHOULD manage focus of modal dialogs.\n\nIn the description of this role, the term \"web application\" does not refer to the application role, which specifies specific assistive technology behaviors.",
						"generalization": ["window"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "directory",
						"description": "[Deprecated in ARIA 1.2] A list of references to members of a group, such as a static table of contents.\n\nAs exposed by accessibility APIs, the directory role is essentially equivalent to the list role. So, using directory does not provide any additional benefits to assistive technology users. Authors are advised to treat directory as deprecated and to use list, or a host language's equivalent semantics instead.\n\nA directory is a static table of contents, whether linked or unlinked. This includes tables of contents built with lists, including nested lists. Dynamic tables of contents, however, might use a tree role instead.",
						"deprecated": true,
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "document",
						"description": "An element containing content that assistive technology users may want to browse in a reading mode.\n\nWhen user agent focus moves to an element assigned the role of document, assistive technologies having a reading mode for browsing static content MAY switch to that reading mode and intercept standard input events, such as Up or Down arrow keyboard events, to control the reading cursor.\n\nBecause assistive technologies that have a reading mode default to that mode for all elements except for those with either a widget or application role, the only circumstance where the document role is useful for changing assistive technology behavior is when the element with role document is a focusable child element of a widget or application. For example, given an application element which contains some static rich text, the author can apply role document to the element containing the text and give it a tabindex of 0. When a screen reader user presses the Tab key and places focus on the document element, the user will be able to read the text with the screen reader's reading cursor.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "emphasis",
						"description": "One or more emphasized characters. See related strong.\n\nThe purpose of the emphasis role is to stress or emphasize content. It is not for communicating changes in typographical presentation that do not impact the meaning of the content. Authors SHOULD use the emphasis role only if its absence would change the meaning of the content.\n\nThe emphasis role is not intended to convey importance; for that purpose, the strong role is more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "feed",
						"description": "A scrollable list of articles where scrolling may cause articles to be added to or removed from either end of the list.\n\nA feed enables users of assistive technologies that have a document browse mode, such as screen readers, to use the browse mode reading cursor to both read and scroll through a stream of rich content that may continue scrolling infinitely by loading more content as the user reads. In a feed, assistive technologies provide a web application with signals of the user's reading cursor movement by moving user agent focus, enabling the application to both add new content and visually position content as the user browses the page. The feed also lets authors inform assistive technologies when additions and removals are occurring so assistive technologies can more reliably update their reading view without disrupting reading or degrading performance.\n\nFor example, a feed could be used to present a stream of news stories where each article contains a story with text, links, images, and comments as well as widgets for sharing and commenting. As a screen reader user reads and interacts with each story and moves the screen reader reading cursor from story to story, each story scrolls into view and, as needed, new stories are loaded.\n\nA feed is a container element whose children have role article. When articles are added or removed from either or both ends of a feed, authors SHOULD set aria-busy to true on the feed element before the changes are made and set it to false after the changes are complete. Authors SHOULD avoid inserting or removing articles in the middle of a feed. These requirements help assistive technologies gracefully respond to changes in the feed content that occur simultaneously with user commands to move the reading cursor within the feed.\n\nAuthors SHOULD make each article in a feed focusable and ensure that the application scrolls an article into view when user agent focus is set on the article or one of its descendant elements. For example, in HTML, each article element should have a tabindex value of either -1 or 0.\n\nWhen an assistive technology reading cursor moves from one article to another, assistive technologies SHOULD set user agent focus on the article that contains the reading cursor. If the reading cursor lands on a focusable element inside the article, the assistive technology MAY set focus on that element in lieu of setting focus on the containing article.\n\nBecause the ability to scroll to another article with an assistive technology reading cursor depends on the presence of another article in the page, authors SHOULD attempt to load additional articles before user agent focus reaches an article at either end of the set of articles that has been loaded. Alternatively, authors MAY include an article at either or both ends of the loaded set of articles that includes an element, such as a button, that lets the user request more articles to be loaded.\n\nIn addition to providing a brief label, authors MAY apply aria-describedby to article elements in a feed to suggest to screen readers which elements to speak after the label when users navigate by article. Screen readers MAY provide users with a way to quickly scan feed content by speaking both the label and accessible description when navigating by article, enabling the user to ignore repetitive or less important elements, such as embedded interaction widgets, that the author has left out of the description.\n\nAuthors SHOULD provide keyboard commands for moving focus among articles in a feed so users who do not utilize an assistive technology that provides article navigation features can use the keyboard to navigate the feed.\n\nIf the number of articles available in a feed supply is static, authors MAY specify aria-setsize on article elements in that feed. However, if the total number is extremely large, indefinite, or changes often, authors MAY set aria-setsize to -1 to communicate the unknown size of the set.\n\nSee the WAI-ARIA Authoring Practices for additional details on implementing a feed design pattern.",
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["article"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "figure",
						"description": "A perceivable section of content that typically contains a graphical document, images, code snippets, or example text. The parts of a figure MAY be user-navigable.\n\nAuthors SHOULD provide a reference to the figure from the main text, but the figure need not be displayed at the same location as the referencing element. Authors MAY reference text serving as a caption using aria-describedby. Authors MAY provide a label using aria-label or MAY reference text serving as a label using aria-labelledby.\n\nAssistive technologies SHOULD enable users to quickly navigate to figures. Mainstream user agents MAY enable users to quickly navigate to figures.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "form",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a form. See related search.\n\nA form may contain a mix of host language form controls, scripted controls, and hyperlinks. Authors are reminded to use native host language semantics to create form controls whenever possible. If the purpose of a form is to submit search criteria, authors SHOULD use the search role instead of the generic form role.\n\nAuthors MUST give each element with role form a brief label that describes the purpose of the form. Authors SHOULD reference a visible label with aria-labelledby if a visible label is present. Authors SHOULD include the label inside of a heading whenever possible. The heading MAY be an instance of the standard host language heading element or an instance of an element with role heading.\n\nIf an author uses a script to submit a form based on a user action that would otherwise not trigger an onsubmit event (for example, a form submission triggered by the user changing a form element's value), the author SHOULD provide the user with advance notification of the behavior.\n\nUser agents SHOULD treat elements with the role of form as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "generic",
						"description": "A nameless container element that has no semantic meaning on its own.\n\nThe generic role is intended for use as the implicit role of generic elements in host languages (such as HTML div or span), so is primarily for implementors of user agents. Authors SHOULD NOT use this role in content. Authors MAY use presentation or none to remove implicit accessibility semantics, or a semantic container role such as group to semantically group descendants in a named container.\n\nLike an element with role presentation, an element with role generic can provide a limited number of accessible states and properties for its descendants, such as aria-live attributes. However, unlike elements with role presentation, generic elements are exposed in accessibility APIs so that assistive technologies can gather certain properties such as layout and bounds.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby", "aria-roledescription"]
					},
					{
						"name": "grid",
						"description": "A composite widget containing a collection of one or more rows with one or more cells where some or all cells in the grid are focusable by using methods of two-dimensional navigation, such as directional arrow keys.\n\nThe grid role does not imply a specific visual, e.g., tabular, presentation. It describes relationships among elements. It may be used for purposes as simple as grouping a collection of checkboxes or navigation links or as complex as creating a full-featured spreadsheet application.\n\nThe cell elements of a grid have role gridcell. Authors MAY designate a cell as a row or column header by using either the rowheader or columnheader role in lieu of the gridcell role. Authors MUST ensure elements with role gridcell, columnheader, or rowheader are owned by elements with role row, which are in turn owned by an element with role rowgroup, or grid.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants of a grid as described in Managing Focus. When a user is navigating the grid content with a keyboard, authors SHOULD set focus as follows:\n\nAuthors SHOULD provide a mechanism for changing to an interaction or edit mode that allows users to navigate and interact with content contained inside a focusable cell if that focusable cell contains any of the following:\n\nFor example, if a cell in a spreadsheet contains a combobox or editable text, the Enter key might be used to activate a cell interaction or editing mode when that cell has focus so the directional arrow keys can be used to operate the contained combobox or textbox. Depending on the implementation, pressing Enter again, Tab, Escape, or another key may switch the application back to the grid navigation mode.\n\nAuthors MAY use a gridcell to display the result of a formula, which could be editable by the user. In a spreadsheet application, for example, a gridcell may show a value calculated from a formula until the user activates the gridcell for editing when a textbox appears in the gridcell containing the formula in an editable state.\n\nIf aria-readonly is set on an element with role grid, user agents MUST propagate the value to all gridcell elements owned by the grid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nIn a grid that provides cell content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, the value of aria-readonly, whether specified for a grid or individual cells, only indicates whether the content contained in cells is editable. It does not represent availability of functions for navigating or manipulating the grid itself.\n\nAn unspecified value for aria-readonly does not imply that a grid or a gridcell contains editable content. For example, if a grid presents a collection of elements that are not editable, such as a collection of link elements representing dates in a datepicker, it is not necessary for the author to specify a value for aria-readonly.\n\nAuthors MAY indicate that a focusable gridcell is selectable as the object of an action with the aria-selected attribute. If the grid allows multiple gridcells to be selected, the author SHOULD set aria-multiselectable to true on the element with role grid.\n\nSince WAI-ARIA can augment an element of the host language, a grid can reuse the elements and attributes of a native table, such as an HTML table element. For example, if an author applies the grid role to an HTML table element, the author does not need to apply the row and gridcell roles to the descendant HTML tr and td elements because the user agent will automatically make the appropriate translations. When the author is reusing a native host language table element and needs a gridcell element to span multiple rows or columns, the author SHOULD apply the appropriate host language attributes instead of WAI-ARIA aria-rowspan or aria-colspan properties.\n\nSee the WAI-ARIA Authoring Practices for additional details on implementing grid design patterns.",
						"generalization": ["composite", "table"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "gridcell",
						"description": "A cell in a grid or treegrid.\n\nA gridcell may be focusable, editable, and selectable. A gridcell may have relationships such as aria-controls to address the application of functional relationships.\n\nIf an author intends a gridcell to have a row header, column header, or both, and if the relevant headers cannot be determined from the DOM structure, authors SHOULD explicitly indicate which header cells are relevant to the gridcell by applying aria-describedby on the gridcell and referencing elements with role rowheader or columnheader.\n\nIn a treegrid, authors MAY define a gridcell as expandable by using the aria-expanded attribute. If the aria-expanded attribute is provided, it applies only to the individual cell. It is not a proxy for the container row, which also can be expanded. The main use case for providing this attribute on a gridcell is pivot table behavior.\n\nAuthors MUST ensure elements with role gridcell are contained in, or owned by, an element with the role row.",
						"generalization": ["cell", "widget"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "group",
						"description": "A set of user interface objects that is not intended to be included in a page summary or table of contents by assistive technologies.\n\nContrast with region, which is a grouping of user interface objects that will be included in a page summary or table of contents.\n\nAuthors SHOULD use a group to form a logical collection of items in a widget, such as children in a tree widget forming a collection of siblings in a hierarchy. However, when a group is used in the context of a listbox, authors MUST limit its children to option elements. Therefore, proper handling of group by authors and assistive technologies is determined by the context in which it is provided.\n\nAuthors MAY nest group elements. If a section is significant enough to warrant inclusion in the web page's table of contents, the author SHOULD assign it a role of region or a standard landmark role.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "heading",
						"description": "A heading for a section of the page.\n\nTo ensure elements with a role of heading are organized into a logical outline, authors MUST use the aria-level attribute to indicate the proper nesting level.",
						"generalization": ["sectionhead"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"required": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "img",
						"description": "A container for a collection of elements that form an image.\n\nAn img can contain captions and descriptive text, as well as multiple image files that when viewed together give the impression of a single image. An img represents a single graphic within a document, whether or not it is formed by a collection of drawing objects. In order for elements with a role of img to be perceivable, authors MUST provide a label using the aria-label or aria-labelledby attribute.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "input",
						"description": "A generic type of widget that allows user input.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "insertion",
						"description": "An insertion contains content that is marked as added or content that is being suggested for addition. See related deletion.\n\nInsertions are typically used to either mark differences between two versions of content or to designate content suggested for addition in scenarios where multiple people are revising content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "landmark",
						"description": "A perceivable section containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nAuthors designate the purpose of the content by assigning a role that is a subclass of the landmark role and, when needed, by providing a brief, descriptive label.\n\nElements with a role that is a subclass of the landmark role are known as landmark regions or navigational landmark regions. Assistive technologies SHOULD enable users to quickly navigate to landmark regions. Mainstream user agents MAY enable users to quickly navigate to landmark regions.\n\nlandmark is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "link",
						"description": "An interactive reference to an internal or external resource that, when activated, causes the user agent to navigate to that resource. See related button.\n\nIf this is a native link in the host language (such as an HTML anchor with an href value), activating the link causes the user agent to navigate to that resource. If this is a simulated link, the web application author is responsible for managing navigation.\n\nIf pressing the link triggers an action but does not change browser focus or page location, authors are advised to consider using the button role instead of the link role.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "list",
						"description": "A section containing listitem elements. See related listbox.\n\nLists contain children whose role is listitem.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["listitem"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listbox",
						"description": "A widget that allows the user to select one or more items from a list of choices. See related combobox and list.\n\nItems within the list are static and, unlike standard HTML select elements, may contain images. List boxes contain children whose role is option or elements whose role is group which in turn contains children whose role is option.\n\nTo be keyboard accessible, authors SHOULD manage focus of option descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role listbox have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > option", "option"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listitem",
						"description": "A single item in a list or directory.\n\nAuthors MUST ensure elements whose role is listitem are contained in, or owned by, an element whose role is list.",
						"generalization": ["section"],
						"requiredContextRole": ["directory", "list"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "log",
						"description": "A type of live region where new information is added in meaningful order and old information may disappear. See related marquee.\n\nExamples include chat logs, messaging history, game log, or an error log. In contrast to other live regions, in this role there is a relationship between the arrival of new items in the log and the reading order. The log contains a meaningful sequence and new information is added only to the end of the log, not at arbitrary points.\n\nElements with the role log have an implicit aria-live value of polite.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "main",
						"description": "A landmark containing the main content of a document.\n\nThis marks the content that is directly related to or expands upon the central topic of the document. The main role is a non-obtrusive alternative for \"skip to main content\" links, where the navigation option to go to the main content (or other landmarks) is provided by the user agent through a dialog or by assistive technologies.\n\nUser agents SHOULD treat elements with the role of main as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the main role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple main elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "marquee",
						"description": "A type of live region where non-essential information changes frequently. See related log.\n\nCommon usages of marquee include stock tickers and ad banners. The primary difference between a marquee and a log is that logs usually have a meaningful order or sequence of important content changes.\n\nElements with the role marquee have an implicit aria-live value of off.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "math",
						"description": "Content that represents a mathematical expression.\n\nContent with the role math is intended to be marked up in an accessible format such as MathML [MathML3], or with another type of textual representation such as TeX or LaTeX, which can be converted to an accessible format by native browser implementations or a polyfill library.\n\nWhile it is not ideal to use an image of a mathematical expression, there exists a significant amount of legacy content where images are used to represent mathematical expressions. Authors SHOULD ensure that images of math are labeled by text that describes the mathematical expression as it might be spoken.\n\nBrowsers that support native implementations of MathML are able to provide a more robust, accessible math experience than can be accomplished with plain text approximations of math. Some rendering engines have close integration with screen readers that allow spacial touch exploration of the formula and refreshable braille display output in the Nemeth Braille format. This level of integration is not supported with images of mathematical formulas, even if the author provides a plain text approximation.\n\nAt the time of this writing, some mainstream browsers do not support MathML natively, and must be retrofit using a JavaScript polyfill library. When authoring math content, use native MathML wherever possible, and test thoroughly. Use a polyfill library or provide a fallback image with a text alternative approximation if necessary.\n\nIf a rendering engine does not support a native math format such as MathML, authors MAY use JavaScript to downgrade the content to a format the browser can display, such as this HTML image using a data URI and plain text alternative.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menu",
						"description": "A type of widget that offers a list of choices to the user.\n\nA menu is often a list of common actions or functions that the user can invoke. The menu role is appropriate when a list of menu items is presented in a manner similar to a menu on a desktop application.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menu have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitem",
							"group > menuitemradio",
							"group > menuitemcheckbox",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menubar",
						"description": "A presentation of menu that usually remains visible and is usually presented horizontally.\n\nThe menubar role is used to create a menu bar similar to those found in Windows, Mac, and Gnome desktop applications. A menu bar is used to create a consistent set of frequently used commands. Authors SHOULD ensure that menubar interaction is similar to the typical menu bar interaction in a desktop graphical user interface.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menubar have an implicit aria-orientation value of horizontal.",
						"generalization": ["menu"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitem",
							"group > menuitemradio",
							"group > menuitemcheckbox",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitem",
						"description": "An option in a set of choices contained by a menu or menubar.\n\nAuthors MAY disable a menu item with the aria-disabled attribute. If the menu item has its aria-haspopup attribute set to true, it indicates that the menu item may be used to launch a sub-level menu, and authors SHOULD display a new sub-level menu when the menu item is activated.\n\nIn order to identify that they are related widgets, authors MUST ensure that menu items are owned by an element with role menu or menubar. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["command"],
						"requiredContextRole": ["group", "menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemcheckbox",
						"description": "A menuitem with a checkable state whose possible values are true, false, or mixed.\n\nThe aria-checked attribute of a menuitemcheckbox indicates whether the menu item is checked (true), unchecked (false), or represents a sub-level menu of other menu items that have a mixture of checked and unchecked values (mixed).\n\nIn order to identify that they are related widgets, authors MUST ensure that menu item checkboxes are owned by an element with role menu or menubar. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["menuitem"],
						"requiredContextRole": ["group", "menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemradio",
						"description": "A checkable menuitem in a set of elements with the same role, only one of which can be checked at a time.\n\nAuthors SHOULD enforce that only one menuitemradio in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).\n\nIn order to identify that they are related widgets, authors MUST ensure that menu item radios are owned by an element with role menu or menubar, or by a role group which itself is owned by an element with role menu or menubar.\n\nIf a menu or menubar contains more than one group of menuitemradio elements, or if the menu contains one group and other, unrelated menu items, authors SHOULD contain each set of related menuitemradio elements in an element using the group role. Authors MAY also delimit the group from other menu items with an element using the separator role, or an element with an equivalent role from the native markup language.",
						"generalization": ["menuitemcheckbox"],
						"requiredContextRole": ["group", "menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "meter",
						"description": "An element that represents a scalar measurement within a known range, or a fractional value. See related progressbar.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum values for the meter. Otherwise, their implicit values follow the same rules as <input[type=\"range\"]> in [HTML]:\n\nThe value of aria-valuenow MUST NOT fall below or exceed the computed values of aria-valuemin and aria-valuemax, respectively.\n\nAuthors SHOULD NOT use the meter role to indicate progress; the progressbar role exists to address that need.\n\nPresently, there are no WAI-ARIA properties corresponding to the low, optimum, and high attributes supported on the <meter> element in [HTML]. The addition of these properties will be considered for ARIA version 1.3.",
						"generalization": ["range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"inherited": true
							},
							{
								"name": "aria-valuemin",
								"inherited": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "navigation",
						"description": "A landmark containing a collection of navigational elements (usually links) for navigating the document or related documents.\n\nUser agents SHOULD treat elements with the role of navigation as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "none",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym presentation.\n\nIn ARIA 1.1, the working group introduced none as a synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and we believe role=\"none\" conveys the actual meaning more unambiguously.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "note",
						"description": "A section whose content is parenthetic or ancillary to the main content of the resource.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "option",
						"description": "A selectable item in a listbox.\n\nAuthors MUST ensure elements with role option are contained in, or owned by, an element with the role listbox or group within a listbox. Options not associated with a listbox might not be correctly mapped to an accessibility API.\n\nElements with the role option have an implicit aria-selected value of false.",
						"generalization": ["input"],
						"requiredContextRole": ["group", "listbox"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"required": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "paragraph",
						"description": "A paragraph of content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "presentation",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym none.\n\nIn ARIA 1.1, the working group introduced none as a synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and we believe role=\"none\" conveys the actual meaning more unambiguously.\n\nUntil implementations include sufficient support for role=\"none\", web authors are advised to use the presentation role alone role=\"presentation\" or redundantly as a fallback to the none role role=\"none presentation\".\n\nThe intended use is when an element is used to change the look of the page but does not have all the functional, interactive, or structural relevance implied by the element type, or may be used to provide for an accessible fallback in older browsers that do not support WAI-ARIA.\n\nExample use cases:\n\nFor any element with a role of presentation and which is not focusable, the user agent MUST NOT expose the implicit native semantics of the element (the role and its states and properties) to accessibility APIs. However, the user agent MUST expose content and descendant elements that do not have an explicit or inherited role of presentation. Thus, the presentation role causes a given element to be treated as having no role or to be removed from the accessibility tree, but does not cause the content contained within the element to be removed from the accessibility tree.\n\nFor example, according to an accessibility API, the following markup elements would appear to have identical role semantics (no role) and identical content.\n\nThe presentation role is used on an element that has implicit native semantics, meaning that there is a default accessibility API role for the element. Some elements are only complete when additional descendant elements are provided. For example, in HTML, table elements (matching the table role) require tr descendants (the row role), which in turn require th or td children (the cell, columnheader, rowheader roles). Similarly, lists require list item children. The descendant elements that complete the semantics of an element are described in WAI-ARIA as required owned elements.\n\nWhen an explicit or inherited role of presentation is applied to an element with the implicit semantic of a WAI-ARIA role that has required owned elements, in addition to the element with the explicit role of presentation, the user agent MUST apply an inherited role of presentation to any owned elements that do not have an explicit role defined. Also, when an explicit or inherited role of presentation is applied to a host language element which has required children as defined by the host language specification, in addition to the element with the explicit role of presentation, the user agent MUST apply an inherited role of presentation to any required children that do not have an explicit role defined.\n\nIn HTML, the <img> element is treated as a single entity regardless of the type of image file. Consequently, using role=\"presentation\" or role=\"none\" on an HTML img is equivalent to using aria-hidden=\"true\". In order to make the image contents accessible, authors can embed the object using an <object> or <iframe> element, or use inline SVG code, and follow the accessibility guidelines for the image content.\n\nFor any element with an explicit or inherited role of presentation and which is not focusable, user agents MUST ignore role-specific WAI-ARIA states and properties for that element. For example, in HTML, a ul or ol element with a role of presentation will have the implicit native semantics of its li elements removed because the list role to which the ul or ol corresponds has a required owned element of listitem. Likewise, the implicit native semantics of an HTML table element's thead/tbody/tfoot/tr/th/td descendants will also be removed, because the HTML specification indicates that these are required structural descendants of the table element.\n\nOnly the implicit native semantics of elements that correspond to WAI-ARIA required owned elements are removed. All other content remains intact, including nested tables or lists, unless those elements also have an explicit role of presentation applied.\n\nFor example, according to an accessibility API, the following markup elements would appear to have identical role semantics (no roles) and identical content.\n\nThere are other WAI-ARIA roles with required children for which this situation is applicable (e.g., radiogroups and listboxes), but tables and lists are the most common real-world cases in which the presentation inheritance is likely to apply.\n\nFor any element with an explicit or inherited role of presentation, user agents MUST apply an inherited role of presentation to all host-language-specific labeling elements for the presentational element. For example, a table element with a role of presentation will have the implicit native semantics of its caption element removed, because the caption is merely a label for the presentational table.\n\nAuthors SHOULD NOT provide meaningful alternative text (for example, use alt=\"\" in HTML) when the presentation role is applied to an image.\n\nIn the following code sample, the containing img and is appropriately labeled by the caption paragraph. In this example the img element can be marked as presentation because the role and the text alternatives are provided by the containing element.\n\nIn the following code sample, because the anchor (HTML a element) is acting as the treeitem, the list item (HTML li element) is assigned an explicit WAI-ARIA role of presentation to override the user agent's implicit native semantics for list items.\n\nThere are a number of ways presentational role conflicts are resolved.\n\nUser agents MUST NOT expose elements having explicit or inherited presentational role in the accessibility tree, with these exceptions:\n\nFor example, aria-describedby is a global attribute and would always be applied; aria-level is not a global attribute and would therefore only apply if the element was not in a presentational state.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "progressbar",
						"description": "An element that displays the progress status for tasks that take a long time.\n\nA progressbar indicates that the user's request has been received and the application is making progress toward completing the requested action.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum progress indicator values. Otherwise, their implicit values follow the same rules as <input[type=\"range\"]> in [HTML]:\n\nThe author SHOULD supply a value for aria-valuenow unless the value is indeterminate, in which case the author SHOULD omit the aria-valuenow attribute. Authors SHOULD update this value when the visual progress indicator is updated. If the progressbar is describing the loading progress of a particular region of a page, the author SHOULD use aria-describedby to point to the status, and set the aria-busy attribute to true on the region until it is finished loading. It is not possible for the user to alter the value of a progressbar because it is always read-only.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified.",
						"generalization": ["range", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"inherited": true
							},
							{
								"name": "aria-valuemin",
								"inherited": true
							},
							{
								"name": "aria-valuenow",
								"inherited": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radio",
						"description": "A checkable input in a group of elements with the same role, only one of which can be checked at a time.\n\nAuthors SHOULD ensure that elements with role radio are explicitly grouped in order to indicate which ones affect the same value. This is achieved by enclosing the radio elements in an element with role radiogroup. If it is not possible to make the radio buttons DOM children of the radiogroup, authors SHOULD use the aria-owns attribute on the radiogroup element to indicate the relationship to its children.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radiogroup",
						"description": "A group of radio buttons.\n\nA radiogroup is a type of select list that can only have a single entry checked at any one time. Authors SHOULD enforce that only one radio button in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["radio"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "range",
						"description": "An element representing a range of values.\n\nrange is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow"
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "region",
						"description": "A landmark containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nAuthors SHOULD limit use of the region role to sections containing content with a purpose that is not accurately described by one of the other landmark roles, such as main, complementary, or navigation.\n\nAuthors MUST give each element with role region a brief label that describes the purpose of the content in the region. Authors SHOULD reference a visible label with aria-labelledby if a visible label is present. Authors SHOULD include the label inside of a heading whenever possible. The heading MAY be an instance of the standard host language heading element or an instance of an element with role heading.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role region. Mainstream user agents MAY enable users to quickly navigate to elements with role region.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "roletype",
						"description": "The base role from which all other roles inherit.\n\nProperties of this role describe the structural and functional purpose of objects that are assigned this role. A role is a concept that can be used to understand and operate instances.\n\nroletype is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": [],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic"
							},
							{
								"name": "aria-busy"
							},
							{
								"name": "aria-controls"
							},
							{
								"name": "aria-current"
							},
							{
								"name": "aria-describedby"
							},
							{
								"name": "aria-details"
							},
							{
								"name": "aria-disabled",
								"deprecated": true
							},
							{
								"name": "aria-dropeffect"
							},
							{
								"name": "aria-errormessage",
								"deprecated": true
							},
							{
								"name": "aria-flowto"
							},
							{
								"name": "aria-grabbed"
							},
							{
								"name": "aria-haspopup",
								"deprecated": true
							},
							{
								"name": "aria-hidden"
							},
							{
								"name": "aria-invalid",
								"deprecated": true
							},
							{
								"name": "aria-keyshortcuts"
							},
							{
								"name": "aria-label"
							},
							{
								"name": "aria-labelledby"
							},
							{
								"name": "aria-live"
							},
							{
								"name": "aria-owns"
							},
							{
								"name": "aria-relevant"
							},
							{
								"name": "aria-roledescription"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "row",
						"description": "A row of cells in a tabular container.\n\nRows contain cell or gridcell elements, and thus serve to organize a table, grid, or treegrid.\n\nWhile the row role can be used in a table, grid, or treegrid, the semantics of aria-expanded, aria-posinset, aria-setsize, and aria-level are only applicable to the hierarchical structure of an interactive tree grid. Therefore, authors MUST NOT apply aria-expanded, aria-posinset, aria-setsize, and aria-level to a row that descends from a table or grid, and user agents SHOULD NOT expose any of these four properties to assistive technologies unless the row descends from a treegrid.\n\nAuthors MUST ensure elements with role row are contained in, or owned by, an element with the role table, grid, rowgroup, or treegrid.\n\nWhile aria-disabled is currently supported on row, in a future version the working group plans to prohibit its on elements with role row except when the element is in the context of a grid or treegrid.",
						"generalization": ["group", "widget"],
						"requiredContextRole": ["grid", "rowgroup", "table", "treegrid"],
						"requiredOwnedElements": ["cell", "columnheader", "gridcell", "rowheader"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowgroup",
						"description": "A structure containing one or more row elements in a tabular container.\n\nThe rowgroup role establishes a relationship between owned row elements. It is a structural equivalent to the thead, tfoot, and tbody elements in an HTML table element.\n\nAuthors MUST ensure elements with role rowgroup are contained in, or owned by, an element with the role grid, table, or treegrid.\n\nThe rowgroup role exists, in part, to support role symmetry in HTML, and allows for the propagation of presentation inheritance on HTML table elements with an explicit presentation role applied.\n\nThis role does not differentiate between types of row groups (e.g., thead vs. tbody), but an issue has been raised for WAI-ARIA 2.0.",
						"generalization": ["structure"],
						"requiredContextRole": ["grid", "table", "treegrid"],
						"requiredOwnedElements": ["row"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowheader",
						"description": "A cell containing header information for a row.\n\nThe rowheader role can be used to identify a cell as a header for a row in a table, grid, or treegrid. The rowheader establishes a relationship between it and all cells in the corresponding row. It is a structural equivalent to setting scope=\"row\" on an HTML th element.\n\nAuthors MUST ensure elements with role rowheader are contained in, or owned by, an element with the role row.\n\nApplying the aria-selected state on a rowheader MUST NOT cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding row. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the rowheader role can be used in both interactive grids and non-interactive tables, the use of aria-expanded, aria-readonly, and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-expanded, aria-readonly, or aria-required in a rowheader that descends from a table, and user agents SHOULD NOT expose these properties to assistive technologies unless the rowheader descends from a grid or treegrid.\n\nWhile aria-disabled is currently supported on rowheader, in a future version the working group plans to prohibit its use on elements with role rowheader except when the element is in the context of a grid or treegrid.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "scrollbar",
						"description": "A graphical object that controls the scrolling of content within a viewing area, regardless of whether the content is fully displayed within the viewing area.\n\nA scrollbar represents the current value and range of possible values via the size of the scrollbar and position of the thumb with respect to the visible range of the orientation (horizontal or vertical) it controls. Its orientation represents the orientation of the scrollbar and the scrolling effect on the viewing area controlled by the scrollbar. It is typically possible to add or subtract to the current value by using directional keys such as arrow keys.\n\nAuthors MUST set the aria-controls attribute on the scrollbar element to reference the scrollable area it controls.\n\nAuthors MAY set aria-valuemin and aria-valuemax to indicate the minimum and maximum thumb position. Otherwise, their implicit values follow the same rules as <input[type=\"range\"]> in [HTML]:\n\nAuthors MUST set the aria-valuenow attribute to indicate the current thumb position. If aria-valuenow is missing or has an unexpected value, browsers MAY implement the repair techniques specified in the section describing handling author errors in states and properties, which are equivalent to the repair techniques for <input[type=\"range\"]> in [HTML].\n\nElements with the role scrollbar have an implicit aria-orientation value of vertical.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified. It is best to set the values for aria-valuemin, aria-valuemax, and aria-valuenow in a manner that is appropriate for this calculation.",
						"generalization": ["range", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"required": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "search",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a search facility. See related form and searchbox.\n\nA search region may be a mix of host language form controls, scripted controls, and hyperlinks.\n\nUser agents SHOULD treat elements with the role of search as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "searchbox",
						"description": "A type of textbox intended for specifying search criteria. See related textbox and search.",
						"generalization": ["textbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "section",
						"description": "A renderable structural containment unit in a document or application.\n\nsection is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "sectionhead",
						"description": "A structure that labels or summarizes the topic of its related section.\n\nsectionhead is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "select",
						"description": "A form widget that allows the user to make selections from a set of choices.\n\nselect is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["composite", "group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "separator",
						"description": "A divider that separates and distinguishes sections of content or groups of menuitems.\n\nThere are two types of separators: a static structure that provides only a visible boundary and a focusable, interactive widget that is also moveable. If a separator is not focusable, it is revealed to assistive technologies as a static structural element. For example, a static separator can be used to help visually divide two groups of menu items in a menu or to provide a horizontal rule between two sections of a page.\n\nAuthors MAY make a separator focusable to create a widget that both provides a visible boundary between two sections of content and enables the user to change the relative size of the sections by changing the position of the separator. A variable separator widget can be moved continuously within a range, whereas a fixed separator widget supports only two discrete positions. Typically, a fixed separator widget is used to toggle one of the sections between expanded and collapsed states.\n\nIf the separator is focusable, authors MUST set the value of aria-valuenow to a number reflecting the current position of the separator and update that value when it changes. Authors SHOULD also provide the value of aria-valuemin if it is not 0 and the value of aria-valuemax if it is not 100. If missing or not a number, the implicit values of these attributes are as follows:\n\nIn applications where there is more than one focusable separator, authors SHOULD provide an accessible name for each one.\n\nElements with the role separator have an implicit aria-orientation value of horizontal.",
						"generalization": ["structure", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "slider",
						"description": "An input where the user selects a value from within a given range.\n\nA slider represents the current value and range of possible values via the size of the slider and position of the thumb. It is typically possible to add or subtract to the value by using directional keys such as arrow keys.\n\nAuthors MAY set the aria-valuemin and aria-valuemax attributes. Otherwise, their implicit values follow the same rules as <input[type=\"range\"]> in [HTML]:\n\nAuthors MUST set the aria-valuenow attribute. If aria-valuenow is missing or has an unexpected value, browsers MAY implement the repair techniques specified in the section describing handling author errors in states and properties, which are equivalent to the repair techniques for <input[type=\"range\"]> in [HTML].\n\nElements with the role slider have an implicit aria-orientation value of horizontal.",
						"generalization": ["input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "spinbutton",
						"description": "A form of range that expects the user to select from among discrete choices.\n\nA spinbutton typically allows users to change its displayed value by activating increment and decrement buttons that step through a set of allowed values. Some implementations display the value in an text field that allows editing and typing but typically limits input in ways that help prevent invalid values.\n\nAlthough a spinbutton is similar in appearance to many presentations of select, it is advisable to use spinbutton when working with known ranges (especially in the case of large ranges) as opposed to distinct options. For example, a spinbutton representing a range from 1 to 1,000,000 would provide much better performance than a select widget representing the same values.\n\nAuthors MAY create a spinbutton with children or owned elements, but MUST limit those elements to a textbox and/or two buttons. Alternatively, authors MAY apply the spinbutton role to a text input and create sibling buttons to support the increment and decrement functions.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus. When a spinbutton receives focus, authors SHOULD ensure focus is placed on the textbox element if one is present, and on the spinbutton itself otherwise. Authors SHOULD also ensure the up and down arrows on a keyboard perform the increment and decrement functions and that the increment and decrement button elements are NOT included in the primary navigation ring, e.g., the Tab ring in HTML.\n\nAuthors SHOULD set the aria-valuenow attribute when the spinbutton has a value. Authors SHOULD set the aria-valuemin attribute when there is a minimum value, and the aria-valuemax attribute when there is a maximum value.",
						"generalization": ["composite", "input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow"
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "status",
						"description": "A type of live region whose content is advisory information for the user but is not important enough to justify an alert, often but not necessarily presented as a status bar.\n\nAuthors SHOULD ensure an element with role status does not receive focus as a result of change in status.\n\nStatus is a form of live region. If another part of the page controls what appears in the status, authors SHOULD make the relationship explicit with the aria-controls attribute.\n\nAssistive technologies MAY reserve some cells of a Braille display to render the status.\n\nElements with the role status have an implicit aria-live value of polite and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "strong",
						"description": "Content that is important, serious, or urgent. See related emphasis.\n\nThe purpose of the strong role is to communicate strong importance, seriousness, or urgency. It is not for communicating changes in typographical presentation that are not important to the meaning of the content. Authors SHOULD use the strong role only if its absence would change the meaning of the content.\n\nThe strong role is not intended to convey stress or emphasis; for that purpose, the emphasis role is more appropriate.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "structure",
						"description": "A document structural element.\n\nRoles for document structure support the accessibility of dynamic web content by helping assistive technologies determine active content versus static document content. Structural roles by themselves do not all map to accessibility APIs, but are used to create widget roles or assist content adaptation for assistive technologies.\n\nstructure is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "subscript",
						"description": "One or more subscripted characters. See related superscript.\n\nThe subscript role is intended to be used only to mark up typographical conventions that have specific meanings; not for typographical presentation for presentation's sake. In general, authors SHOULD use this role only if the absence of the subscript would change the meaning of the content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "superscript",
						"description": "One or more superscripted characters. See related superscript.\n\nThe superscript role is intended to be used only to mark up typographical conventions that have specific meanings; not for typographical presentation for presentation's sake. In general, authors SHOULD use this role only if the absence of the superscript would change the meaning of the content.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": ["aria-label", "aria-labelledby"]
					},
					{
						"name": "switch",
						"description": "A type of checkbox that represents on/off values, as opposed to checked/unchecked values. See related checkbox.\n\nThe aria-checked attribute of a switch indicates whether the input is on (true) or off (false). The mixed value is invalid, and user agents MUST treat a mixed value as equivalent to false for this role.\n\nA switch provides approximately the same functionality as a checkbox and toggle button, but makes it possible for assistive technologies to present the widget in a fashion consistent with its on-screen appearance.",
						"generalization": ["checkbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tab",
						"description": "A grouping label providing a mechanism for selecting the tab content that is to be rendered to the user.\n\nIf a tabpanel or item in a tabpanel has focus, the associated tab is the currently active tab in the tablist, as defined in Managing Focus. tablist elements, which contain a set of associated tab elements, are typically placed near a series of tabpanel elements, usually preceding it. See the WAI-ARIA Authoring Practices for details on implementing a tab set design pattern.\n\nAuthors MUST ensure elements with role tab are contained in, or owned by, an element with the role tablist.\n\nAuthors SHOULD ensure the tabpanel associated with the currently active tab is perceivable to the user.\n\nFor a single-selectable tablist, authors SHOULD hide other tabpanel elements from the user until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure that the tab for each visible tabpanel has the aria-expanded attribute set to true, and that the tabs associated with the remaining hidden tabpanel elements have their aria-expanded attributes set to false.\n\nIn either case, authors SHOULD ensure that a selected tab has its aria-selected attribute set to true, that inactive tab elements have their aria-selected attribute set to false, and that the currently selected tab provides a visual indication that it is selected. In the absence of an aria-selected attribute on the current tab, user agents SHOULD indicate to assistive technologies through the platform accessibility API that the currently focused tab is selected.",
						"generalization": ["sectionhead", "widget"],
						"requiredContextRole": ["tablist"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "table",
						"description": "A section containing data arranged in rows and columns. See related grid.\n\nThe table role is intended for tabular containers which are not interactive. If the tabular container maintains a selection state, provides its own two-dimensional navigation, or allows the user to rearrange or otherwise manipulate its contents or the display thereof, authors SHOULD use grid or treegrid instead.\n\nAuthors SHOULD prefer the use of the host language's semantics for table whenever possible, such as the <table> element in [HTML].",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tablist",
						"description": "A list of tab elements, which are references to tabpanel elements.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nFor a single-selectable tablist, authors SHOULD hide other tabpanel elements from the user until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure each visible tabpanel has its aria-expanded attribute set to true, and that the remaining hidden tabpanel elements have their aria-expanded attributes set to false.\n\ntablist elements are typically placed near usually preceding, a series of tabpanel elements. See the WAI-ARIA Authoring Practices for details on implementing a tab set design pattern.\n\nElements with the role tablist have an implicit aria-orientation value of horizontal.",
						"generalization": ["composite"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["tab"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tabpanel",
						"description": "A container for the resources associated with a tab, where each tab is contained in a tablist.\n\nAuthors SHOULD associate a tabpanel element with its tab, either by using the aria-controls attribute on the tab to reference the tab panel, or by using the aria-labelledby attribute on the tab panel to reference the tab.\n\ntablist elements are typically placed near, usually preceding, a series of tabpanel elements. See the WAI-ARIA Authoring Practices for details on implementing a tab set design pattern.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "term",
						"description": "A word or phrase with a corresponding definition. See related definition.\n\nThe term role is used to explicitly identify a word or phrase for which a definition has been provided by the author or is expected to be provided by the user.\n\nAuthors SHOULD NOT use the term role on interactive elements such as links because doing so could prevent users of assistive technologies from interacting with those elements.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "textbox",
						"description": "A type of input that allows free-form text as its value.\n\nIf the aria-multiline attribute is true, the widget accepts line breaks within the input, as in an HTML textarea. Otherwise, this is a simple text box. The intended use is for languages that do not have a text input element, or cases in which an element with different semantics is repurposed as a text field.\n\nIn most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line <input type=\"text\"> element, the keystroke usually submits the form. When user has focus in a multi-line <textarea> element, the keystroke inserts a line break. The WAI-ARIA textbox role differentiates these types of boxes with the aria-multiline attribute, so authors are advised to be aware of this distinction when designing the field.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder"
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "time",
						"description": "An element that represents a specific point in time.\n\nAt the present time, there are no WAI-ARIA properties corresponding to the datetime attribute supported on <time> in [HTML]. The addition of this property will be considered for ARIA version 1.3.\n\nAuthors SHOULD limit text contents to a valid date- or time-related string, or apply this future datetime-equivalent property to the element which has role time.\n\nExamples of valid date- or time-related strings as text contents of an element with the time role:",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "timer",
						"description": "A type of live region containing a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an end point.\n\nThe text contents of the timer object indicate the current time measurement, and are updated as that amount changes. The timer value is not necessarily machine parsable, but authors SHOULD update the text contents at fixed intervals, except when the timer is paused or reaches an end-point.\n\nElements with the role timer have an implicit aria-live value of off.",
						"generalization": ["status"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "toolbar",
						"description": "A collection of commonly used function buttons or controls represented in compact visual form.\n\nThe toolbar is often a subset of functions found in a menubar, designed to reduce user effort in using these functions. Authors MUST supply a label on each toolbar when the application contains more than one toolbar.\n\nAuthors MAY manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role toolbar have an implicit aria-orientation value of horizontal.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tooltip",
						"description": "A contextual popup that displays a description for an element.\n\nThe tooltip typically becomes visible, after a short delay, in response to a mouse hover, or after the owning element receives keyboard focus. The use of a WAI-ARIA tooltip is a supplement to the normal tooltip behavior of the user agent.\n\nTypical tooltip delays last from one to five seconds.\n\nAuthors SHOULD ensure that elements with the role tooltip are referenced through the use of aria-describedby before or at the time the tooltip is displayed.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tree",
						"description": "A widget that allows the user to select one or more items from a hierarchically organized collection.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role tree have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > treeitem", "treeitem"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treegrid",
						"description": "A grid whose rows can be expanded and collapsed in the same manner as for a tree.\n\nIf aria-readonly is set on an element with role treegrid, user agents MUST propagate the value to all gridcell elements owned by the treegrid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nWhen the aria-readonly attribute is applied to a focusable gridcell, it indicates whether the content contained in the gridcell is editable. The aria-readonly attribute does not represent availability of functions for navigating or manipulating the treegrid itself.\n\nIn a treegrid that provides content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, if a treegrid presents a collection of elements that do not support aria-readonly, such as a collection of link elements, it is not necessary for the author to specify a value for aria-readonly.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.",
						"generalization": ["grid", "tree"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treeitem",
						"description": "An option item of a tree. This is an element within a tree that may be expanded or collapsed if it contains a sub-level group of tree item elements.\n\nA collection of treeitem elements to be expanded and collapsed are enclosed in an element with the group role.\n\nAuthors MUST ensure elements with role treeitem are contained in, or owned by, an element with the role group or tree.",
						"generalization": ["listitem", "option"],
						"requiredContextRole": ["group", "tree"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "widget",
						"description": "An interactive component of a graphical user interface (GUI).\n\nWidgets are discrete user interface objects with which the user can interact. Widget roles map to standard features in accessibility APIs. When the user navigates an element assigned any of the non-abstract subclass roles of widget, assistive technologies that typically intercept standard keyboard events SHOULD switch to an application browsing mode, and pass keyboard events through to the web application. The intent is to hint to certain assistive technologies to switch from normal browsing mode into a mode more appropriate for interacting with a web application; some user agents have a browse navigation mode where keys, such as up and down arrows, are used to browse the document, and this native behavior prevents the use of these keys by a web application.\n\nwidget is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "window",
						"description": "A browser or application window.\n\nElements with this role have a window-like behavior in a graphical user interface (GUI) context, regardless of whether they are implemented as a native window in the operating system, or merely as a section of the document styled to look like a window.\n\nIn the description of this role, the term \"application\" does not refer to the application role, which specifies specific assistive technology behaviors.\n\nwindow is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				],
				"props": [
					{
						"name": "aria-activedescendant",
						"type": "property",
						"value": "ID reference",
						"enum": []
					},
					{
						"name": "aria-atomic",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Assistive technologies will present only the changed node or nodes.",
							"true": "Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists."
						}
					},
					{
						"name": "aria-autocomplete",
						"type": "property",
						"value": "token",
						"enum": ["inline", "list", "both", "none"],
						"defaultValue": "none",
						"valueDescriptions": {
							"inline": "When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.",
							"list": "When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.",
							"both": "When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.",
							"none": "When a user is providing input, an automatic suggestion that attempts to predict how the user intends to complete the input is not displayed."
						}
					},
					{
						"name": "aria-busy",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "There are no expected updates for the element.",
							"true": "The element is being updated."
						}
					},
					{
						"name": "aria-checked",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "undefined",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "checked",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element supports being checked but is not currently checked.",
							"mixed": "Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.",
							"true": "The element is checked.",
							"undefined": "The element does not support being checked."
						},
						"conditionalValue": [
							{
								"role": ["checkbox", "menuitemcheckbox"],
								"value": "tristate"
							}
						]
					},
					{
						"name": "aria-colcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "colspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-controls",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-current",
						"type": "state",
						"value": "token",
						"enum": ["page", "step", "location", "date", "time", "true", "false"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"page": "Represents the current page within a set of pages.",
							"step": "Represents the current step within a process.",
							"location": "Represents the current location within an environment or context.",
							"date": "Represents the current date within a collection of dates.",
							"time": "Represents the current time within a set of times.",
							"true": "Represents the current item within a set.",
							"false": "Does not represent the current item within a set."
						}
					},
					{
						"name": "aria-describedby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-details",
						"type": "property",
						"value": "ID reference",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-disabled",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "disabled",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element is enabled.",
							"true": "The element and all focusable descendants are disabled and its value cannot be changed by the user."
						}
					},
					{
						"name": "aria-dropeffect",
						"type": "property",
						"deprecated": true,
						"value": "token list",
						"enum": ["copy", "execute", "link", "move", "none", "popup"],
						"defaultValue": "none",
						"isGlobal": true,
						"valueDescriptions": {
							"copy": "A duplicate of the source object will be dropped into the target.",
							"execute": "A function supported by the drop target is executed, using the drag source as an input.",
							"link": "A reference or shortcut to the dragged object will be created in the target object.",
							"move": "The source object will be removed from its current location and dropped into the target.",
							"none": "No operation can be performed; effectively cancels the drag operation if an attempt is made to drop on this object. Ignored if combined with any other token value. e.g., 'none copy' is equivalent to a 'copy' value.",
							"popup": "There is a popup menu or dialog that allows the user to choose one of the drag operations (copy, move, link, execute) and any other drag functionality, such as cancel."
						}
					},
					{
						"name": "aria-errormessage",
						"type": "property",
						"value": "ID reference",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-expanded",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The grouping element this element owns or controls is collapsed.",
							"true": "The grouping element this element owns or controls is expanded.",
							"undefined": "The element does not own or control a grouping element that is expandable."
						}
					},
					{
						"name": "aria-flowto",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-grabbed",
						"type": "state",
						"deprecated": true,
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates that the element supports being dragged.",
							"true": "Indicates that the element has been \"grabbed\" for dragging.",
							"undefined": "Indicates that the element does not support being dragged."
						}
					},
					{
						"name": "aria-haspopup",
						"type": "property",
						"value": "token",
						"enum": ["false", "true", "menu", "listbox", "tree", "grid", "dialog"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates the element does not have a popup.",
							"true": "Indicates the popup is a menu.",
							"menu": "Indicates the popup is a menu.",
							"listbox": "Indicates the popup is a listbox.",
							"tree": "Indicates the popup is a tree.",
							"grid": "Indicates the popup is a grid.",
							"dialog": "Indicates the popup is a dialog."
						}
					},
					{
						"name": "aria-hidden",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "hidden",
								"value": "true",
								"isNotStrictEquivalent": true
							}
						],
						"valueDescriptions": {
							"false": "The element is exposed to the accessibility API as if it was rendered.",
							"true": "The element is hidden from the accessibility API.",
							"undefined": "The element's hidden state is determined by the user agent based on whether it is rendered."
						}
					},
					{
						"name": "aria-invalid",
						"type": "state",
						"value": "token",
						"enum": ["grammar", "false", "spelling", "true"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"grammar": "A grammatical error was detected.",
							"false": "There are no detected errors in the value.",
							"spelling": "A spelling error was detected.",
							"true": "The value entered by the user has failed validation."
						}
					},
					{
						"name": "aria-keyshortcuts",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-label",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-labelledby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-level",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-live",
						"type": "property",
						"value": "token",
						"enum": ["assertive", "off", "polite"],
						"defaultValue": "off",
						"isGlobal": true,
						"valueDescriptions": {
							"assertive": "Indicates that updates to the region have the highest priority and should be presented the user immediately.",
							"off": "Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.",
							"polite": "Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing."
						}
					},
					{
						"name": "aria-modal",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Element is not modal.",
							"true": "Element is modal."
						}
					},
					{
						"name": "aria-multiline",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "This is a single-line text box.",
							"true": "This is a multi-line text box."
						}
					},
					{
						"name": "aria-multiselectable",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Only one item can be selected.",
							"true": "More than one item in the widget may be selected at a time."
						}
					},
					{
						"name": "aria-orientation",
						"type": "property",
						"value": "token",
						"enum": ["horizontal", "undefined", "vertical"],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"horizontal": "The element is oriented horizontally.",
							"undefined": "The element's orientation is unknown/ambiguous.",
							"vertical": "The element is oriented vertically."
						}
					},
					{
						"name": "aria-owns",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-placeholder",
						"type": "property",
						"value": "string",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "placeholder",
								"value": null
							}
						]
					},
					{
						"name": "aria-posinset",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-pressed",
						"type": "state",
						"value": "tristate",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The element supports being pressed but is not currently pressed.",
							"mixed": "Indicates a mixed mode value for a tri-state toggle button.",
							"true": "The element is pressed.",
							"undefined": "The element does not support being pressed."
						}
					},
					{
						"name": "aria-readonly",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "readonly",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The user can set the value of the element.",
							"true": "The user cannot change the value of the element."
						}
					},
					{
						"name": "aria-relevant",
						"type": "property",
						"value": "token list",
						"enum": ["additions", "additions text", "all", "removals", "text"],
						"defaultValue": "additions text",
						"isGlobal": true,
						"valueDescriptions": {
							"additions": "Element nodes are added to the accessibility tree within the live region.",
							"additions text": "Equivalent to the combination of values, \"additions text\".",
							"all": "Equivalent to the combination of all values, \"additions removals text\".",
							"removals": "Text content, a text alternative, or an element node within the live region is removed from the accessibility tree.",
							"text": "Text content or a text alternative is added to any descendant in the accessibility tree of the live region."
						}
					},
					{
						"name": "aria-required",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "required",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "User input is not necessary to submit the form.",
							"true": "Users need to provide input on an element before a form is submitted."
						}
					},
					{
						"name": "aria-roledescription",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-rowcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "rowspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-selected",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The selectable element is not selected.",
							"true": "The selectable element is selected.",
							"undefined": "The element is not selectable."
						}
					},
					{
						"name": "aria-setsize",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-sort",
						"type": "property",
						"value": "token",
						"enum": ["ascending", "descending", "none", "other"],
						"defaultValue": "none",
						"valueDescriptions": {
							"ascending": "Items are sorted in ascending order by this column.",
							"descending": "Items are sorted in descending order by this column.",
							"none": "There is no defined sort applied to the column.",
							"other": "A sort algorithm other than ascending or descending has been applied."
						}
					},
					{
						"name": "aria-valuemax",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "max",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuemin",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "min",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuenow",
						"type": "property",
						"value": "number",
						"enum": []
					},
					{
						"name": "aria-valuetext",
						"type": "property",
						"value": "string",
						"enum": []
					}
				],
				"graphicsRoles": [
					{
						"name": "graphics-document",
						"description": "A type of document in which the visual appearance or layout of content conveys meaning.\n\nSimilar to other document types, the graphics-document role applies to the root element of a region of the page containing related information, where the user's primary interaction mode is expected to be browsing the document rather than controlling an application. The element with this role may be the root element of the document file, or of a nested structure within it.\n\nThe graphics-document may be distinguished from similar roles as follows:\n\nRelative to other documents, a graphics-document is distinguished by the semantic importance of its visual (usually two-dimensional) representation. User agents and assistive technologies SHOULD take this into consideration when supporting navigation of the graphic. Accessibility technologies that re-format or re-style a document SHOULD NOT alter the layout of a graphics-document except in ways that are consistent with the semantic roles and relationships of its content.\n\nRelative to an img, a graphics-document is distinguished by the structured nature of its content. Its child elements may have semantic meaning, and may include links or other interactive widgets.\n\nRelative to a graphics-object, a graphics-document is self-contained. Its meaning persists when separated from surrounding content. The element with the graphics-document role defines the scope and context for interpretation of the child content.\n\nIn general, authors SHOULD use the graphics-document role for structured graphics such as charts, maps, diagrams, technical drawing, blue prints and instructional graphics. However, if a single large graphic has discrete regions that may be safely re-arranged without sacrificing meaning, each of those regions SHOULD be a distinct graphics-document. An alternative role (such as figure) may be used to group them together. One graphics-document may also be nested inside another, for example a bar chart that is embedded in a map or a matrix of chart panels should have a role of graphics-document. The nested document provides encapsulation; navigation between components of the inner and outer graphics should be explicit.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the document role as a fallback value, in the form role=\"graphics-document document\".\n\nFuture specifications may define more specific roles for particular types of graphical documents with special semantic structures. Those more specific roles would be subclasses of graphics-document.\n\nAn SVG diagram of an electrical circuit is a simple graphical document:",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-object",
						"description": "A section of a graphics-document that represents a distinct object or sub-component with semantic meaning. A graphical object may itself have nested sub-components.\n\nContainer elements that represent a collection of disconnected objects should be given the group or list roles, instead. Grouping elements that do not have semantic meaning and do not alter the semantic context provided by an ancestor (for example, a div or SVG g that is only used for styling or layout) SHOULD NOT be given a role. The lack of role may be explicitly indicated with the role none or presentation.\n\nUnlike a graphics-document, a graphics-object need not be self-contained, and it does not establish a new context for navigation. However, user agents and assistive technologies SHOULD provide a way for users, particularly non-visual users, to navigate the nested structure of objects in a hierarchical manner, similar to nested lists.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the group role as a fallback value, in the form role=\"graphics-object group\".\n\nThe code that follows is a portion of the markup for a structured graphic. It includes SVG g grouping elements with various roles:\n\nWhere a graphical object has multiple sub-components, the group role is provided as an explicit fallback.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-symbol",
						"description": "A graphical object used to convey a simple meaning or category, where the meaning is more important than the particular visual appearance. It may be a component of a larger structured graphic such as a chart or map. The symbol itself is an atomic object; children are presentational.\n\nWhen used as part of a structured symbolic language, the aria-roledescription property (introduced in ARIA 1.1 [WAI-ARIA-1.1]) can be used to name the symbol type separately from the name and description for the particular instance of the symbol.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the img role as a fallback value, in the form role=\"graphics-symbol img\", if that is not already the default semantic role for the element.\n\nWithin an HTML document for a restaurant menu, an img element can represent a repeated symbol:\n\nWithin an SVG diagram of an electrical circuit, the graphics that represent batteries, switches, and loads like this lightbulb are each symbols:\n\nNote that the visible text must be included in the label for its parent symbol, in this example. As the child of a graphics-symbol, it is treated as presentational content, and is therefore not accessible as a separate element of the graphic.\n\nWithin an architectural blueprint-style SVG diagram, each SVG use element that creates a copy of a simple SVG symbol is a graphics-symbol:",
						"generalization": ["img"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-braillelabel",
								"inherited": true
							},
							{
								"name": "aria-brailleroledescription",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-description",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"deprecated": true,
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				]
			},
			"1.1": {
				"roles": [
					{
						"name": "alert",
						"description": "A type of live region with important, and usually time-sensitive, information. See related alertdialog and status.\n\nAlerts are used to convey messages to alert the user. In the case of audio warnings this is an accessible alternative for a hearing-impaired user. The alert role goes on the node containing the alert message. Alerts are specialized forms of the status role, which will be processed as an atomic live region.\n\nAlerts are assertive live regions and will be processed as such by assistive technologies. Neither authors nor user agents are required to set or manage focus to them in order for them to be processed. Since alerts are not required to receive focus, content authors SHOULD NOT require users to close an alert. If the operating system allows, the user agent SHOULD fire a system alert event through the accessibility API when the WAI-ARIA alert is created. If an alert requires focus to close the alert, then content authors SHOULD use alertdialog instead.\n\nElements with the role alert have an implicit aria-live value of assertive, and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "alertdialog",
						"description": "A type of dialog that contains an alert message, where initial focus goes to an element within the dialog. See related alert and dialog.\n\nAlert dialogs are used to convey messages to alert the user. The alertdialog role goes on the node containing both the alert message and the rest of the dialog. Content authors SHOULD make alert dialogs modal by ensuring that, while the alertdialog is shown, keyboard and mouse interactions only operate within the dialog. See aria-modal.\n\nUnlike alert, alertdialog can receive a response from the user. For example, to confirm that the user understands the alert being generated. When the alert dialog is displayed, authors SHOULD set focus to an active element within the alert dialog, such as a form edit field or an OK button. The user agent SHOULD fire a system alert event through the accessibility API when the alert is created, provided one is specified by the intended accessibility API.\n\nAuthors SHOULD use aria-describedby on an alertdialog to reference the alert message element in the dialog. If they do not, an assistive technology can resort to its internal recovery mechanism to determine the contents of the alert message.",
						"generalization": ["alert", "dialog"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "application",
						"description": "A structure containing one or more focusable elements requiring user input, such as keyboard or gesture events, that do not follow a standard interaction pattern supported by a widget role.\n\nSome user agents and assistive technologies have a browse mode where standard input events, such as up and down arrow key events, are intercepted and used to control a reading cursor. This browse mode behavior prevents elements that do not have a widget role from receiving and using such keyboard and gesture events to provide interactive functionality.\n\nWhen there is a need to create an element with an interaction model that is not supported by any of the WAI-ARIA widget roles, authors MAY give that element role application. And, when a user navigates into an element with role application, assistive technologies that intercept standard input events SHOULD switch to a mode that passes most or all standard input events through to the web application.\n\nFor example, a presentation slide editor uses arrow keys to change the positions of textbox and image elements on the slide. There are not any WAI-ARIA widget roles that correspond to such an interaction model so an author could give the slide container role application, an aria-roledescription of \"Slide Editor\", and use aria-describedby to provide instructions.\n\nBecause only the focusable elements contained in an application element are accessible to users of some assistive technologies, authors MUST use one of the following techniques to ensure all non-decorative static text or image content inside an application is accessible:",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "article",
						"description": "A section of a page that consists of a composition that forms an independent part of a document, page, or site.\n\nAn article is not a navigational landmark, but may be nested to form a discussion where assistive technologies could pay attention to article nesting to assist the user in following the discussion. An article could be a forum post, a magazine or newspaper article, a web log entry, a user-submitted comment, or any other independent item of content. It is independent in that its contents could stand alone, for example in syndication. However, the element is still associated with its ancestors; for instance, contact information that applies to a parent body element still covers the article as well. When nesting articles, the child articles represent content that is related to the content of the parent article. For instance, a web log entry on a site that accepts user-submitted comments could represent the comments as articles nested within the article for the web log entry. Author, heading, date, or other information associated with an article does not apply to nested articles.\n\nWhen the user navigates to an element assigned the role of article, assistive technologies that typically intercept standard keyboard events SHOULD switch to document browsing mode, as opposed to passing keyboard events through to the web application. Assistive technologies MAY provide a feature allowing the user to navigate the hierarchy of any nested article elements.\n\nWhen an article is in the context of a feed, the author MAY specify values for aria-posinset and aria-setsize.",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "banner",
						"description": "A region that contains mostly site-oriented content, rather than page-specific content.\n\nSite-oriented content typically includes things such as the logo or identity of the site sponsor, and a site-specific search tool. A banner usually appears at the top of the page and typically spans the full width.\n\nUser agents SHOULD treat elements with the role of banner as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the banner role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple banner elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "button",
						"description": "An input that allows for user-triggered actions when clicked or pressed. See related link.\n\nButtons are mostly used for discrete actions. Standardizing the appearance of buttons enhances the user's recognition of the widgets as buttons and allows for a more compact display in toolbars.\n\nButtons support the optional attribute aria-pressed. Buttons with a non-empty aria-pressed attribute are toggle buttons. When aria-pressed is true the button is in a \"pressed\" state, when aria-pressed is false it is not pressed. If the attribute is not present, the button is a simple command button.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-pressed"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "cell",
						"description": "A cell in a tabular container. See related gridcell.\n\nAuthors MUST ensure elements with role cell are contained in, or owned by, an element with the role row.",
						"generalization": ["section"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-colspan"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-rowspan"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "checkbox",
						"description": "A checkable input that has three possible values: true, false, or mixed.\n\nThe aria-checked attribute of a checkbox indicates whether the input is checked (true), unchecked (false), or represents a group of elements that have a mixture of checked and unchecked values (mixed). Many checkboxes do not use the mixed value, and thus are effectively boolean checkboxes.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "columnheader",
						"description": "A cell containing header information for a column.\n\ncolumnheader can be used as a column header in a table or grid. It could also be used in a pie chart to show a similar relationship in the data.\n\nThe columnheader establishes a relationship between it and all cells in the corresponding column. It is the structural equivalent to an HTML th element with a column scope.\n\nAuthors MUST ensure elements with role columnheader are contained in, or owned by, an element with the role row.\n\nApplying the aria-selected state on a columnheader MUST not cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding column. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the columnheader role can be used in both interactive grids and non-interactive tables, the use of aria-readonly and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-required or aria-readonly in a columnheader that descends from a table, and user agents SHOULD NOT expose either property to assistive technologies unless the columnheader descends from a grid.\n\nBecause cells are organized into rows, there is not a single container element for the column. The column is the set of gridcell elements in a particular position within their respective row containers.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "combobox",
						"description": "A composite widget containing a single-line textbox and another element, such as a listbox or grid, that can dynamically pop up to help the user set the value of the textbox.\n\nAuthors MUST ensure an element with role combobox contains or owns a text input element with role textbox or searchbox and that the text input has aria-multiline set to false. If the combobox provides autocompletion behavior for the text input as described in aria-autocomplete, authors MUST set aria-autocomplete on the textbox element to the value that corresponds to the provided behavior.\n\nTypically, the default state of a combobox is collapsed. In the collapsed state, only the textbox element of a combobox is visible. A combobox is said to be expanded when both the textbox and a secondary element that serves as its popup are visible. Authors MUST set aria-expanded to true on an element with role combobox when it is expanded and false when it is collapsed. Elements with the role combobox have an implicit aria-expanded value of false.\n\nWhen a combobox is expanded, authors MUST ensure it contains or owns an element that has a role of listbox, tree, grid, or dialog. This element is the combobox popup. When the combobox is expanded, authors MUST set aria-controls on the textbox element to a value that refers to the combobox popup element.\n\nElements with the role combobox have an implicit aria-haspopup value of listbox. If the combobox popup element has a role other than listbox, authors MUST specify a value for aria-haspopup that corresponds to the type of its popup.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus. When a combobox receives focus, authors SHOULD ensure focus is placed on the textbox element.\n\nAuthors SHOULD provide keyboard mechanisms for moving focus between the textbox element and the elements contained in the popup. For example, one common convention is that Down Arrow moves focus from the text input to the first focusable descendant of the popup element. If the popup element supports aria-activedescendant, in lieu of moving focus, such keyboard mechanisms can control the value of aria-activedescendant on the textbox element. When a descendant of the popup element is active, authors MAY set aria-activedescendant on the textbox to a value that refers to the active element within the popup while focus remains on the textbox element.\n\nThe ARIA 1.0 specification describes a combobox pattern where a text input element has the combobox role and owns a listbox element. User agents, assistive technologies, and conformance checkers SHOULD continue to support the ARIA 1.0 pattern so that existing implementations of the ARIA 1.0 pattern remain functional.\n\nThe features and behaviors of combobox implementations vary widely. Consequently, there are many important authoring considerations. See the WAI-ARIA Authoring Practices Guide [wai-aria-practices-1.1] for additional details on implementing combobox design patterns.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["listbox", "tree", "grid", "dialog"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"required": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"required": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "command",
						"description": "A form of widget that performs an action but does not receive input data.\n\ncommand is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "complementary",
						"description": "A supporting section of the document, designed to be complementary to the main content at a similar level in the DOM hierarchy, but remains meaningful when separated from the main content.\n\nThere are various types of content that would appropriately have this role. For example, in the case of a portal, this may include but not be limited to show times, current weather, related articles, or stocks to watch. The complementary role indicates that contained content is relevant to the main content. If the complementary content is completely separable from the main content, it may be appropriate to use a more general role.\n\nUser agents SHOULD treat elements with the role of complementary as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "composite",
						"description": "A widget that may contain navigable descendants or owned children.\n\nAuthors SHOULD ensure that a composite widget exists as a single navigation stop within the larger navigation system of the web page. Once the composite widget has focus, authors SHOULD provide a separate navigation mechanism for users to navigate to elements that are descendants or owned children of the composite element.\n\ncomposite is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "contentinfo",
						"description": "A large perceivable region that contains information about the parent document.\n\nExamples of information included in this region of the page are copyrights and links to privacy statements.\n\nUser agents SHOULD treat elements with the role of contentinfo as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the contentinfo role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple contentinfo elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "definition",
						"description": "A definition of a term or concept. See related term.\n\nAuthors SHOULD identify the element being defined by giving that element a role of term and referencing it with the aria-labelledby attribute.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "dialog",
						"description": "A dialog is a descendant window of the primary window of a web application. For HTML pages, the primary application window is the entire web document, i.e., the body element.\n\nDialogs are most often used to prompt the user to enter or respond to information. A dialog that is designed to interrupt workflow is usually modal. See related alertdialog.\n\nAuthors SHOULD provide a dialog label, which can be done with the aria-label or aria-labelledby attribute.\n\nAuthors SHOULD ensure that all dialogs (both modal and non-modal) have at least one focusable descendant element. Authors SHOULD focus an element in the modal dialog when it is displayed, and authors SHOULD manage focus of modal dialogs.\n\nIn the description of this role, the term \"web application\" does not refer to the application role, which specifies specific assistive technology behaviors.",
						"generalization": ["window"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "directory",
						"description": "A list of references to members of a group, such as a static table of contents.\n\nAuthors SHOULD use this role for a static table of contents, whether linked or unlinked. This includes tables of contents built with lists, including nested lists. Dynamic tables of contents, however, might use a tree role instead.",
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "document",
						"description": "An element containing content that assistive technology users may want to browse in a reading mode.\n\nWhen user agent focus moves to an element assigned the role of document, assistive technologies having a reading mode for browsing static content MAY switch to that reading mode and intercept standard input events, such as Up or Down arrow keyboard events, to control the reading cursor.\n\nBecause assistive technologies that have a reading mode default to that mode for all elements except for those with either a widget or application role, the only circumstance where the document role is useful for changing assistive technology behavior is when the element with role document is a focusable child element of a widget or application. For example, given an application element which contains some static rich text, the author can apply role document to the element containing the text and give it a tabindex of 0. When a screen reader user presses the Tab key and places focus on the document element, the user will be able to read the text with the screen reader's reading cursor.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "feed",
						"description": "A scrollable list of articles where scrolling may cause articles to be added to or removed from either end of the list.\n\nA feed enables users of assistive technologies that have a document browse mode, such as screen readers, to use the browse mode reading cursor to both read and scroll through a stream of rich content that may continue scrolling infinitely by loading more content as the user reads. In a feed, assistive technologies provide a web application with signals of the user's reading cursor movement by moving user agent focus, enabling the application to both add new content and visually position content as the user browses the page. The feed also lets authors inform assistive technologies when additions and removals are occurring so assistive technologies can more reliably update their reading view without disrupting reading or degrading performance.\n\nFor example, a feed could be used to present a stream of news stories where each article contains a story with text, links, images, and comments as well as widgets for sharing and commenting. As a screen reader user reads and interacts with each story and moves the screen reader reading cursor from story to story, each story scrolls into view and, as needed, new stories are loaded.\n\nA feed is a container element whose children have role article. When articles are added or removed from either or both ends of a feed, authors SHOULD set aria-busy to true on the feed element before the changes are made and set it to false after the changes are complete. Authors SHOULD avoid inserting or removing articles in the middle of a feed. These requirements help assistive technologies gracefully respond to changes in the feed content that occur simultaneously with user commands to move the reading cursor within the feed.\n\nAuthors SHOULD make each article in a feed focusable and ensure that the application scrolls an article into view when user agent focus is set on the article or one of its descendant elements. For example, in HTML, each article element should have a tabindex value of either -1 or 0.\n\nWhen an assistive technology reading cursor moves from one article to another, assistive technologies SHOULD set user agent focus on the article that contains the reading cursor. If the reading cursor lands on a focusable element inside the article, the assistive technology MAY set focus on that element in lieu of setting focus on the containing article.\n\nBecause the ability to scroll to another article with an assistive technology reading cursor depends on the presence of another article in the page, authors SHOULD attempt to load additional articles before user agent focus reaches an article at either end of the set of articles that has been loaded. Alternatively, authors MAY include an article at either or both ends of the loaded set of articles that includes an element, such as a button, that lets the user request more articles to be loaded.\n\nIn addition to providing a brief label, authors MAY apply aria-describedby to article elements in a feed to suggest to screen readers which elements to speak after the label when users navigate by article. Screen readers MAY provide users with a way to quickly scan feed content by speaking both the label and accessible description when navigating by article, enabling the user to ignore repetitive or less important elements, such as embedded interaction widgets, that the author has left out of the description.\n\nAuthors SHOULD provide keyboard commands for moving focus among articles in a feed so users who do not utilize an assistive technology that provides article navigation features can use the keyboard to navigate the feed.\n\nIf the number of articles available in a feed supply is static, authors MAY specify aria-setsize on article elements in that feed. However, if the total number is extremely large, indefinite, or changes often, authors MAY set aria-setsize to -1 to communicate the unknown size of the set.\n\nSee the WAI-ARIA Authoring Practices [wai-aria-practices-1.1] for additional details on implementing a feed design pattern.",
						"generalization": ["list"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["article"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "figure",
						"description": "A perceivable section of content that typically contains a graphical document, images, code snippets, or example text. The parts of a figure MAY be user-navigable.\n\nAuthors SHOULD provide a reference to the figure from the main text, but the figure need not be displayed at the same location as the referencing element. Authors MAY reference text serving as a caption using aria-describedby. Authors MAY provide a label using aria-label or MAY reference text serving as a label using aria-labelledby.\n\nAssistive technologies SHOULD enable users to quickly navigate to figures. Mainstream user agents MAY enable users to quickly navigate to figures.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "form",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a form. See related search.\n\nA form may be a mix of host language form controls, scripted controls, and hyperlinks. Authors are reminded to use native host language semantics to create form controls, whenever possible. For search facilities, authors SHOULD use the search role and not the generic form role. Authors SHOULD provide a visible label for the form referenced with aria-labelledby. If an author uses a script to submit a form based on a user action that would otherwise not trigger an onsubmit event (for example, a form submission triggered by the user changing a form element's value), the author SHOULD provide the user with advance notification of the behavior.\n\nUser agents SHOULD treat elements with the role of form as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "grid",
						"description": "A composite widget containing a collection of one or more rows with one or more cells where some or all cells in the grid are focusable by using methods of two-dimensional navigation, such as directional arrow keys.\n\nThe grid role does not imply a specific visual, e.g., tabular, presentation. It describes relationships among elements. It may be used for purposes as simple as grouping a collection of checkboxes or navigation links or as complex as creating a full-featured spreadsheet application.\n\nThe cell elements of a grid have role gridcell. Authors MAY designate a cell as a row or column header by using either the rowheader or columnheader role in lieu of the gridcell role. Authors MUST ensure elements with role gridcell, columnheader, or rowheader are owned by elements with role row, which are in turn owned by an element with role rowgroup, or grid.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants of a grid as described in Managing Focus. When a user is navigating the grid content with a keyboard, authors SHOULD set focus as follows:\n\nAuthors SHOULD provide a mechanism for changing to an interaction or edit mode that allows users to navigate and interact with content contained inside a focusable cell if that focusable cell contains any of the following:\n\nFor example, if a cell in a spreadsheet contains a combobox or editable text, the Enter key might be used to activate a cell interaction or editing mode when that cell has focus so the directional arrow keys can be used to operate the contained combobox or textbox. Depending on the implementation, pressing Enter again, Tab, Escape, or another key may switch the application back to the grid navigation mode.\n\nAuthors MAY use a gridcell to display the result of a formula, which could be editable by the user. In a spreadsheet application, for example, a gridcell may show a value calculated from a formula until the user activates the gridcell for editing when a textbox appears in the gridcell containing the formula in an editable state.\n\nIf aria-readonly is set on an element with role grid, user agents MUST propagate the value to all gridcell elements owned by the grid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nIn a grid that provides cell content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, the value of aria-readonly, whether specified for a grid or individual cells, only indicates whether the content contained in cells is editable. It does not represent availability of functions for navigating or manipulating the grid itself.\n\nAn unspecified value for aria-readonly does not imply that a grid or a gridcell contains editable content. For example, if a grid presents a collection of elements that are not editable, such as a collection of link elements representing dates in a datepicker, it is not necessary for the author to specify a value for aria-readonly.\n\nAuthors MAY indicate that a focusable gridcell is selectable as the object of an action with the aria-selected attribute. If the grid allows multiple gridcells to be selected, the author SHOULD set aria-multiselectable to true on the element with role grid.\n\nSince WAI-ARIA can augment an element of the host language, a grid can reuse the elements and attributes of a native table, such as an HTML table element. For example, if an author applies the grid role to an HTML table element, the author does not need to apply the row and gridcell roles to the descendant HTML tr and td elements because the user agent will automatically make the appropriate translations. When the author is reusing a native host language table element and needs a gridcell element to span multiple rows or columns, the author SHOULD apply the appropriate host language attributes instead of WAI-ARIA aria-rowspan or aria-colspan properties.\n\nSee the WAI-ARIA Authoring Practices Guide [wai-aria-practices-1.1] for additional details on implementing grid design patterns.",
						"generalization": ["composite", "table"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "gridcell",
						"description": "A cell in a grid or treegrid.\n\nA gridcell may be focusable, editable, and selectable. A gridcell may have relationships such as aria-controls to address the application of functional relationships.\n\nIf an author intends a gridcell to have a row header, column header, or both, and if the relevant headers cannot be determined from the DOM structure, authors SHOULD explicitly indicate which header cells are relevant to the gridcell by applying aria-describedby on the gridcell and referencing elements with role rowheader or columnheader.\n\nIn a treegrid, authors MAY define a gridcell as expandable by using the aria-expanded attribute. If the aria-expanded attribute is provided, it applies only to the individual cell. It is not a proxy for the container row, which also can be expanded. The main use case for providing this attribute on a gridcell is pivot table behavior.\n\nAuthors MUST ensure elements with role gridcell are contained in, or owned by, an element with the role row.",
						"generalization": ["cell", "widget"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "group",
						"description": "A set of user interface objects which are not intended to be included in a page summary or table of contents by assistive technologies.\n\nContrast with region which is a grouping of user interface objects that will be included in a page summary or table of contents.\n\nAuthors SHOULD use a group to form logical collection of items in a widget such as children in a tree widget forming a collection of siblings in a hierarchy, or a collection of items having the same container in a directory. However, when a group is used in the context of list, authors MUST limit its children to listitem elements. Therefore, proper handling of group by authors and assistive technologies is determined by the context in which it is provided.\n\nAuthors MAY nest group elements. If a section is significant enough to warrant inclusion in the web page's table of contents, the author SHOULD assign the section a role of region or a standard landmark role.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "heading",
						"description": "A heading for a section of the page.\n\nOften, heading elements will be referenced with the aria-labelledby attribute of the section for which they serve as a heading. If headings are organized into a logical outline, the aria-level attribute is used to indicate the nesting level.",
						"generalization": ["sectionhead"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"required": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "img",
						"description": "A container for a collection of elements that form an image.\n\nAn img can contain captions and descriptive text, as well as multiple image files that when viewed together give the impression of a single image. An img represents a single graphic within a document, whether or not it is formed by a collection of drawing objects. In order for elements with a role of img be perceivable, authors MUST provide alternative text or a label determined by the accessible name calculation.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "input",
						"description": "A generic type of widget that allows user input.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "landmark",
						"description": "A perceivable section containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nAuthors designate the purpose of the content by assigning a role that is a subclass of the landmark role and, when needed, by providing a brief, descriptive label.\n\nElements with a role that is a subclass of the landmark role are known as landmark regions or navigational landmark regions. Assistive technologies SHOULD enable users to quickly navigate to landmark regions. Mainstream user agents MAY enable users to quickly navigate to landmark regions.\n\nlandmark is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "link",
						"description": "An interactive reference to an internal or external resource that, when activated, causes the user agent to navigate to that resource. See related button.\n\nIf this is a native link in the host language (such as an HTML anchor with an href value), activating the link causes the user agent to navigate to that resource. If this is a simulated link, the web application author is responsible for managing navigation.\n\nIf pressing the link triggers an action but does not change browser focus or page location, authors are advised to consider using the button role instead of the link role.",
						"generalization": ["command"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "list",
						"description": "A section containing listitem elements. See related listbox.\n\nLists contain children whose role is listitem, or elements whose role is group which in turn contains children whose role is listitem.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > listitem", "listitem"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listbox",
						"description": "A widget that allows the user to select one or more items from a list of choices. See related combobox and list.\n\nItems within the list are static and, unlike standard HTML select elements, may contain images. List boxes contain children whose role is option.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role listbox have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["option"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "listitem",
						"description": "A single item in a list or directory.\n\nAuthors MUST ensure elements with role listitem are contained in, or owned by, an element with the role list or group.",
						"generalization": ["section"],
						"requiredContextRole": ["group", "list"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "log",
						"description": "A type of live region where new information is added in meaningful order and old information may disappear. See related marquee.\n\nExamples include chat logs, messaging history, game log, or an error log. In contrast to other live regions, in this role there is a relationship between the arrival of new items in the log and the reading order. The log contains a meaningful sequence and new information is added only to the end of the log, not at arbitrary points.\n\nElements with the role log have an implicit aria-live value of polite.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "main",
						"description": "The main content of a document.\n\nThis marks the content that is directly related to or expands upon the central topic of the document. The main role is a non-obtrusive alternative for \"skip to main content\" links, where the navigation option to go to the main content (or other landmarks) is provided by the user agent through a dialog or by assistive technologies.\n\nUser agents SHOULD treat elements with the role of main as navigational landmarks.\n\nWithin any document or application, the author SHOULD mark no more than one element with the main role.\n\nBecause document and application elements can be nested in the DOM, they may have multiple main elements as DOM descendants, assuming each of those is associated with different document nodes, either by a DOM nesting (e.g., document within document) or by use of the aria-owns attribute.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "marquee",
						"description": "A type of live region where non-essential information changes frequently. See related log.\n\nCommon usages of marquee include stock tickers and ad banners. The primary difference between a marquee and a log is that logs usually have a meaningful order or sequence of important content changes.\n\nElements with the role marquee have an implicit aria-live value of off.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "math",
						"description": "Content that represents a mathematical expression.\n\nContent with the role math is intended to be marked up in an accessible format such as MathML [MathML3], or with another type of textual representation such as TeX or LaTeX, which can be converted to an accessible format by native browser implementations or a polyfill library.\n\nWhile it is not ideal to use an image of a mathematical expression, there exists a significant amount of legacy content where images are used to represent mathematical expressions. Authors SHOULD ensure that images of math are labeled by text that describes the mathematical expression as it might be spoken.\n\nBrowsers that support native implementations of MathML are able to provide a more robust, accessible math experience than can be accomplished with plain text approximations of math. Some rendering engines have close integration with screen readers that allow spacial touch exploration of the formula and refreshable braille display output in the Nemeth Braille format. This level of integration is not supported with images of mathematical formulas, even if the author provides a plain text approximation.\n\nAt the time of this writing, some mainstream browsers do not support MathML natively, and must be retrofit using a JavaScript polyfill library. When authoring math content, use native MathML wherever possible, and test thoroughly. Use a polyfill library or provide a fallback image with a text alternative approximation if necessary.\n\nIf a rendering engine does not support a native math format such as MathML, authors MAY use JavaScript to downgrade the content to a format the browser can display, such as this HTML image using a data URI and plain text alternative.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menu",
						"description": "A type of widget that offers a list of choices to the user.\n\nA menu is often a list of common actions or functions that the user can invoke. The menu role is appropriate when a list of menu items is presented in a manner similar to a menu on a desktop application.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menu have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitemradio",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menubar",
						"description": "A presentation of menu that usually remains visible and is usually presented horizontally.\n\nThe menubar role is used to create a menu bar similar to those found in Windows, Mac, and Gnome desktop applications. A menu bar is used to create a consistent set of frequently used commands. Authors SHOULD ensure that menubar interaction is similar to the typical menu bar interaction in a desktop graphical user interface.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role menubar have an implicit aria-orientation value of horizontal.",
						"generalization": ["menu"],
						"requiredContextRole": [],
						"requiredOwnedElements": [
							"group > menuitemradio",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio"
						],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitem",
						"description": "An option in a set of choices contained by a menu or menubar.\n\nAuthors MAY disable a menu item with the aria-disabled attribute. If the menu item has its aria-haspopup attribute set to true, it indicates that the menu item may be used to launch a sub-level menu, and authors SHOULD display a new sub-level menu when the menu item is activated.\n\nAuthors MUST ensure that menu items are owned by an element with role menu or menubar in order to identify that they are related widgets. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["command"],
						"requiredContextRole": ["group", "menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemcheckbox",
						"description": "A menuitem with a checkable state whose possible values are true, false, or mixed.\n\nThe aria-checked attribute of a menuitemcheckbox indicates whether the menu item is checked (true), unchecked (false), or represents a sub-level menu of other menu items that have a mixture of checked and unchecked values (mixed).\n\nAuthors MUST ensure that menu item checkboxes are owned by an element with role menu or menubar in order to identify that they are related widgets. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.",
						"generalization": ["checkbox", "menuitem"],
						"requiredContextRole": ["menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "menuitemradio",
						"description": "A checkable menuitem in a set of elements with the same role, only one of which can be checked at a time.\n\nAuthors SHOULD enforce that only one menuitemradio in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).\n\nAuthors MUST ensure that menu item radios are owned by an element with role group, menu, or menubar in order to identify that they are related widgets. Authors MAY separate menu items into sets by use of a separator or an element with an equivalent role from the native markup language.\n\nIf a menu or menubar contains more than one group of menuitemradio elements, or if the menu contains one group and other, unrelated menu items, authors SHOULD nest each set of related menuitemradio elements in an element using the group role, and authors SHOULD delimit the group from other menu items with an element using the separator role.",
						"generalization": ["menuitemcheckbox", "radio"],
						"requiredContextRole": ["group", "menu", "menubar"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "navigation",
						"description": "A collection of navigational elements (usually links) for navigating the document or related documents.\n\nUser agents SHOULD treat elements with the role of navigation as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "none",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym presentation.\n\nIn ARIA 1.1, the working group introduced none as a synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and we believe role=\"none\" conveys the actual meaning more unambiguously.\n\nUntil implementations include sufficient support for role=\"none\", web authors are advised to use the presentation role alone role=\"presentation\" or redundantly as a fallback to the none role role=\"none presentation\".",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "note",
						"description": "A section whose content is parenthetic or ancillary to the main content of the resource.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "option",
						"description": "A selectable item in a select list.\n\nAuthors MUST ensure elements with role option are contained in, or owned by, an element with the role listbox. Options not associated with a listbox might not be correctly mapped to an accessibility API.\n\nElements with the role option have an implicit aria-selected value of false.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"required": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "presentation",
						"description": "An element whose implicit native role semantics will not be mapped to the accessibility API. See synonym none.\n\nIn ARIA 1.1, the working group introduced none as a synonym to the presentation role, due to author confusion surrounding the intended meaning of the word \"presentation\" or \"presentational.\" Many individuals erroneously consider role=\"presentation\" to be synonymous with aria-hidden=\"true\", and we believe role=\"none\" conveys the actual meaning more unambiguously.\n\nUntil implementations include sufficient support for role=\"none\", web authors are advised to use the presentation role alone role=\"presentation\" or redundantly as a fallback to the none role role=\"none presentation\".\n\nThe intended use is when an element is used to change the look of the page but does not have all the functional, interactive, or structural relevance implied by the element type, or may be used to provide for an accessible fallback in older browsers that do not support WAI-ARIA.\n\nExample use cases:\n\nFor any element with a role of presentation and which is not focusable, the user agent MUST NOT expose the implicit native semantics of the element (the role and its states and properties) to accessibility APIs. However, the user agent MUST expose content and descendant elements that do not have an explicit or inherited role of presentation. Thus, the presentation role causes a given element to be treated as having no role or to be removed from the accessibility tree, but does not cause the content contained within the element to be removed from the accessibility tree.\n\nFor example, according to an accessibility API, the following markup elements would appear to have identical role semantics (no role) and identical content.\n\nThe presentation role is used on an element that has implicit native semantics, meaning that there is a default accessibility API role for the element. Some elements are only complete when additional descendant elements are provided. For example, in HTML, table elements (matching the grid role) require tr descendants (the row role), which in turn require th or td children (the gridcell, columnheader, rowheader roles). Similarly, lists require list item children. The descendant elements that complete the semantics of an element are described in WAI-ARIA as required owned elements.\n\nWhen an explicit or inherited role of presentation is applied to an element with the implicit semantic of a WAI-ARIA role that has required owned elements, in addition to the element with the explicit role of presentation, the user agent MUST apply an inherited role of presentation to any owned elements that do not have an explicit role defined. Also, when an explicit or inherited role of presentation is applied to a host language element which has required children as defined by the host language specification, in addition to the element with the explicit role of presentation, the user agent MUST apply an inherited role of presentation to any required children that do not have an explicit role defined.\n\nIn HTML, the img element is treated as a single entity regardless of the type of image file. Consequently, using role=\"presentation\" or role=\"none\" on an HTML img is equivalent to using aria-hidden=\"true\". In order to make the image contents accessible, authors can embed the object using an object or iframe element, or use inline SVG code, and follow the accessibility guidelines for the image content.\n\nFor any element with an explicit or inherited role of presentation and which is not focusable, user agents MUST ignore role-specific WAI-ARIA states and properties for that element. For example, in HTML, a ul or ol element with a role of presentation will have the implicit native semantics of its li elements removed because the list role to which the ul or ol corresponds has a required owned element of listitem. Likewise, although an HTML table element does not have an implicit native semantic role corresponding directly to a WAI-ARIA role, the implicit native semantics of its thead/tbody/tfoot/tr/th/td descendants will also be removed, because the HTML specification indicates that these are required structural descendants of the table element.\n\nOnly the implicit native semantics of elements that correspond to WAI-ARIA required owned elements are removed. All other content remains intact, including nested tables or lists, unless those elements also have a explicit role of presentation applied.\n\nFor example, according to an accessibility API, the following markup elements would appear to have identical role semantics (no roles) and identical content.\n\nThere are other WAI-ARIA roles with required children for which this situation is applicable (e.g., radiogroups and listboxes), but tables and lists are the most common real-world cases in which the presentation inheritance is likely to apply.\n\nFor any element with an explicit or inherited role of presentation, user agents MUST apply an inherited role of presentation to all host-language-specific labeling elements for the presentational element. For example, a table element with a role of presentation will have the implicit native semantics of its caption element removed, because the caption is merely a label for the presentational table.\n\nAuthors SHOULD NOT provide meaningful alternative text (for example, use alt=\"\" in HTML) when the presentation role is applied to an image.\n\nIn the following code sample, the containing img and is appropriately labeled by the caption paragraph. In this example the img element can be marked as presentation because the role and the text alternatives are provided by the containing element.\n\nIn the following code sample, because the anchor (HTML a element) is acting as the treeitem, the list item (HTML li element) is assigned an explicit WAI-ARIA role of presentation to override the user agent's implicit native semantics for list items.\n\nThere are a number of ways presentational role conflicts are resolved.\n\nHost languages elements, having implicit presentational roles for which no roles, may be applied, MUST never be exposed to in the accessibility tree. With this exception, user agents MUST always expose global WAI-ARIA states and properties to accessibility APIs. In this case, the user agent ignores the presentation role and exposes the element according to its implicit native semantics. However, user agents MUST ignore any non-global, role-specific WAI-ARIA states and properties, unless it is on an inherited presentational role where an explicit role is applied.\n\nFor example, aria-haspopup is a global attribute and would always be applied; aria-level is not a global attribute and would therefore only apply if the element was not in a presentational state.\n\nExplicit roles on a descendant or owned element override the inherited role of presentation, and cause the owned element to behave as any other element with an explicit role. If the action of exposing the implicit role causes the accessibility tree to be malformed, the expected results are undefined and the user agent MAY resort to an internal recovery mechanism to repair the accessibility tree.\n\nIf an element with a role of presentation is focusable, or otherwise interactive, user agents MUST ignore the normal effect of the role and expose the element with implicit native semantics, in order to ensure that the element is both understandable and operable.\n\nUser agents MUST always expose global WAI-ARIA states and properties to accessibility APIs, even if an element has an explicit or inherited role of presentation. In this case, the user agent ignores the presentation role and exposes the element according to its implicit native semantics. However, user agents MUST ignore any non-global, role-specific WAI-ARIA states and properties, unless it is on an inherited presentational role where an explicit role is applied.",
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "progressbar",
						"description": "An element that displays the progress status for tasks that take a long time.\n\nA progressbar indicates that the user's request has been received and the application is making progress toward completing the requested action. The author SHOULD supply values for aria-valuenow, aria-valuemin, and aria-valuemax, unless the value is indeterminate, in which case the author SHOULD omit the aria-valuenow attribute. Authors SHOULD update these values when the visual progress indicator is updated. If the progressbar is describing the loading progress of a particular region of a page, the author SHOULD use aria-describedby to point to the status, and set the aria-busy attribute to true on the region until it is finished loading. It is not possible for the user to alter the value of a progressbar because it is always readonly.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified. It is best to set the values for aria-valuemin, aria-valuemax, and aria-valuenow in a manner that is appropriate for this calculation.",
						"generalization": ["range", "status"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"inherited": true
							},
							{
								"name": "aria-valuemin",
								"inherited": true
							},
							{
								"name": "aria-valuenow",
								"inherited": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radio",
						"description": "A checkable input in a group of elements with the same role, only one of which can be checked at a time.\n\nAuthors SHOULD ensure that elements with role radio are explicitly grouped in order to indicate which ones affect the same value. This is achieved by enclosing the radio elements in an element with role radiogroup. If it is not possible to make the radio buttons DOM children of the radiogroup, authors SHOULD use the aria-owns attribute on the radiogroup element to indicate the relationship to its children.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "radiogroup",
						"description": "A group of radio buttons.\n\nA radiogroup is a type of select list that can only have a single entry checked at any one time. Authors SHOULD enforce that only one radio button in a group can be checked at the same time. When one item in the group is checked, the previously checked item becomes unchecked (its aria-checked attribute becomes false).",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["radio"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "range",
						"description": "An input representing a range of values that can be set by the user.\n\nrange is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax"
							},
							{
								"name": "aria-valuemin"
							},
							{
								"name": "aria-valuenow"
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "region",
						"description": "A perceivable section containing content that is relevant to a specific, author-specified purpose and sufficiently important that users will likely want to be able to navigate to the section easily and to have it listed in a summary of the page. Such a page summary could be generated dynamically by a user agent or assistive technology.\n\nAuthors SHOULD limit use of the region role to sections containing content with a purpose that is not accurately described by one of the other landmark roles, such as main, complementary, or navigation.\n\nAuthors MUST give each element with role region a brief label that describes the purpose of the content in the region. Authors SHOULD reference a visible label with aria-labelledby if a visible label is present. Authors SHOULD include the label inside of a heading whenever possible. The heading MAY be an instance of the standard host language heading element or an instance of an element with role heading.\n\nAssistive technologies SHOULD enable users to quickly navigate to elements with role region. Mainstream user agents MAY enable users to quickly navigate to elements with role region.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "roletype",
						"description": "The base role from which all other roles in this taxonomy inherit.\n\nProperties of this role describe the structural and functional purpose of objects that are assigned this role (known in RDF terms as \"instances\"). A role is a concept that can be used to understand and operate instances.\n\nroletype is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": [],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic"
							},
							{
								"name": "aria-busy"
							},
							{
								"name": "aria-controls"
							},
							{
								"name": "aria-current"
							},
							{
								"name": "aria-describedby"
							},
							{
								"name": "aria-details"
							},
							{
								"name": "aria-disabled"
							},
							{
								"name": "aria-dropeffect"
							},
							{
								"name": "aria-errormessage"
							},
							{
								"name": "aria-flowto"
							},
							{
								"name": "aria-grabbed"
							},
							{
								"name": "aria-haspopup"
							},
							{
								"name": "aria-hidden"
							},
							{
								"name": "aria-invalid"
							},
							{
								"name": "aria-keyshortcuts"
							},
							{
								"name": "aria-label"
							},
							{
								"name": "aria-labelledby"
							},
							{
								"name": "aria-live"
							},
							{
								"name": "aria-owns"
							},
							{
								"name": "aria-relevant"
							},
							{
								"name": "aria-roledescription"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "row",
						"description": "A row of cells in a tabular container.\n\nRows contain cell or gridcell elements, and thus serve to organize the table or grid.\n\nIn a treegrid, authors MAY mark rows as expandable, using the aria-expanded attribute to indicate the present status. This is not the case for an ordinary table or grid, in which the aria-expanded attribute is not present.\n\nAuthors MUST ensure elements with role row are contained in, or owned by, an element with the role table, grid, rowgroup, or treegrid.",
						"generalization": ["group", "widget"],
						"requiredContextRole": ["grid", "rowgroup", "table", "treegrid"],
						"requiredOwnedElements": ["cell", "columnheader", "gridcell", "rowheader"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex"
							},
							{
								"name": "aria-selected"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowgroup",
						"description": "A structure containing one or more row elements in a tabular container.\n\nThe rowgroup role establishes a relationship between owned row elements. It is a structural equivalent to the thead, tfoot, and tbody elements in an HTML table element.\n\nAuthors MUST ensure elements with role rowgroup are contained in, or owned by, an element with the role table or grid.\n\nThe rowgroup role exists, in part, to support role symmetry in HTML, and allows for the propagation of presentation inheritance on HTML table elements with an explicit presentation role applied.\n\nThis role does not differentiate between types of row groups (e.g., thead vs. tbody), but an issue has been raised for WAI-ARIA 2.0.",
						"generalization": ["structure"],
						"requiredContextRole": ["grid", "table", "treegrid"],
						"requiredOwnedElements": ["row"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "rowheader",
						"description": "A cell containing header information for a row in a grid.\n\nRowheader can be used as a row header in a table or grid. The rowheader establishes a relationship between it and all cells in the corresponding row. It is a structural equivalent to setting scope=\"row\" on an HTML th element.\n\nAuthors MUST ensure elements with role rowheader are contained in, or owned by, an element with the role grid.\n\nApplying the aria-selected state on a rowheader MUST not cause the user agent to automatically propagate the aria-selected state to all the cells in the corresponding row. An author MAY choose to propagate selection in this manner depending on the specific application.\n\nWhile the rowheader role can be used in both interactive grids and non-interactive tables, the use of aria-readonly and aria-required is only applicable to interactive elements. Therefore, authors SHOULD NOT use aria-required or aria-readonly in a rowheader that descends from a table, and user agents SHOULD NOT expose either property to assistive technologies unless the rowheader descends from a grid.",
						"generalization": ["cell", "gridcell", "sectionhead"],
						"requiredContextRole": ["row"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colindex",
								"inherited": true
							},
							{
								"name": "aria-colspan",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowindex",
								"inherited": true
							},
							{
								"name": "aria-rowspan",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-sort"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "scrollbar",
						"description": "A graphical object that controls the scrolling of content within a viewing area, regardless of whether the content is fully displayed within the viewing area.\n\nA scrollbar represents the current value and range of possible values via the size of the scrollbar and position of the thumb with respect to the visible range of the orientation (horizontal or vertical) it controls. Its orientation represents the orientation of the scrollbar and the scrolling effect on the viewing area controlled by the scrollbar. It is typically possible to add or subtract to the current value by using directional keys such as arrow keys.\n\nAuthors MUST set the aria-controls attribute on the scrollbar element to reference the scrollable area it controls.\n\nAuthors MUST set the aria-valuemin, aria-valuemax, and aria-valuenow attributes. If missing, their implicit values follow the same rules as the HTML range input type:\n\nElements with the role scrollbar have an implicit aria-orientation value of vertical.\n\nAssistive technologies generally will render the value of aria-valuenow as a percent of a range between the value of aria-valuemin and aria-valuemax, unless aria-valuetext is specified. It is best to set the values for aria-valuemin, aria-valuemax, and aria-valuenow in a manner that is appropriate for this calculation.",
						"generalization": ["range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"required": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"required": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"required": true
							},
							{
								"name": "aria-valuemin",
								"required": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "search",
						"description": "A landmark region that contains a collection of items and objects that, as a whole, combine to create a search facility. See related form and searchbox.\n\nA search region may be a mix of host language form controls, scripted controls, and hyperlinks.\n\nUser agents SHOULD treat elements with the role of search as navigational landmarks.",
						"generalization": ["landmark"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "searchbox",
						"description": "A type of textbox intended for specifying search criteria. See related textbox and search.",
						"generalization": ["textbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "section",
						"description": "A renderable structural containment unit in a document or application.\n\nsection is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "sectionhead",
						"description": "A structure that labels or summarizes the topic of its related section.\n\nsectionhead is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["structure"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "select",
						"description": "A form widget that allows the user to make selections from a set of choices.\n\nselect is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["composite", "group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "separator",
						"description": "A divider that separates and distinguishes sections of content or groups of menuitems.\n\nThere are two types of separators: a static structure that provides only a visible boundary and a focusable, interactive widget that is also moveable. If a separator is not focusable, it is revealed to assistive technologies as a static structural element. For example, a static separator can be used to help visually divide two groups of menu items in a menu or to provide a horizontal rule between two sections of a page.\n\nAuthors MAY make a separator focusable to create a widget that both provides a visible boundary between two sections of content and enables the user to change the relative size of the sections by changing the position of the separator. A variable separator widget can be moved continuously within a range, whereas a fixed separator widget supports only two discrete positions. Typically, a fixed separator widget is used to toggle one of the sections between expanded and collapsed states.\n\nIf the separator is focusable, authors MUST set the value of aria-valuenow to a number reflecting the current position of the separator and update that value when it changes. Authors SHOULD also provide the value of aria-valuemin if it is not 0 and the value of aria-valuemax if it is not 100. If missing or not a number, the implicit values of these attributes are as follows:\n\nIn applications where there is more than one focusable separator, authors SHOULD provide an accessible name for each one.\n\nElements with the role separator have an implicit aria-orientation value of horizontal.",
						"generalization": ["structure", "widget"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"required": true
							},
							{
								"name": "aria-valuemin",
								"required": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "slider",
						"description": "A user input where the user selects a value from within a given range.\n\nA slider represents the current value and range of possible values via the size of the slider and position of the thumb. It is typically possible to add or subtract to the value by using directional keys such as arrow keys.\n\nAuthors MUST set the aria-valuemin, aria-valuemax, and aria-valuenow attributes. If missing, their implicit values follow the same rules as the HTML range input type:\n\nElements with the role slider have an implicit aria-orientation value of horizontal.",
						"generalization": ["input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"required": true
							},
							{
								"name": "aria-valuemin",
								"required": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "spinbutton",
						"description": "A form of range that expects the user to select from among discrete choices.\n\nA spinbutton typically allows the user to select from the given range through the use of an up and down button on the keyboard. Visibly, the current value is incremented or decremented until a maximum or minimum value is reached. Authors SHOULD ensure this functionality is accomplished programmatically through the use of up and down arrows on the keyboard.\n\nAlthough a spinbutton is similar in appearance to many presentations of select, it is advisable to use spinbutton when working with known ranges (especially in the case of large ranges) as opposed to distinct options. For example, a spinbutton representing a range from 1 to 1,000,000 would provide much better performance than a select widget representing the same values.\n\nAuthors MAY create a spinbutton with children or owned elements, but MUST limit those elements to a textbox and/or two buttons.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus. When a spinbutton receives focus, authors SHOULD ensure focus is placed on the textbox element if one is present, and on the spinbutton itself otherwise. Authors SHOULD NOT include contained button elements in the primary navigation ring, e.g., the Tab ring in HTML, because they are superfluous for people using keyboard devices.\n\nAuthors MUST set the aria-valuenow attribute. Authors SHOULD set the aria-valuemin attribute when there is a minimum value, and the aria-valuemax attribute when there is a maximum value. If missing or not a number, the implicit values of these attributes are as follows:",
						"generalization": ["composite", "input", "range"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-valuemax",
								"required": true
							},
							{
								"name": "aria-valuemin",
								"required": true
							},
							{
								"name": "aria-valuenow",
								"required": true
							},
							{
								"name": "aria-valuetext",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "status",
						"description": "A type of live region whose content is advisory information for the user but is not important enough to justify an alert, often but not necessarily presented as a status bar.\n\nAuthors SHOULD ensure an element with role status does not receive focus as a result of change in status.\n\nStatus is a form of live region. If another part of the page controls what appears in the status, authors SHOULD make the relationship explicit with the aria-controls attribute.\n\nAssistive technologies MAY reserve some cells of a Braille display to render the status.\n\nElements with the role status have an implicit aria-live value of polite and an implicit aria-atomic value of true.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "structure",
						"description": "A document structural element.\n\nRoles for document structure support the accessibility of dynamic web content by helping assistive technologies determine active content versus static document content. Structural roles by themselves do not all map to accessibility APIs, but are used to create widget roles or assist content adaptation for assistive technologies.\n\nstructure is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "switch",
						"description": "A type of checkbox that represents on/off values, as opposed to checked/unchecked values. See related checkbox.\n\nThe aria-checked attribute of a switch indicates whether the input is on (true) or off (false). The mixed value is invalid, and user agents MUST treat a mixed value as equivalent to false for this role.\n\nA switch provides approximately the same functionality as a checkbox and toggle button, but makes it possible for assistive technologies to present the widget in a fashion consistent with its on-screen appearance.",
						"generalization": ["checkbox"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"required": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tab",
						"description": "A grouping label providing a mechanism for selecting the tab content that is to be rendered to the user.\n\nIf a tabpanel or item in a tabpanel has focus, the associated tab is the currently active tab in the tablist, as defined in Managing Focus. tablist elements, which contain a set of associated tab elements, are typically placed near a series of tabpanel elements, usually preceding it. See the WAI-ARIA Authoring Practices [wai-aria-practices-1.1] for details on implementing a tab set design pattern.\n\nAuthors MUST ensure elements with role tab are contained in, or owned by, an element with the role tablist.\n\nAuthors SHOULD ensure the tabpanel associated with the currently active tab is perceivable to the user.\n\nFor a single-selectable tablist, authors SHOULD hide other tabpanel elements from the user until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure each visible tabpanel has its aria-expanded attribute set to true, and that the remaining hidden tabpanel elements have their aria-expanded attributes set to false.\n\nIn either case, authors SHOULD ensure that a selected tab has its aria-selected attribute set to true, that inactive tab elements have their aria-selected attribute set to false, and that the currently selected tab provides a visual indication that it is selected. In the absence of an aria-selected attribute on the current tab, user agents SHOULD indicate to assistive technologies through the platform accessibility API that the currently focused tab is selected.",
						"generalization": ["sectionhead", "widget"],
						"requiredContextRole": ["tablist"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected"
							},
							{
								"name": "aria-setsize"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "table",
						"description": "A section containing data arranged in rows and columns. See related grid.\n\nThe table role is intended for tabular containers which are not interactive. If the tabular container maintains a selection state, provides its own two-dimensional navigation, or allows the user to rearrange or otherwise manipulate its contents or the display thereof, authors SHOULD use grid or treegrid instead.\n\nAuthors SHOULD prefer the use of the host language's semantics for table whenever possible, such as the HTML table element.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount"
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount"
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tablist",
						"description": "A list of tab elements, which are references to tabpanel elements.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nFor a single-selectable tablist, authors SHOULD hide other tabpanel elements from the user until the user selects the tab associated with that tabpanel. For a multi-selectable tablist, authors SHOULD ensure each visible tabpanel has its aria-expanded attribute set to true, and that the remaining hidden tabpanel elements have their aria-expanded attributes set to false.\n\ntablist elements are typically placed near usually preceding, a series of tabpanel elements. See the WAI-ARIA Authoring Practices [wai-aria-practices-1.1] for details on implementing a tab set design pattern.\n\nElements with the role tablist have an implicit aria-orientation value of horizontal.",
						"generalization": ["composite"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["tab"],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level"
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tabpanel",
						"description": "A container for the resources associated with a tab, where each tab is contained in a tablist.\n\nAuthors SHOULD associate a tabpanel element with its tab, either by using the aria-controls attribute on the tab to reference the tab panel, or by using the aria-labelledby attribute on the tab panel to reference the tab.\n\ntablist elements are typically placed near, usually preceding, a series of tabpanel elements. See the WAI-ARIA Authoring Practices [wai-aria-practices-1.1] for details on implementing a tab set design pattern.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "term",
						"description": "A word or phrase with a corresponding definition. See related definition.\n\nThe term role is used to explicitly identify a word or phrase for which a definition has been provided by the author or is expected to be provided by the user.\n\nAuthors SHOULD NOT use the term role on interactive elements such as links because doing so could prevent users of assistive technologies from interacting with those elements.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "textbox",
						"description": "A type of input that allows free-form text as its value.\n\nIf the aria-multiline attribute is true, the widget accepts line breaks within the input, as in an HTML textarea. Otherwise, this is a simple text box. The intended use is for languages that do not have a text input element, or cases in which an element with different semantics is repurposed as a text field.\n\nIn most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line <input type=\"text\"> element, the keystroke usually submits the form. When user has focus in a multi-line <textarea> element, the keystroke inserts a line break. The WAI-ARIA textbox role differentiates these types of boxes with the aria-multiline attribute, so authors are advised to be aware of this distinction when designing the field.",
						"generalization": ["input"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant"
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-autocomplete"
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiline"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-placeholder"
							},
							{
								"name": "aria-readonly"
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "timer",
						"description": "A type of live region containing a numerical counter which indicates an amount of elapsed time from a start point, or the time remaining until an end point.\n\nThe text contents of the timer object indicate the current time measurement, and are updated as that amount changes. The timer value is not necessarily machine parsable, but authors SHOULD update the text contents at fixed intervals, except when the timer is paused or reaches an end-point.\n\nElements with the role timer have an implicit aria-live value of off.",
						"generalization": ["status"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "toolbar",
						"description": "A collection of commonly used function buttons or controls represented in compact visual form.\n\nThe toolbar is often a subset of functions found in a menubar, designed to reduce user effort in using these functions. Authors MUST supply a label on each toolbar when the application contains more than one toolbar.\n\nAuthors MAY manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role toolbar have an implicit aria-orientation value of horizontal.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-orientation"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tooltip",
						"description": "A contextual popup that displays a description for an element.\n\nThe tooltip typically becomes visible in response to a mouse hover, or after the owning element receives keyboard focus. In each of these cases, authors SHOULD display the tooltip after a short delay. The use of a WAI-ARIA tooltip is a supplement to the normal tooltip behavior of the user agent.\n\nTypical tooltip delays last from one to five seconds.\n\nAuthors SHOULD ensure that elements with the role tooltip are referenced through the use of aria-describedby before or at the time the tooltip is displayed.",
						"generalization": ["section"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "tree",
						"description": "A type of list that may contain sub-level nested groups that can be collapsed and expanded.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.\n\nElements with the role tree have an implicit aria-orientation value of vertical.",
						"generalization": ["select"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["group > treeitem", "treeitem"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable"
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required"
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treegrid",
						"description": "A grid whose rows can be expanded and collapsed in the same manner as for a tree.\n\nIf aria-readonly is set on an element with role treegrid, user agents MUST propagate the value to all gridcell elements owned by the treegrid and expose the value in the accessibility API. An author MAY override the propagated value of aria-readonly for an individual gridcell element.\n\nWhen the aria-readonly attribute is applied to a focusable gridcell, it indicates whether the content contained in the gridcell is editable. The aria-readonly attribute does not represent availability of functions for navigating or manipulating the treegrid itself.\n\nIn a treegrid that provides content editing functions, if the content of a focusable gridcell element is not editable, authors MAY set aria-readonly to true on the gridcell element. However, if a treegrid presents a collection of elements that do not support aria-readonly, such as a collection of link elements, it is not necessary for the author to specify a value for aria-readonly.\n\nTo be keyboard accessible, authors SHOULD manage focus of descendants for all instances of this role, as described in Managing Focus.",
						"generalization": ["grid", "tree"],
						"requiredContextRole": [],
						"requiredOwnedElements": ["row", "rowgroup > row"],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-colcount",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-multiselectable",
								"inherited": true
							},
							{
								"name": "aria-orientation",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-readonly",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-required",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-rowcount",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "treeitem",
						"description": "An option item of a tree. This is an element within a tree that may be expanded or collapsed if it contains a sub-level group of tree item elements.\n\nA collection of treeitem elements to be expanded and collapsed are enclosed in an element with the group role.\n\nAuthors MUST ensure elements with role treeitem are contained in, or owned by, an element with the role group or tree.",
						"generalization": ["listitem", "option"],
						"requiredContextRole": ["group", "tree"],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-checked",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-level",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-posinset",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							},
							{
								"name": "aria-selected",
								"inherited": true
							},
							{
								"name": "aria-setsize",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "widget",
						"description": "An interactive component of a graphical user interface (GUI).\n\nWidgets are discrete user interface objects with which the user can interact. Widget roles map to standard features in accessibility APIs. When the user navigates an element assigned any of the non-abstract subclass roles of widget, assistive technologies that typically intercept standard keyboard events SHOULD switch to an application browsing mode, and pass keyboard events through to the web application. The intent is to hint to certain assistive technologies to switch from normal browsing mode into a mode more appropriate for interacting with a web application; some user agents have a browse navigation mode where keys, such as up and down arrows, are used to browse the document, and this native behavior prevents the use of these keys by a web application.\n\nwidget is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": false,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "window",
						"description": "A browser or application window.\n\nElements with this role have a window-like behavior in a graphical user interface (GUI) context, regardless of whether they are implemented as a native window in the operating system, or merely as a section of the document styled to look like a window.\n\nIn the description of this role, the term \"application\" does not refer to the application role, which specifies specific assistive technology behaviors.\n\nwindow is an abstract role used for the ontology. Authors should not use this role in content.",
						"isAbstract": true,
						"generalization": ["roletype"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded"
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-modal"
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				],
				"props": [
					{
						"name": "aria-activedescendant",
						"type": "property",
						"value": "ID reference",
						"enum": []
					},
					{
						"name": "aria-atomic",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Assistive technologies will present only the changed node or nodes.",
							"true": "Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists."
						}
					},
					{
						"name": "aria-autocomplete",
						"type": "property",
						"value": "token",
						"enum": ["inline", "list", "both", "none"],
						"defaultValue": "none",
						"valueDescriptions": {
							"inline": "When a user is providing input, text suggesting one way to complete the provided input may be dynamically inserted after the caret.",
							"list": "When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed.",
							"both": "When a user is providing input, an element containing a collection of values that could complete the provided input may be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.",
							"none": "When a user is providing input, an automatic suggestion that attempts to predict how the user intends to complete the input is not displayed."
						}
					},
					{
						"name": "aria-busy",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "There are no expected updates for the element.",
							"true": "The element is being updated."
						}
					},
					{
						"name": "aria-checked",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "undefined",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "checked",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element supports being checked but is not currently checked.",
							"mixed": "Indicates a mixed mode value for a tri-state checkbox or menuitemcheckbox.",
							"true": "The element is checked.",
							"undefined": "The element does not support being checked."
						},
						"conditionalValue": [
							{
								"role": ["checkbox", "menuitemcheckbox"],
								"value": "tristate"
							}
						]
					},
					{
						"name": "aria-colcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-colspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "colspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-controls",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-current",
						"type": "state",
						"value": "token",
						"enum": ["page", "step", "location", "date", "time", "true", "false"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"page": "Represents the current page within a set of pages.",
							"step": "Represents the current step within a process.",
							"location": "Represents the current location within an environment or context.",
							"date": "Represents the current date within a collection of dates.",
							"time": "Represents the current time within a set of times.",
							"true": "Represents the current item within a set.",
							"false": "Does not represent the current item within a set."
						}
					},
					{
						"name": "aria-describedby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-details",
						"type": "property",
						"value": "ID reference",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-disabled",
						"type": "state",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "disabled",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The element is enabled.",
							"true": "The element and all focusable descendants are disabled and its value cannot be changed by the user."
						}
					},
					{
						"name": "aria-dropeffect",
						"type": "property",
						"deprecated": true,
						"value": "token list",
						"enum": ["copy", "execute", "link", "move", "none", "popup"],
						"defaultValue": "none",
						"isGlobal": true,
						"valueDescriptions": {
							"copy": "A duplicate of the source object will be dropped into the target.",
							"execute": "A function supported by the drop target is executed, using the drag source as an input.",
							"link": "A reference or shortcut to the dragged object will be created in the target object.",
							"move": "The source object will be removed from its current location and dropped into the target.",
							"none": "No operation can be performed; effectively cancels the drag operation if an attempt is made to drop on this object. Ignored if combined with any other token value. e.g., 'none copy' is equivalent to a 'copy' value.",
							"popup": "There is a popup menu or dialog that allows the user to choose one of the drag operations (copy, move, link, execute) and any other drag functionality, such as cancel."
						}
					},
					{
						"name": "aria-errormessage",
						"type": "property",
						"value": "ID reference",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-expanded",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The element, or another grouping element it controls, is collapsed.",
							"true": "The element, or another grouping element it controls, is expanded.",
							"undefined": "The element, or another grouping element it controls, is neither expandable nor collapsible; all its child elements are shown or there are no child elements."
						}
					},
					{
						"name": "aria-flowto",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-grabbed",
						"type": "state",
						"deprecated": true,
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates that the element supports being dragged.",
							"true": "Indicates that the element has been \"grabbed\" for dragging.",
							"undefined": "Indicates that the element does not support being dragged."
						}
					},
					{
						"name": "aria-haspopup",
						"type": "property",
						"value": "token",
						"enum": ["false", "true", "menu", "listbox", "tree", "grid", "dialog"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"false": "Indicates the element does not have a popup.",
							"true": "Indicates the popup is a menu.",
							"menu": "Indicates the popup is a menu.",
							"listbox": "Indicates the popup is a listbox.",
							"tree": "Indicates the popup is a tree.",
							"grid": "Indicates the popup is a grid.",
							"dialog": "Indicates the popup is a dialog."
						}
					},
					{
						"name": "aria-hidden",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"isGlobal": true,
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "hidden",
								"value": "true",
								"isNotStrictEquivalent": true
							}
						],
						"valueDescriptions": {
							"false": "The element is exposed to the accessibility API as if it was rendered.",
							"true": "The element is hidden from the accessibility API.",
							"undefined": "The element's hidden state is determined by the user agent based on whether it is rendered."
						}
					},
					{
						"name": "aria-invalid",
						"type": "state",
						"value": "token",
						"enum": ["grammar", "false", "spelling", "true"],
						"defaultValue": "false",
						"isGlobal": true,
						"valueDescriptions": {
							"grammar": "A grammatical error was detected.",
							"false": "There are no detected errors in the value.",
							"spelling": "A spelling error was detected.",
							"true": "The value entered by the user has failed validation."
						}
					},
					{
						"name": "aria-keyshortcuts",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-label",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-labelledby",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-level",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-live",
						"type": "property",
						"value": "token",
						"enum": ["assertive", "off", "polite"],
						"defaultValue": "off",
						"isGlobal": true,
						"valueDescriptions": {
							"assertive": "Indicates that updates to the region have the highest priority and should be presented the user immediately.",
							"off": "Indicates that updates to the region should not be presented to the user unless the used is currently focused on that region.",
							"polite": "Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing."
						}
					},
					{
						"name": "aria-modal",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Element is not modal.",
							"true": "Element is modal."
						}
					},
					{
						"name": "aria-multiline",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "This is a single-line text box.",
							"true": "This is a multi-line text box."
						}
					},
					{
						"name": "aria-multiselectable",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"valueDescriptions": {
							"false": "Only one item can be selected.",
							"true": "More than one item in the widget may be selected at a time."
						}
					},
					{
						"name": "aria-orientation",
						"type": "property",
						"value": "token",
						"enum": ["horizontal", "undefined", "vertical"],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"horizontal": "The element is oriented horizontally.",
							"undefined": "The element's orientation is unknown/ambiguous.",
							"vertical": "The element is oriented vertically."
						}
					},
					{
						"name": "aria-owns",
						"type": "property",
						"value": "ID reference list",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-placeholder",
						"type": "property",
						"value": "string",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "placeholder",
								"value": null
							}
						]
					},
					{
						"name": "aria-posinset",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-pressed",
						"type": "state",
						"value": "tristate",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The element supports being pressed but is not currently pressed.",
							"mixed": "Indicates a mixed mode value for a tri-state toggle button.",
							"true": "The element is pressed.",
							"undefined": "The element does not support being pressed."
						}
					},
					{
						"name": "aria-readonly",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "readonly",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "The user can set the value of the element.",
							"true": "The user cannot change the value of the element."
						}
					},
					{
						"name": "aria-relevant",
						"type": "property",
						"value": "token list",
						"enum": ["additions", "additions text", "all", "removals", "text"],
						"defaultValue": "additions text",
						"isGlobal": true,
						"valueDescriptions": {
							"additions": "Element nodes are added to the accessibility tree within the live region.",
							"additions text": "Equivalent to the combination of values, \"additions text\".",
							"all": "Equivalent to the combination of all values, \"additions removals text\".",
							"removals": "Text content, a text alternative, or an element node within the live region is removed from the accessibility tree.",
							"text": "Text content or a text alternative is added to any descendant in the accessibility tree of the live region."
						}
					},
					{
						"name": "aria-required",
						"type": "property",
						"value": "true/false",
						"enum": [],
						"defaultValue": "false",
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "required",
								"value": "true"
							}
						],
						"valueDescriptions": {
							"false": "User input is not necessary to submit the form.",
							"true": "Users need to provide input on an element before a form is submitted."
						}
					},
					{
						"name": "aria-roledescription",
						"type": "property",
						"value": "string",
						"enum": [],
						"isGlobal": true
					},
					{
						"name": "aria-rowcount",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowindex",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-rowspan",
						"type": "property",
						"value": "integer",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "rowspan",
								"value": null
							}
						]
					},
					{
						"name": "aria-selected",
						"type": "state",
						"value": "true/false/undefined",
						"enum": [],
						"defaultValue": "undefined",
						"valueDescriptions": {
							"false": "The selectable element is not selected.",
							"true": "The selectable element is selected.",
							"undefined": "The element is not selectable."
						}
					},
					{
						"name": "aria-setsize",
						"type": "property",
						"value": "integer",
						"enum": []
					},
					{
						"name": "aria-sort",
						"type": "property",
						"value": "token",
						"enum": ["ascending", "descending", "none", "other"],
						"defaultValue": "none",
						"valueDescriptions": {
							"ascending": "Items are sorted in ascending order by this column.",
							"descending": "Items are sorted in descending order by this column.",
							"none": "There is no defined sort applied to the column.",
							"other": "A sort algorithm other than ascending or descending has been applied."
						}
					},
					{
						"name": "aria-valuemax",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "max",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuemin",
						"type": "property",
						"value": "number",
						"enum": [],
						"equivalentHtmlAttrs": [
							{
								"htmlAttrName": "min",
								"value": null
							}
						]
					},
					{
						"name": "aria-valuenow",
						"type": "property",
						"value": "number",
						"enum": []
					},
					{
						"name": "aria-valuetext",
						"type": "property",
						"value": "string",
						"enum": []
					}
				],
				"graphicsRoles": [
					{
						"name": "graphics-document",
						"description": "A type of document in which the visual appearance or layout of content conveys meaning.\n\nSimilar to other document types, the graphics-document role applies to the root element of a region of the page containing related information, where the user's primary interaction mode is expected to be browsing the document rather than controlling an application. The element with this role may be the root element of the document file, or of a nested structure within it.\n\nThe graphics-document may be distinguished from similar roles as follows:\n\nRelative to other documents, a graphics-document is distinguished by the semantic importance of its visual (usually two-dimensional) representation. User agents and assistive technologies SHOULD take this into consideration when supporting navigation of the graphic. Accessibility technologies that re-format or re-style a document SHOULD NOT alter the layout of a graphics-document except in ways that are consistent with the semantic roles and relationships of its content.\n\nRelative to an img, a graphics-document is distinguished by the structured nature of its content. Its child elements may have semantic meaning, and may include links or other interactive widgets.\n\nRelative to a graphics-object, a graphics-document is self-contained. Its meaning persists when separated from surrounding content. The element with the graphics-document role defines the scope and context for interpretation of the child content.\n\nIn general, authors SHOULD use the graphics-document role for structured graphics such as charts, maps, diagrams, technical drawing, blue prints and instructional graphics. However, if a single large graphic has discrete regions that may be safely re-arranged without sacrificing meaning, each of those regions SHOULD be a distinct graphics-document. An alternative role (such as figure) may be used to group them together. One graphics-document may also be nested inside another, for example a bar chart that is embedded in a map or a matrix of chart panels should have a role of graphics-document. The nested document provides encapsulation; navigation between components of the inner and outer graphics should be explicit.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the document role as a fallback value, in the form role=\"graphics-document document\".\n\nFuture specifications may define more specific roles for particular types of graphical documents with special semantic structures. Those more specific roles would be subclasses of graphics-document.\n\nAn SVG diagram of an electrical circuit is a simple graphical document:",
						"generalization": ["document"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-object",
						"description": "A section of a graphics-document that represents a distinct object or sub-component with semantic meaning. A graphical object may itself have nested sub-components.\n\nContainer elements that represent a collection of disconnected objects should be given the group or list roles, instead. Grouping elements that do not have semantic meaning and do not alter the semantic context provided by an ancestor (for example, a div or SVG g that is only used for styling or layout) SHOULD NOT be given a role. The lack of role may be explicitly indicated with the role none or presentation.\n\nUnlike a graphics-document, a graphics-object need not be self-contained, and it does not establish a new context for navigation. However, user agents and assistive technologies SHOULD provide a way for users, particularly non-visual users, to navigate the nested structure of objects in a hierarchical manner, similar to nested lists.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the group role as a fallback value, in the form role=\"graphics-object group\".\n\nThe code that follows is a portion of the markup for a structured graphic. It includes SVG g grouping elements with various roles:\n\nWhere a graphical object has multiple sub-components, the group role is provided as an explicit fallback.",
						"generalization": ["group"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": false,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": true,
						"accessibleNameProhibited": false,
						"childrenPresentational": false,
						"ownedProperties": [
							{
								"name": "aria-activedescendant",
								"inherited": true
							},
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					},
					{
						"name": "graphics-symbol",
						"description": "A graphical object used to convey a simple meaning or category, where the meaning is more important than the particular visual appearance. It may be a component of a larger structured graphic such as a chart or map. The symbol itself is an atomic object; children are presentational.\n\nWhen used as part of a structured symbolic language, the aria-roledescription property (introduced in ARIA 1.1 [WAI-ARIA-1.1]) can be used to name the symbol type separately from the name and description for the particular instance of the symbol.\n\nTo support user agents and assistive technologies based on the ARIA 1.0 specification, authors may wish to include the img role as a fallback value, in the form role=\"graphics-symbol img\", if that is not already the default semantic role for the element.\n\nWithin an HTML document for a restaurant menu, an img element can represent a repeated symbol:\n\nWithin an SVG diagram of an electrical circuit, the graphics that represent batteries, switches, and loads like this lightbulb are each symbols:\n\nNote that the visible text must be included in the label for its parent symbol, in this example. As the child of a graphics-symbol, it is treated as presentational content, and is therefore not accessible as a separate element of the graphic.\n\nWithin an architectural blueprint-style SVG diagram, each SVG use element that creates a copy of a simple SVG symbol is a graphics-symbol:",
						"generalization": ["img"],
						"requiredContextRole": [],
						"requiredOwnedElements": [],
						"accessibleNameRequired": true,
						"accessibleNameFromAuthor": true,
						"accessibleNameFromContent": false,
						"accessibleNameProhibited": false,
						"childrenPresentational": true,
						"ownedProperties": [
							{
								"name": "aria-atomic",
								"inherited": true
							},
							{
								"name": "aria-busy",
								"inherited": true
							},
							{
								"name": "aria-controls",
								"inherited": true
							},
							{
								"name": "aria-current",
								"inherited": true
							},
							{
								"name": "aria-describedby",
								"inherited": true
							},
							{
								"name": "aria-details",
								"inherited": true
							},
							{
								"name": "aria-disabled",
								"inherited": true
							},
							{
								"name": "aria-dropeffect",
								"inherited": true
							},
							{
								"name": "aria-errormessage",
								"inherited": true
							},
							{
								"name": "aria-expanded",
								"inherited": true
							},
							{
								"name": "aria-flowto",
								"inherited": true
							},
							{
								"name": "aria-grabbed",
								"inherited": true
							},
							{
								"name": "aria-haspopup",
								"inherited": true
							},
							{
								"name": "aria-hidden",
								"inherited": true
							},
							{
								"name": "aria-invalid",
								"inherited": true
							},
							{
								"name": "aria-keyshortcuts",
								"inherited": true
							},
							{
								"name": "aria-label",
								"inherited": true
							},
							{
								"name": "aria-labelledby",
								"inherited": true
							},
							{
								"name": "aria-live",
								"inherited": true
							},
							{
								"name": "aria-owns",
								"inherited": true
							},
							{
								"name": "aria-relevant",
								"inherited": true
							},
							{
								"name": "aria-roledescription",
								"inherited": true
							}
						],
						"prohibitedProperties": []
					}
				]
			}
		},
		"#contentModels": {
			"#metadata": ["base", "link", "meta", "noscript", "script", "style", "template", "title"],
			"#flow": [
				"a",
				"abbr",
				"address",
				"area",
				"article",
				"aside",
				"audio",
				"b",
				"bdi",
				"bdo",
				"blockquote",
				"br",
				"button",
				"canvas",
				"cite",
				"code",
				"data",
				"datalist",
				"del",
				"details",
				"dfn",
				"dialog",
				"div",
				"dl",
				"em",
				"embed",
				"fieldset",
				"figure",
				"footer",
				"form",
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6",
				"header",
				"hgroup",
				"hr",
				"i",
				"iframe",
				"img",
				"input",
				"ins",
				"kbd",
				"label",
				"link[itemprop]",
				"link[rel=dns-prefetch]",
				"link[rel=modulepreload]",
				"link[rel=pingback]",
				"link[rel=preconnect]",
				"link[rel=prefetch]",
				"link[rel=preload]",
				"link[rel=prerender]",
				"link[rel=stylesheet]",
				"main",
				"map",
				"mark",
				"math",
				"menu",
				"meta[itemprop]",
				"meter",
				"nav",
				"noscript",
				"object",
				"ol",
				"output",
				"p",
				"picture",
				"pre",
				"progress",
				"q",
				"ruby",
				"s",
				"samp",
				"script",
				"search",
				"section",
				"select",
				"slot",
				"small",
				"span",
				"strong",
				"sub",
				"sup",
				"svg|svg",
				"table",
				"template",
				"textarea",
				"time",
				"u",
				"ul",
				"var",
				"video",
				"wbr",
				"#custom",
				"#text"
			],
			"#sectioning": ["article", "aside", "nav", "section"],
			"#heading": ["h1", "h2", "h3", "h4", "h5", "h6", "hgroup:has(h1,h2,h3,h4,h5,h6)"],
			"#phrasing": [
				"a",
				"abbr",
				"area",
				"audio",
				"b",
				"bdi",
				"bdo",
				"br",
				"button",
				"canvas",
				"cite",
				"code",
				"data",
				"datalist",
				"del",
				"dfn",
				"em",
				"embed",
				"i",
				"iframe",
				"img",
				"input",
				"ins",
				"kbd",
				"label",
				"link[itemprop]",
				"link[rel=dns-prefetch]",
				"link[rel=modulepreload]",
				"link[rel=pingback]",
				"link[rel=preconnect]",
				"link[rel=prefetch]",
				"link[rel=preload]",
				"link[rel=prerender]",
				"link[rel=stylesheet]",
				"map",
				"mark",
				"math",
				"meta[itemprop]",
				"meter",
				"noscript",
				"object",
				"output",
				"picture",
				"progress",
				"q",
				"ruby",
				"s",
				"samp",
				"script",
				"select",
				"slot",
				"small",
				"span",
				"strong",
				"sub",
				"sup",
				"svg|svg",
				"template",
				"textarea",
				"time",
				"u",
				"var",
				"video",
				"wbr",
				"#custom",
				"#text"
			],
			"#embedded": ["audio", "canvas", "embed", "iframe", "img", "math", "object", "picture", "svg|svg", "video"],
			"#interactive": [
				"a[href]",
				"audio[controls]",
				"button",
				"details",
				"embed",
				"iframe",
				"img[usemap]",
				"input:not([type='hidden' i])",
				"label",
				"select",
				"textarea",
				"video[controls]"
			],
			"#palpable": [
				"a",
				"abbr",
				"address",
				"article",
				"aside",
				"audio[controls]",
				"b",
				"bdi",
				"bdo",
				"blockquote",
				"button",
				"canvas",
				"cite",
				"code",
				"data",
				"del",
				"details",
				"dfn",
				"div",
				"dl:has(>:is(dt+dd))",
				"em",
				"embed",
				"fieldset",
				"figure",
				"footer",
				"form",
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6",
				"header",
				"hgroup",
				"i",
				"iframe",
				"img",
				"input:not([type='hidden' i])",
				"ins",
				"kbd",
				"label",
				"main",
				"map",
				"mark",
				"math",
				"menu:has(>li)",
				"meter",
				"nav",
				"object",
				"ol:has(>li)",
				"output",
				"p",
				"picture",
				"pre",
				"progress",
				"q",
				"ruby",
				"s",
				"samp",
				"search",
				"section",
				"select",
				"small",
				"span",
				"strong",
				"sub",
				"sup ",
				"svg",
				"table",
				"textarea",
				"time",
				"u",
				"ul:has(>li)",
				"var",
				"video",
				"#custom",
				"#text"
			],
			"#script-supporting": ["script", "template"],
			"#SVGAnimation": [
				"svg|animate",
				"svg|animateColor",
				"svg|animateMotion",
				"svg|animateTransform",
				"svg|discard",
				"svg|mpath",
				"svg|set"
			],
			"#SVGBasicShapes": ["svg|circle", "svg|ellipse", "svg|line", "svg|polygon", "svg|polyline", "svg|rect"],
			"#SVGContainer": [
				"svg|a",
				"svg|defs",
				"svg|g",
				"svg|marker",
				"svg|mask",
				"svg|missing-glyph",
				"svg|pattern",
				"svg|svg",
				"svg|switch",
				"svg|symbol"
			],
			"#SVGDescriptive": ["svg|desc", "svg|metadata", "svg|title"],
			"#SVGFilterPrimitive": [
				"svg|feBlend",
				"svg|feColorMatrix",
				"svg|feComponentTransfer",
				"svg|feComposite",
				"svg|feConvolveMatrix",
				"svg|feDiffuseLighting",
				"svg|feDisplacementMap",
				"svg|feDropShadow",
				"svg|feFlood",
				"svg|feFuncA",
				"svg|feFuncB",
				"svg|feFuncG",
				"svg|feFuncR",
				"svg|feGaussianBlur",
				"svg|feImage",
				"svg|feMerge",
				"svg|feMergeNode",
				"svg|feMorphology",
				"svg|feOffset",
				"svg|feSpecularLighting",
				"svg|feTile",
				"svg|feTurbulence"
			],
			"#SVGFont": [
				"svg|font",
				"svg|font-face",
				"svg|font-face-format",
				"svg|font-face-name",
				"svg|font-face-src",
				"svg|font-face-uri",
				"svg|hkern",
				"svg|vkern"
			],
			"#SVGGradient": ["svg|linearGradient", "svg|radialGradient", "svg|stop"],
			"#SVGGraphics": [
				"svg|circle",
				"svg|ellipse",
				"svg|image",
				"svg|line",
				"svg|path",
				"svg|polygon",
				"svg|polyline",
				"svg|rect",
				"svg|text",
				"svg|use"
			],
			"#SVGGraphicsReferencing": ["svg|use"],
			"#SVGLightSource": ["svg|feDistantLight", "svg|fePointLight", "svg|feSpotLight"],
			"#SVGNeverRendered": [
				"svg|clipPath",
				"svg|defs",
				"svg|linearGradient",
				"svg|marker",
				"svg|mask",
				"svg|metadata",
				"svg|pattern",
				"svg|radialGradient",
				"svg|script",
				"svg|style",
				"svg|symbol",
				"svg|title"
			],
			"#SVGPaintServer": ["svg|linearGradient", "svg|pattern", "svg|radialGradient", "svg|solidcolor"],
			"#SVGRenderable": [
				"svg|a",
				"svg|circle",
				"svg|ellipse",
				"svg|foreignObject",
				"svg|g",
				"svg|image",
				"svg|line",
				"svg|path",
				"svg|polygon",
				"svg|polyline",
				"svg|rect",
				"svg|svg",
				"svg|switch",
				"svg|symbol",
				"svg|text",
				"svg|textPath",
				"svg|tspan",
				"svg|unknown",
				"svg|use"
			],
			"#SVGShape": [
				"svg|circle",
				"svg|ellipse",
				"svg|line",
				"svg|path",
				"svg|polygon",
				"svg|polyline",
				"svg|rect"
			],
			"#SVGStructural": ["svg|defs", "svg|g", "svg|svg", "svg|symbol", "svg|use"],
			"#SVGStructurallyExternal": [],
			"#SVGTextContent": [
				"svg|altGlyph",
				"svg|altGlyphDef",
				"svg|altGlyphItem",
				"svg|glyph",
				"svg|glyphRef",
				"svg|textPath",
				"svg|text",
				"svg|tref",
				"svg|tspan"
			],
			"#SVGTextContentChild": ["svg|altGlyph", "svg|textPath", "svg|tref", "svg|tspan"]
		}
	},
	"specs": [
		{
			"name": "a",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
			"description": "The <a> HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.",
			"categories": ["#flow", "#phrasing", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"transparent": ":not(:model(interactive), a, [tabindex], :has(:model(interactive), a, [tabindex]))"
					}
				]
			},
			"aria": {
				"implicitRole": "link",
				"permittedRoles": [
					"button",
					"checkbox",
					"menuitem",
					"menuitemcheckbox",
					"menuitemradio",
					"option",
					"radio",
					"switch",
					"tab",
					"treeitem"
				],
				"properties": {
					"global": true,
					"role": true,
					"without": [
						{
							"type": "not-recommended",
							"name": "aria-disabled",
							"value": "true",
							"alt": {
								"method": "remove-attr",
								"target": "href"
							}
						}
					]
				},
				"conditions": {
					":not([href])": {
						"implicitRole": "generic",
						"permittedRoles": true,
						"namingProhibited": true
					}
				},
				"1.1": {
					"conditions": {
						":not([href])": {
							"implicitRole": false
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": [
					"href",
					"target",
					"download",
					"ping",
					"rel",
					"hreflang",
					"type",
					"referrerpolicy"
				]
			},
			"attributes": {
				"attributionsrc": {
					"description": "Specifies that you want the browser to send an Attribution-Reporting-Eligible header. On the server-side this is used to trigger sending an Attribution-Reporting-Register-Source header in the response, to register a navigation-based attribution source. The browser stores the source data associated with the navigation-based attribution source (as provided in the Attribution-Reporting-Register-Source response header) when the user clicks the link. See the Attribution Reporting API for more details. There are two versions of this attribute that you can set: Boolean, i.e. just the attributionsrc name. This specifies that you want the Attribution-Reporting-Eligible header sent to the same server as the href attribute points to. This is fine when you are handling the attribution source registration on the same server. Value containing one or more URLs, for example: htmlattributionsrc=\"https://a.example/register-source https://b.example/register-source\" This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of attributionsrc. When the resource request occurs, the Attribution-Reporting-Eligible header will be sent to the URL(s) specified in attributionsrc in addition to the resource origin. These URLs can then respond with the Attribution-Reporting-Register-Source to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data. <a> elements cannot be used as attribution triggers, only sources.",
					"experimental": true
				},
				"charset": {
					"description": "Hinted at the character encoding of the linked URL. Note: This attribute is deprecated and should not be used by authors. Use the HTTP Content-Type header on the linked URL.",
					"deprecated": true
				},
				"coords": {
					"description": "Used with the shape attribute. A comma-separated list of coordinates.",
					"deprecated": true
				},
				"download": {
					"description": "Causes the browser to treat the linked URL as a download. Can be used with or without a filename value: Without a value, the browser will suggest a filename/extension, generated from various sources: The Content-Disposition HTTP header The final segment in the URL path The media type (from the Content-Type header, the start of a data: URL, or Blob.type for a blob: URL) filename: defining a value suggests it as the filename. / and \\ characters are converted to underscores (_). Filesystems may forbid other characters in filenames, so browsers will adjust the suggested name if necessary. Note: download only works for same-origin URLs, or the blob: and data: schemes. How browsers treat downloads varies by browser, user settings, and other factors. The user may be prompted before a download starts, or the file may be saved automatically, or it may open automatically, either in an external application or in the browser itself. If the Content-Disposition header has different information from the download attribute, resulting behavior may differ: If the header specifies a filename, it takes priority over a filename specified in the download attribute. If the header specifies a disposition of inline, Chrome and Firefox prioritize the attribute and treat it as a download. Old Firefox versions (before 82) prioritize the header and will display the content inline."
				},
				"href": {
					"description": "The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers: Telephone numbers with tel: URLs Email addresses with mailto: URLs SMS text messages with sms: URLs Executable code with javascript: URLs While web browsers may not support other URL schemes, websites can with registerProtocolHandler() Moreover other URL features can locate specific parts of the resource, including: Sections of a page with document fragments Specific text portions with text fragments Pieces of media files with media fragments"
				},
				"hreflang": {
					"description": "Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global lang attribute."
				},
				"name": {
					"description": "Was required to define a possible target location in a page. In HTML 4.01, id and name could both be used on <a>, as long as they had identical values. Note: Use the global attribute id instead.",
					"deprecated": true
				},
				"ping": {
					"description": "A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs. Typically for tracking."
				},
				"referrerpolicy": {
					"description": "How much of the referrer to send when following the link. no-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins."
				},
				"rel": {
					"description": "The relationship of the linked URL as space-separated link types."
				},
				"rev": {
					"description": "Specified a reverse link; the opposite of the rel attribute. Deprecated for being very confusing.",
					"deprecated": true
				},
				"shape": {
					"description": "The shape of the hyperlink's region in an image map. Note: Use the <area> element for image maps instead.",
					"deprecated": true
				},
				"target": {
					"description": "Where to display the linked URL, as the name for a browsing context (a tab, window, or <iframe>). The following keywords have special meanings for where to load the URL: _self: The current browsing context. (Default) _blank: Usually a new tab, but users can configure browsers to open a new window instead. _parent: The parent browsing context of the current one. If no parent, behaves as _self. _top: The topmost browsing context. To be specific, this means the \"highest\" context that's an ancestor of the current one. If no ancestors, behaves as _self. _unfencedTop: Allows embedded fenced frames to navigate the top-level frame (i.e. traversing beyond the root of the fenced frame, unlike other reserved destinations). Note that the navigation will still succeed if this is used outside of a fenced frame context, but it will not act like a reserved keyword. Note: Setting target=\"_blank\" on <a> elements implicitly provides the same rel behavior as setting rel=\"noopener\" which does not set window.opener."
				},
				"type": {
					"description": "Hints at the linked URL's format with a MIME type. No built-in functionality."
				}
			}
		},
		{
			"name": "abbr",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr",
			"description": "The <abbr> HTML element represents an abbreviation or acronym.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "acronym",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <acronym> HTML element allows authors to clearly indicate a sequence of characters that compose an acronym or abbreviation for a word.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "address",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address",
			"description": "The <address> HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(address, :model(heading), :model(sectioning), header, foooter, :has(address, :model(heading), :model(sectioning), header, foooter))"
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "applet",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "area",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area",
			"description": "The <area> HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": false,
				"descendantOf": "map"
			},
			"aria": {
				"implicitRole": "link",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "link"
				},
				"conditions": {
					":not([href])": {
						"implicitRole": "generic",
						"permittedRoles": ["button", "link"],
						"namingProhibited": true
					}
				},
				"1.1": {
					"conditions": {
						":not([href])": {
							"implicitRole": false,
							"permittedRoles": false
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": [
					"href",
					"target",
					"download",
					"ping",
					"rel",
					"hreflang",
					"type",
					"referrerpolicy"
				]
			},
			"attributes": {
				"alt": {
					"type": "Any",
					"required": true,
					"condition": "[href]"
				},
				"coords": {
					"type": {
						"token": "Number",
						"disallowToSurroundBySpaces": true,
						"separator": "comma"
					}
				},
				"download": {
					"description": "This attribute, if present, indicates that the linked resource is intended to be downloaded rather than displayed in the browser. See <a> for a full description of the download attribute."
				},
				"href": {
					"description": "The hyperlink target for the area. Its value is a valid URL. This attribute may be omitted; if so, the <area> element does not represent a hyperlink."
				},
				"ping": {
					"description": "Contains a space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking."
				},
				"referrerpolicy": {
					"description": "A string indicating which referrer to use when fetching the resource: no-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins."
				},
				"rel": {
					"description": "For anchors containing the href attribute, this attribute specifies the relationship of the target object to the link object. The value is a space-separated list of link types. The values and their semantics will be registered by some authority that might have meaning to the document author. The default relationship, if no other is given, is void. Use this attribute only if the href attribute is present."
				},
				"shape": {
					"type": {
						"enum": ["rect", "circle", "poly", "default"],
						"missingValueDefault": "rect",
						"invalidValueDefault": "rect"
					}
				},
				"target": {
					"description": "A keyword or author-defined name of the browsing context to display the linked resource. The following keywords have special meanings: _self (default): Show the resource in the current browsing context. _blank: Show the resource in a new, unnamed browsing context. _parent: Show the resource in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as _self. _top: Show the resource in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as _self. Use this attribute only if the href attribute is present. Note: Setting target=\"_blank\" on <area> elements implicitly provides the same rel behavior as setting rel=\"noopener\" which does not set window.opener. See browser compatibility for support status."
				}
			}
		},
		{
			"name": "article",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article",
			"description": "The <article> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.",
			"categories": ["#flow", "#sectioning", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "article",
				"permittedRoles": ["application", "document", "feed", "main", "none", "presentation", "region"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "aside",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside",
			"description": "The <aside> HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.",
			"categories": ["#flow", "#sectioning", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "complementary",
				"permittedRoles": ["feed", "none", "note", "presentation", "region", "search"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "audio",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio",
			"description": "The <audio> HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "source"
					},
					{
						"zeroOrMore": "track"
					},
					{
						"transparent": ":not(audio, video, :has(audio, video))"
					}
				],
				"conditional": [
					{
						"condition": "[src]",
						"contents": [
							{
								"zeroOrMore": "track"
							},
							{
								"transparent": ":not(audio, video, :has(audio, video))"
							}
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["application"],
				"properties": {
					"global": true,
					"role": "application"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["src", "preload", "autoplay", "loop", "muted", "controls"],
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["crossorigin"]
			},
			"attributes": {
				"autoplay": {
					"description": "A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading. Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay."
				},
				"controls": {
					"description": "If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback."
				},
				"controlslist": {
					"description": "The controlslist attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified). The allowed values are nodownload, nofullscreen and noremoteplayback."
				},
				"crossorigin": {
					"description": "This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are: anonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted. use-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted. When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information."
				},
				"disableremoteplayback": {
					"description": "A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification for more information. In Safari, you can use x-webkit-airplay=\"deny\" as a fallback."
				},
				"loop": {
					"description": "A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio."
				},
				"muted": {
					"description": "A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false."
				},
				"preload": {
					"description": "This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values: none: Indicates that the audio should not be preloaded. metadata: Indicates that only audio metadata (e.g. length) is fetched. auto: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it. empty string: A synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata. Note: The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the audio for playback. The browser is not forced by the specification to follow the value of this attribute; it is a mere hint."
				},
				"src": {
					"description": "The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <source> element within the audio block to specify the audio to embed."
				}
			}
		},
		{
			"name": "b",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b",
			"description": "The <b> HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use <b> for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the <strong> element.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "base",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base",
			"description": "The <base> HTML element specifies the base URL to use for all relative URLs in a document. There can be only one <base> element in a document.",
			"categories": ["#metadata"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["href", "target"]
			},
			"attributes": {
				"href": {
					"type": "BaseURL"
				},
				"target": {
					"description": "A keyword or author-defined name of the default browsing context to show the results of navigation from <a>, <area>, or <form> elements without explicit target attributes. The following keywords have special meanings: _self (default): Show the result in the current browsing context. _blank: Show the result in a new, unnamed browsing context. _parent: Show the result in the parent browsing context of the current one, if the current page is inside a frame. If there is no parent, acts the same as _self. _top: Show the result in the topmost browsing context (the browsing context that is an ancestor of the current one and has no parent). If there is no parent, acts the same as _self."
				}
			}
		},
		{
			"name": "basefont",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The CSS fonts module defines font-related properties and how font resources are loaded. It lets you define the style of a font, such as its family, size and weight, and the glyph variants to use when multiple are available for a single character.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "bdi",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi",
			"description": "The <bdi> HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "bdo",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo",
			"description": "The <bdo> HTML element overrides the current directionality of text, so that the text within is rendered in a different direction.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"dir": {
					"description": "The direction in which text should be rendered in this element's contents. Possible values are: ltr: Indicates that the text should go in a left-to-right direction. rtl: Indicates that the text should go in a right-to-left direction."
				}
			}
		},
		{
			"name": "bgsound",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <audio> HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"autoplay": {
					"description": "A Boolean attribute: if specified, the audio will automatically begin playback as soon as it can do so, without waiting for the entire audio file to finish downloading. Note: Sites that automatically play audio (or videos with an audio track) can be an unpleasant experience for users, so should be avoided when possible. If you must offer autoplay functionality, you should make it opt-in (requiring a user to specifically enable it). However, this can be useful when creating media elements whose source will be set at a later time, under user control. See our autoplay guide for additional information about how to properly use autoplay."
				},
				"controls": {
					"description": "If this attribute is present, the browser will offer controls to allow the user to control audio playback, including volume, seeking, and pause/resume playback."
				},
				"controlslist": {
					"description": "The controlslist attribute, when specified, helps the browser select what controls to show for the audio element whenever the browser shows its own set of controls (that is, when the controls attribute is specified). The allowed values are nodownload, nofullscreen and noremoteplayback."
				},
				"crossorigin": {
					"description": "This enumerated attribute indicates whether to use CORS to fetch the related audio file. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are: anonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted. use-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted. When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information."
				},
				"disableremoteplayback": {
					"description": "A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). See this proposed specification for more information. In Safari, you can use x-webkit-airplay=\"deny\" as a fallback."
				},
				"loop": {
					"description": "A Boolean attribute: if specified, the audio player will automatically seek back to the start upon reaching the end of the audio."
				},
				"muted": {
					"description": "A Boolean attribute that indicates whether the audio will be initially silenced. Its default value is false."
				},
				"preload": {
					"description": "This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience. It may have one of the following values: none: Indicates that the audio should not be preloaded. metadata: Indicates that only audio metadata (e.g. length) is fetched. auto: Indicates that the whole audio file can be downloaded, even if the user is not expected to use it. empty string: A synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata. Note: The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the audio for playback. The browser is not forced by the specification to follow the value of this attribute; it is a mere hint."
				},
				"src": {
					"description": "The URL of the audio to embed. This is subject to HTTP access controls. This is optional; you may instead use the <source> element within the audio block to specify the audio to embed."
				}
			}
		},
		{
			"name": "big",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <big> HTML deprecated element renders the enclosed text at a font size one level larger than the surrounding text (medium becomes large, for example). The size is capped at the browser's maximum permitted font size.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "blink",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "blockquote",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote",
			"description": "The <blockquote> HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "blockquote",
				"permittedRoles": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"cite": {
					"type": "URL"
				}
			}
		},
		{
			"name": "body",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body",
			"description": "The <body> HTML element represents the content of an HTML document. There can be only one <body> element in a document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": false,
				"namingProhibited": true,
				"properties": {
					"global": true,
					"without": [
						{
							"name": "aria-hidden",
							"type": "must-not"
						}
					]
				},
				"1.1": {
					"implicitRole": false,
					"permittedRoles": false,
					"properties": {
						"global": true,
						"role": "document"
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"alink": {
					"description": "Color of text for hyperlinks when selected. Use the CSS color property in conjunction with the :active and :focus pseudo-classes instead.",
					"deprecated": true
				},
				"background": {
					"description": "URI of an image to use as a background. Use the CSS background-image property instead.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Background color for the document. Use the CSS background-color property instead.",
					"deprecated": true
				},
				"bottommargin": {
					"description": "The margin of the bottom of the body. Use the CSS margin-bottom property (or the logical margin-block-end property) instead.",
					"deprecated": true
				},
				"leftmargin": {
					"description": "The margin of the left of the body. Use the CSS margin-left property (or the logical margin-inline-start property) instead.",
					"deprecated": true
				},
				"link": {
					"description": "Color of text for unvisited hypertext links. Use the CSS color property in conjunction with the :link pseudo-class instead.",
					"deprecated": true
				},
				"onafterprint": {
					"type": "FunctionBody"
				},
				"onbeforeprint": {
					"type": "FunctionBody"
				},
				"onbeforeunload": {
					"type": "FunctionBody"
				},
				"onhashchange": {
					"type": "FunctionBody"
				},
				"onlanguagechange": {
					"type": "FunctionBody"
				},
				"onmessage": {
					"type": "FunctionBody"
				},
				"onmessageerror": {
					"type": "FunctionBody"
				},
				"onoffline": {
					"type": "FunctionBody"
				},
				"ononline": {
					"type": "FunctionBody"
				},
				"onpagehide": {
					"type": "FunctionBody"
				},
				"onpagereveal": {
					"type": "FunctionBody"
				},
				"onpageshow": {
					"type": "FunctionBody"
				},
				"onpageswap": {
					"type": "FunctionBody"
				},
				"onpopstate": {
					"type": "FunctionBody"
				},
				"onrejectionhandled": {
					"type": "FunctionBody"
				},
				"onstorage": {
					"type": "FunctionBody"
				},
				"onunhandledrejection": {
					"type": "FunctionBody"
				},
				"onunload": {
					"type": "FunctionBody"
				},
				"rightmargin": {
					"description": "The margin of the right of the body. Use the CSS margin-right property or the logical margin-inline-end property) instead.",
					"deprecated": true
				},
				"text": {
					"description": "Foreground color of text. Use the CSS color property instead.",
					"deprecated": true
				},
				"topmargin": {
					"description": "The margin of the top of the body. Use the CSS margin-top property (or the logical margin-block-start property) instead.",
					"deprecated": true
				},
				"vlink": {
					"description": "Color of text for visited hypertext links. Use the CSS color property in conjunction with the :visited pseudo-class instead.",
					"deprecated": true
				}
			}
		},
		{
			"name": "br",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br",
			"description": "The <br> HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["none", "presentation"],
				"properties": {
					"only": ["aria-hidden"]
				},
				"1.1": {
					"properties": {
						"global": true,
						"role": true
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"clear": {
					"description": "Indicates where to begin the next line after the break.",
					"deprecated": true
				}
			}
		},
		{
			"name": "button",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
			"description": "The <button> HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog.",
			"categories": ["#flow", "#phrasing", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing):not(:model(interactive), :has(:model(interactive)))"
					}
				]
			},
			"aria": {
				"implicitRole": "button",
				"permittedRoles": [
					"checkbox",
					"combobox",
					"link",
					"menuitem",
					"menuitemcheckbox",
					"menuitemradio",
					"option",
					"radio",
					"switch",
					"tab"
				],
				"1.1": {
					"permittedRoles": [
						"checkbox",
						"link",
						"menuitem",
						"menuitemcheckbox",
						"menuitemradio",
						"option",
						"radio",
						"switch",
						"tab"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": [
					"disabled",
					"form",
					"formaction",
					"formenctype",
					"formmethod",
					"formnovalidate",
					"formtarget",
					"name"
				],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"autofocus": {
					"description": "This Boolean attribute specifies that the button should have input focus when the page loads. Only one element in a document can have this attribute."
				},
				"command": {
					"type": [
						{
							"enum": ["toggle-popover", "show-popover", "hide-popover", "close", "show-modal"],
							"invalidValueDefault": "unknown",
							"missingValueDefault": "unknown"
						},
						"ValidCustomCommand"
					]
				},
				"commandfor": {
					"type": "DOMID"
				},
				"disabled": {
					"description": "This Boolean attribute prevents the user from interacting with the button: it cannot be pressed or focused."
				},
				"form": {
					"description": "The <form> element to associate the button with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <button> is associated with its ancestor <form> element, if any.) This attribute lets you associate <button> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element."
				},
				"formaction": {
					"description": "The URL that processes the information submitted by the button. Overrides the action attribute of the button's form owner. Does nothing if there is no form owner."
				},
				"formenctype": {
					"description": "If the button is a submit button (it's inside/associated with a <form> and doesn't have type=\"button\"), specifies how to encode the form data that is submitted. Possible values: application/x-www-form-urlencoded: The default if the attribute is not used. multipart/form-data: Used to submit <input> elements with their type attributes set to file. text/plain: Specified as a debugging aid; shouldn't be used for real form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner."
				},
				"formmethod": {
					"description": "If the button is a submit button (it's inside/associated with a <form> and doesn't have type=\"button\"), this attribute specifies the HTTP method used to submit the form. Possible values: post: The data from the form are included in the body of the HTTP request when sent to the server. Use when the form contains information that shouldn't be public, like login credentials. get: The form data are appended to the form's action URL, with a ? as a separator, and the resulting URL is sent to the server. Use this method when the form has no side effects, like search forms. dialog: This method is used to indicate that the button closes the dialog with which it is associated, and does not transmit the form data at all. If specified, this attribute overrides the method attribute of the button's form owner."
				},
				"formnovalidate": {
					"description": "If the button is a submit button, this Boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner. This attribute is also available on <input type=\"image\"> and <input type=\"submit\"> elements."
				},
				"formtarget": {
					"description": "If the button is a submit button, this attribute is an author-defined name or standardized, underscore-prefixed keyword indicating where to display the response from submitting the form. This is the name of, or keyword for, a browsing context (a tab, window, or <iframe>). If this attribute is specified, it overrides the target attribute of the button's form owner. The following keywords have special meanings: _self: Load the response into the same browsing context as the current one. This is the default if the attribute is not specified. _blank: Load the response into a new unnamed browsing context — usually a new tab or window, depending on the user's browser settings. _parent: Load the response into the parent browsing context of the current one. If there is no parent, this option behaves the same way as _self. _top: Load the response into the top-level browsing context (that is, the browsing context that is an ancestor of the current one, and has no parent). If there is no parent, this option behaves the same way as _self."
				},
				"name": {
					"description": "The name of the button, submitted as a pair with the button's value as part of the form data, when that button is used to submit the form."
				},
				"popovertarget": {
					"type": "DOMID"
				},
				"popovertargetaction": {
					"type": {
						"enum": ["toggle", "show", "hide"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "toggle",
						"missingValueDefault": "toggle"
					}
				},
				"type": {
					"type": {
						"enum": ["submit", "reset", "button"],
						"invalidValueDefault": "submit",
						"missingValueDefault": "submit"
					}
				},
				"value": {
					"type": "Any"
				}
			}
		},
		{
			"name": "canvas",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas",
			"description": "Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.",
			"categories": ["#flow", "#phrasing", "#embedded", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"transparent": ":not(:model(interactive), :has(:model(interactive)))"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["height", "width"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"height": {
					"defaultValue": "150"
				},
				"moz-opaque": {
					"description": "Lets the canvas know whether translucency will be a factor. If the canvas knows there's no translucency, painting performance can be optimized. This is only supported by Mozilla-based browsers; use the standardized canvas.getContext('2d', { alpha: false }) instead.",
					"deprecated": true,
					"nonStandard": true
				},
				"width": {
					"defaultValue": "300"
				}
			}
		},
		{
			"name": "caption",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption",
			"description": "The <caption> HTML element specifies the caption (or title) of a table, providing the table an accessible description.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "caption",
				"permittedRoles": false,
				"namingProhibited": true,
				"properties": {
					"global": true
				},
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies on which side of the table the caption should be displayed. The possible enumerated values are left, top, right, or bottom. Use the caption-side and text-align CSS properties instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "center",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <center> HTML element is a block-level element that displays its block-level or inline contents centered horizontally within its containing element. The container is usually, but isn't required to be, <body>.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "cite",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite",
			"description": "The <cite> HTML element is used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "code",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code",
			"description": "The <code> HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "code",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "col",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col",
			"description": "The <col> HTML element defines one or more columns in a column group represented by its parent <colgroup> element. The <col> element is only valid as a child of a <colgroup> element that has no span attribute defined.",
			"categories": [],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each column cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Note that this attribute overrides the specified align of its <colgroup> parent element. Use the text-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated. Note: Setting text-align on the <col> element has no effect as <col> has no descendants, and therefore no elements inherit from it. If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector. Set a to zero and b to the position of the column in the table, e.g. td:nth-of-type(2) { text-align: right; } to right-align the second column cells. If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each column cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of each column cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored, though it will still override the specified char of its <colgroup> parent element.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the column cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"span": {
					"type": {
						"type": "integer",
						"gt": 0,
						"lte": 1000,
						"clampable": true
					},
					"defaultValue": "1"
				},
				"valign": {
					"description": "Specifies the vertical alignment of each column cell. The possible enumerated values are baseline, bottom, middle, and top. Note that this attribute overrides the specified valign of its <colgroup> parent element. Use the vertical-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated. Note: Setting vertical-align on the <col> element has no effect as <col> has no descendants, and therefore no elements inherit from it. If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector. Set a to zero and b to the position of the column in the table, e.g. td:nth-of-type(2) { vertical-align: middle; } to center the second column cells vertically. If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.",
					"deprecated": true
				},
				"width": {
					"description": "Specifies a default width for each column. In addition to the standard pixel and percentage values, this attribute can take the special form 0*, which means that the width of each column spanned should be the minimum width necessary to hold the column's contents. Relative widths such as 5* can also be used. Note that this attribute overrides the specified width of its <colgroup> parent element. Use the width CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "colgroup",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup",
			"description": "The <colgroup> HTML element defines a group of columns within a table.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "col"
					}
				],
				"conditional": [
					{
						"condition": "[span]",
						"contents": false
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each column group cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Note that the descendant <col> elements may override this value using their own align attribute. Use the text-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated. Note: Setting text-align on the <colgroup> element has no effect as <td> and <th> elements are not descendants of the <colgroup> element, and therefore they do not inherit from it. If the table does not use a colspan attribute, use the td:nth-of-type(an+b) CSS selector per column, where a is the total number of the columns in the table and b is the ordinal position of the column in the table, e.g. td:nth-of-type(7n+2) { text-align: right; } to right-align the second column cells. If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each column group cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of each column group cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored, though it will still be used as the default value for the align of the <col> elements which are members of this column group.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the column group cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"span": {
					"type": {
						"type": "integer",
						"gt": 0,
						"lte": 1000,
						"clampable": true
					},
					"defaultValue": "1"
				},
				"valign": {
					"description": "Specifies the vertical alignment of each column group cell. The possible enumerated values are baseline, bottom, middle, and top. Note that the descendant <col> elements may override this value using their own valign attribute. Use the vertical-align CSS property on the <td> and <th> elements instead, as this attribute is deprecated. Note: Setting vertical-align on the <colgroup> element has no effect as <td> and <th> elements are not descendants of the <colgroup> element, and therefore they do not inherit from it. If the table does not use a colspan attribute, use the td:nth-of-type() CSS selector per column, e.g. td:nth-of-type(2) { vertical-align: middle; } to center the second column cells vertically. If the table does use a colspan attribute, the effect can be achieved by combining adequate CSS attribute selectors like [colspan=n], though this is not trivial.",
					"deprecated": true
				},
				"width": {
					"description": "Specifies a default width for each column in the current column group. In addition to the standard pixel and percentage values, this attribute can take the special form 0*, which means that the width of each column spanned should be the minimum width necessary to hold the column's contents. Relative widths such as 5* can also be used. Note that the descendant <col> elements may override this value using their own width attribute. Use the width CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "data",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data",
			"description": "The <data> HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the <time> element must be used.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"value": {
					"type": "Any",
					"required": true
				}
			}
		},
		{
			"name": "datalist",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist",
			"description": "The <datalist> HTML element contains a set of <option> elements that represent the permissible or recommended options available to choose from within other controls.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"oneOrMore": ":model(phrasing)"
								}
							],
							[
								{
									"zeroOrMore": ["option", ":model(script-supporting)"]
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": "listbox",
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "dd",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd",
			"description": "The <dd> HTML element provides the description, definition, or value for the preceding term (<dt>) in a description list (<dl>).",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "definition"
				},
				"1.1": {
					"implicitRole": "definition"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "del",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del",
			"description": "The <del> HTML element represents a range of text that has been deleted from a document. This can be used when rendering \"track changes\" or source code diff information, for example. The <ins> element can be used for the opposite purpose: to indicate text that has been added to the document.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"transparent": "*"
					}
				]
			},
			"aria": {
				"implicitRole": "deletion",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"cite": {
					"type": "URL"
				},
				"datetime": {
					"type": "DateTime"
				}
			}
		},
		{
			"name": "details",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details",
			"description": "The <details> HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an open state. A summary or label must be provided using the <summary> element.",
			"categories": ["#flow", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"require": "summary"
					},
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "group"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"name": {
					"type": "NoEmptyAny"
				},
				"open": {
					"type": "Boolean"
				}
			}
		},
		{
			"name": "dfn",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn",
			"description": "The <dfn> HTML element indicates a term to be defined. The <dfn> element should be used in a complete definition statement, where the full definition of the term can be one of the following:",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing):not(dfn, :has(dfn))"
					}
				]
			},
			"aria": {
				"implicitRole": "term",
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "dialog",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog",
			"description": "The <dialog> HTML element represents a modal or non-modal dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.",
			"categories": ["#flow"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "dialog",
				"permittedRoles": ["alertdialog"],
				"properties": {
					"global": true,
					"role": "dialog"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"closedby": {
					"type": {
						"enum": ["any", "closerequest", "none"],
						"invalidValueDefault": "auto",
						"missingValueDefault": "auto"
					}
				},
				"open": {
					"type": "Boolean"
				},
				"tabindex": {
					"noUse": true
				}
			}
		},
		{
			"name": "dir",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <dir> HTML element is used as a container for a directory of files and/or folders, potentially with styles and icons applied by the user agent. Do not use this obsolete element; instead, you should use the <ul> element for lists, including lists of files.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"compact": {
					"description": "This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent and it doesn't work in all browsers.",
					"deprecated": true
				}
			}
		},
		{
			"name": "div",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div",
			"description": "The <div> HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element).",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				],
				"conditional": [
					{
						"condition": "dl > div",
						"contents": [
							{
								"oneOrMore": [
									{
										"zeroOrMore": ":model(script-supporting)"
									},
									{
										"oneOrMore": "dt"
									},
									{
										"zeroOrMore": ":model(script-supporting)"
									},
									{
										"oneOrMore": "dd"
									},
									{
										"zeroOrMore": ":model(script-supporting)"
									}
								]
							}
						]
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"conditions": {
					"dl > div": {
						"permittedRoles": ["presentation", "none"]
					}
				},
				"1.1": {
					"implicitRole": false,
					"permittedRoles": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "dl",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl",
			"description": "The <dl> HTML element represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"oneOrMore": [
										{
											"zeroOrMore": ":model(script-supporting)"
										},
										{
											"oneOrMore": "dt"
										},
										{
											"zeroOrMore": ":model(script-supporting)"
										},
										{
											"oneOrMore": "dd"
										},
										{
											"zeroOrMore": ":model(script-supporting)"
										}
									]
								}
							],
							[
								{
									"zeroOrMore": ":model(script-supporting)"
								},
								{
									"oneOrMore": "div"
								},
								{
									"zeroOrMore": ":model(script-supporting)"
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["group", "list", "none", "presentation"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "dt",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt",
			"description": "The <dt> HTML element specifies a term in a description or definition list, and as such must be used inside a <dl> element. It is usually followed by a <dd> element; however, multiple <dt> elements in a row indicate several terms that are all defined by the immediate next <dd> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(header, footer, :model(sectioning), :model(heading), :has(header, footer, :model(sectioning), :model(heading)))"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["listitem"],
				"1.1": {
					"implicitRole": "term"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "em",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em",
			"description": "The <em> HTML element marks text that has stress emphasis. The <em> element can be nested, with each level of nesting indicating a greater degree of emphasis.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "emphasis",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "embed",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed",
			"description": "The <embed> HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["application", "document", "img", "none", "presentation"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["height", "width"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"height": {
					"description": "The displayed height of the resource, in CSS pixels. This must be an absolute value; percentages are not allowed."
				},
				"src": {
					"type": "URL",
					"required": "[itemprop]"
				},
				"type": {
					"type": "MIMEType"
				},
				"width": {
					"description": "The displayed width of the resource, in CSS pixels. This must be an absolute value; percentages are not allowed."
				}
			}
		},
		{
			"name": "fieldset",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset",
			"description": "The <fieldset> HTML element is used to group several controls as well as labels (<label>) within a web form.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"optional": "legend"
					},
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": ["radiogroup", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": ["disabled", "form", "name"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"disabled": {
					"description": "If this Boolean attribute is set, all form controls that are descendants of the <fieldset>, are disabled, meaning they are not editable and won't be submitted along with the <form>. They won't receive any browsing events, like mouse clicks or focus-related events. By default browsers display such controls grayed out. Note that form elements inside the <legend> element won't be disabled."
				},
				"form": {
					"description": "This attribute takes the value of the id attribute of a <form> element you want the <fieldset> to be part of, even if it is not inside the form. Please note that usage of this is confusing — if you want the <input> elements inside the <fieldset> to be associated with the form, you need to use the form attribute directly on those elements. You can check which elements are associated with a form via JavaScript, using HTMLFormElement.elements."
				},
				"name": {
					"description": "The name associated with the group. Note: The caption for the fieldset is given by the first <legend> element nested inside it."
				}
			}
		},
		{
			"name": "figcaption",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption",
			"description": "The <figcaption> HTML element represents a caption or legend describing the rest of the contents of its parent <figure> element, providing the <figure> an accessible description.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["group", "none", "presentation"],
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "figure",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure",
			"description": "The <figure> HTML element represents self-contained content, potentially with an optional caption, which is specified using the <figcaption> element. The figure, its caption, and its contents are referenced as a single unit.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"require": "figcaption"
								},
								{
									"oneOrMore": ":model(flow)"
								}
							],
							[
								{
									"oneOrMore": ":model(flow)"
								},
								{
									"require": "figcaption"
								}
							],
							[
								{
									"oneOrMore": ":model(flow)"
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": "figure",
				"permittedRoles": true,
				"conditions": {
					":has(figcaption)": {
						"permittedRoles": false
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "font",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <font> HTML element defines the font size, color and face for its content.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"color": {
					"description": "This attribute sets the text color using either a named color or a color specified in the hexadecimal #RRGGBB format.",
					"deprecated": true
				},
				"face": {
					"description": "This attribute contains a comma-separated list of one or more font names. The document text in the default style is rendered in the first font face that the client's browser supports. If no font listed is installed on the local system, the browser typically defaults to the proportional or fixed-width font for that system.",
					"deprecated": true
				},
				"size": {
					"description": "This attribute specifies the font size as either a numeric or relative value. Numeric values range from 1 to 7 with 1 being the smallest and 3 the default. It can be defined using a relative value, like +2 or -3, which sets it relative to 3, the default value.",
					"deprecated": true
				}
			}
		},
		{
			"name": "footer",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer",
			"description": "The <footer> HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A <footer> typically contains information about the author of the section, copyright data or links to related documents.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(header, footer, :has(header, footer))"
					}
				]
			},
			"aria": {
				"implicitRole": "contentinfo",
				"permittedRoles": ["group", "presentation", "none"],
				"conditions": {
					":has(article, aside, main, nav, section, [role=article], [role=complementary], [role=main], [role=navigation], [role=region])": {
						"implicitRole": "generic",
						"namingProhibited": true
					}
				},
				"1.1": {
					"implicitRole": "contentinfo",
					"conditions": {
						":has(article, aside, main, nav, section, [role=article], [role=complementary], [role=main], [role=navigation], [role=region])": {
							"implicitRole": false
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "form",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form",
			"description": "The <form> HTML element represents a document section containing interactive controls for submitting information.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(form, :has(form))"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"conditions": {
					":aria(has name)": {
						"implicitRole": "form"
					}
				},
				"permittedRoles": ["search", "none", "presentation"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"accept": {
					"description": "Comma-separated content types the server accepts. Note: This attribute has been deprecated and should not be used. Instead, use the accept attribute on <input type=file> elements.",
					"deprecated": true
				},
				"accept-charset": {
					"type": {
						"enum": ["utf-8"],
						"caseInsensitive": true
					}
				},
				"action": {
					"type": "URL"
				},
				"autocapitalize": {
					"description": "Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information."
				},
				"autocomplete": {
					"type": {
						"enum": ["on", "off"],
						"invalidValueDefault": "on",
						"missingValueDefault": "on"
					}
				},
				"enctype": {
					"type": {
						"enum": ["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"],
						"invalidValueDefault": "application/x-www-form-urlencoded",
						"missingValueDefault": "application/x-www-form-urlencoded"
					}
				},
				"method": {
					"type": {
						"enum": ["post", "get", "dialog"],
						"invalidValueDefault": "get",
						"missingValueDefault": "get"
					}
				},
				"name": {
					"type": "NoEmptyAny"
				},
				"novalidate": {
					"type": "Boolean"
				},
				"rel": {
					"type": {
						"token": {
							"enum": [
								"external",
								"help",
								"license",
								"next",
								"nofollow",
								"noopener",
								"noreferrer",
								"opener",
								"prev",
								"search"
							]
						},
						"unique": true,
						"separator": "space"
					}
				},
				"target": {
					"type": "NavigableTargetNameOrKeyword"
				}
			}
		},
		{
			"name": "frame",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <frame> HTML element defines a particular area in which another HTML document can be displayed. A frame should be used within a <frameset>.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"frameborder": {
					"description": "This attribute allows you to specify a frame's border.",
					"deprecated": true
				},
				"marginheight": {
					"description": "This attribute defines the height of the margin between frames.",
					"deprecated": true
				},
				"marginwidth": {
					"description": "This attribute defines the width of the margin between frames.",
					"deprecated": true
				},
				"name": {
					"description": "This attribute is used for labeling frames. Without labeling, every link will open in the frame that it's in – the closest parent frame. See the target attribute for more information.",
					"deprecated": true
				},
				"noresize": {
					"description": "This attribute prevents resizing of frames by users.",
					"deprecated": true
				},
				"scrolling": {
					"description": "This attribute defines the existence of a scrollbar. If this attribute is not used, the browser adds a scrollbar when necessary. There are two choices: \"yes\" for forcing a scrollbar even when it is not necessary and \"no\" for forcing no scrollbar even when it is necessary.",
					"deprecated": true
				},
				"src": {
					"description": "This attribute specifies the document that will be displayed by the frame.",
					"deprecated": true
				}
			}
		},
		{
			"name": "frameset",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <frameset> HTML element is used to contain <frame> elements.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"cols": {
					"description": "This attribute specifies the number and size of horizontal spaces in a frameset.",
					"deprecated": true
				},
				"rows": {
					"description": "This attribute specifies the number and size of vertical spaces in a frameset.",
					"deprecated": true
				}
			}
		},
		{
			"name": "h1",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h1",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "1"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "h2",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h2",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "2"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "h3",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h3",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "3"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "h4",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h4",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "4"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "h5",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h5",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "5"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "h6",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/h6",
			"description": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest. By default, all heading elements create a block-level box in the layout, starting on a new line and taking up the full width available in their containing block.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "heading",
				"implicitProperties": {
					"aria-level": "6"
				},
				"permittedRoles": ["tab", "presentation", "none"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "head",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head",
			"description": "The <head> HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets. There can be only one <head> element in an HTML document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ":model(metadata):not(title)"
					},
					{
						"require": "title"
					},
					{
						"zeroOrMore": ":model(metadata):not(title)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"profile": {
					"description": "The URIs of one or more metadata profiles, separated by white space.",
					"deprecated": true
				}
			}
		},
		{
			"name": "header",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header",
			"description": "The <header> HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(header, footer, :has(header, footer))"
					}
				]
			},
			"aria": {
				"implicitRole": "banner",
				"permittedRoles": ["group", "presentation", "none"],
				"conditions": {
					":has(article, aside, main, nav, section, [role=article], [role=complementary], [role=main], [role=navigation], [role=region])": {
						"implicitRole": "generic",
						"namingProhibited": true
					}
				},
				"1.1": {
					"implicitRole": "banner",
					"conditions": {
						":has(article, aside, main, nav, section, [role=article], [role=complementary], [role=main], [role=navigation], [role=region])": {
							"implicitRole": false
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "hgroup",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup",
			"description": "The <hgroup> HTML element represents a heading and related content. It groups a single <h1>–<h6> element with one or more <p>.",
			"categories": ["#flow", "#heading", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"zeroOrMore": "p"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"require": ["h1", "h2", "h3", "h4", "h5", "h6"]
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"zeroOrMore": "p"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "hr",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr",
			"description": "The <hr> HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.",
			"categories": ["#flow"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": "separator",
				"permittedRoles": ["presentation", "none"],
				"properties": {
					"global": true,
					"role": "separator"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Sets the alignment of the rule on the page. If no value is specified, the default value is left.",
					"deprecated": true,
					"nonStandard": true
				},
				"color": {
					"description": "Sets the color of the rule through color name or hexadecimal value.",
					"deprecated": true,
					"nonStandard": true
				},
				"noshade": {
					"description": "Sets the rule to have no shading.",
					"deprecated": true,
					"nonStandard": true
				},
				"size": {
					"description": "Sets the height, in pixels, of the rule.",
					"deprecated": true,
					"nonStandard": true
				},
				"width": {
					"description": "Sets the length of the rule on the page through a pixel or percentage value.",
					"deprecated": true,
					"nonStandard": true
				}
			}
		},
		{
			"name": "html",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html",
			"description": "The <html> HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element. There can be only one <html> element in a document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"require": "head"
					},
					{
						"require": "body"
					}
				]
			},
			"aria": {
				"implicitRole": "document",
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"version": {
					"description": "Specifies the version of the HTML Document Type Definition that governs the current document. This attribute is not needed, because it is redundant with the version information in the document type declaration.",
					"deprecated": true
				},
				"xmlns": {
					"description": "Specifies the XML Namespace of the document. Default value is \"http://www.w3.org/1999/xhtml\". This is required in documents parsed with XML parsers, and optional in text/html documents."
				}
			}
		},
		{
			"name": "i",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i",
			"description": "The <i> HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the <i> naming of this element.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "iframe",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe",
			"description": "The <iframe> HTML element represents a nested browsing context, embedding another HTML page into the current one.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["application", "document", "img", "none", "presentation"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["src", "height", "width"],
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["referrerpolicy", "loading", "fetchpriority"]
			},
			"attributes": {
				"align": {
					"description": "The alignment of this element with respect to the surrounding context.",
					"deprecated": true
				},
				"allow": {
					"type": "SerializedPermissionsPolicy"
				},
				"allowfullscreen": {
					"type": "Boolean"
				},
				"allowpaymentrequest": {
					"description": "Set to true if a cross-origin <iframe> should be allowed to invoke the Payment Request API. Note: This attribute is considered a legacy attribute and redefined as allow=\"payment\".",
					"deprecated": true,
					"nonStandard": true
				},
				"browsingtopics": {
					"description": "A boolean attribute that, if present, specifies that the selected topics for the current user should be sent with the request for the <iframe>'s source. See Using the Topics API for more details.",
					"experimental": true,
					"nonStandard": true
				},
				"credentialless": {
					"description": "Set to true to make the <iframe> credentialless, meaning that its content will be loaded in a new, ephemeral context. It doesn't have access to the network, cookies, and storage data associated with its origin. It uses a new context local to the top-level document lifetime. In return, the Cross-Origin-Embedder-Policy (COEP) embedding rules can be lifted, so documents with COEP set can embed third-party documents that do not. See IFrame credentialless for more details.",
					"experimental": true
				},
				"csp": {
					"description": "A Content Security Policy enforced for the embedded resource. See HTMLIFrameElement.csp for details.",
					"experimental": true
				},
				"frameborder": {
					"description": "The value 1 (the default) draws a border around this frame. The value 0 removes the border around this frame, but you should instead use the CSS property border to control <iframe> borders.",
					"deprecated": true
				},
				"height": {
					"description": "The height of the frame in CSS pixels. Default is 150."
				},
				"loading": {
					"description": "Indicates when the browser should load the iframe: eager Load the iframe immediately on page load (this is the default value). lazy Defer loading of the iframe until it reaches a calculated distance from the visual viewport, as defined by the browser. The intent is to avoid using the network and storage bandwidth required to fetch the frame until the browser is reasonably certain that it will be needed. This improves the performance and cost in most typical use cases, in particular by reducing initial page load times. Note: Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure."
				},
				"longdesc": {
					"description": "A URL of a long description of the frame's content. Due to widespread misuse, this is not helpful for non-visual browsers.",
					"deprecated": true
				},
				"marginheight": {
					"description": "The amount of space in pixels between the frame's content and its top and bottom borders.",
					"deprecated": true
				},
				"marginwidth": {
					"description": "The amount of space in pixels between the frame's content and its left and right borders.",
					"deprecated": true
				},
				"name": {
					"type": "NavigableTargetName"
				},
				"referrerpolicy": {
					"description": "Indicates which referrer to send when fetching the frame's resource: no-referrer The Referer header will not be sent. no-referrer-when-downgrade The Referer header will not be sent to origins without TLS (HTTPS). origin The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default) Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins."
				},
				"sandbox": {
					"type": {
						"token": {
							"enum": [
								"allow-forms",
								"allow-modals",
								"allow-orientation-lock",
								"allow-pointer-lock",
								"allow-popups",
								"allow-popups-to-escape-sandbox",
								"allow-presentation",
								"allow-same-origin",
								"allow-scripts",
								"allow-top-navigation",
								"allow-top-navigation-by-user-activation",
								"allow-downloads",
								"allow-custom-protocols-navigation"
							]
						},
						"caseInsensitive": true,
						"ordered": true,
						"unique": true,
						"separator": "space"
					}
				},
				"scrolling": {
					"description": "Indicates when the browser should provide a scrollbar for the frame: auto Only when the frame's content is larger than its dimensions. yes Always show a scrollbar. no Never show a scrollbar.",
					"deprecated": true
				},
				"src": {
					"required": "[itemprop]",
					"ineffective": "[srcdoc]"
				},
				"srcdoc": {
					"type": "Any"
				},
				"width": {
					"description": "The width of the frame in CSS pixels. Default is 300."
				}
			}
		},
		{
			"name": "img",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img",
			"description": "The <img> HTML element embeds an image into the document.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": "img",
				"permittedRoles": [
					"button",
					"checkbox",
					"link",
					"menuitem",
					"menuitemcheckbox",
					"menuitemradio",
					"option",
					"progressbar",
					"radio",
					"scrollbar",
					"separator",
					"slider",
					"switch",
					"tab",
					"treeitem"
				],
				"conditions": {
					"[alt=\"\"]": {
						"implicitRole": "presentation",
						"permittedRoles": false,
						"properties": {
							"only": [
								{
									"name": "aria-hidden",
									"value": "true"
								}
							]
						}
					},
					":not([alt]):aria(has no name)": {
						"implicitRole": "img",
						"permittedRoles": false,
						"properties": {
							"only": [
								{
									"name": "aria-hidden",
									"value": "true"
								}
							]
						}
					}
				},
				"1.1": {
					"permittedRoles": [
						"button",
						"checkbox",
						"link",
						"menuitem",
						"menuitemcheckbox",
						"menuitemradio",
						"option",
						"progressbar",
						"scrollbar",
						"separator",
						"slider",
						"switch",
						"tab",
						"treeitem"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["src", "height", "srcset", "sizes", "width"],
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["crossorigin", "referrerpolicy", "loading", "fetchpriority"]
			},
			"attributes": {
				"align": {
					"description": "Aligns the image with its surrounding context. Use the float and/or vertical-align CSS properties instead of this attribute. Allowed values: top Equivalent to vertical-align: top or vertical-align: text-top middle Equivalent to vertical-align: -moz-middle-with-baseline bottom The default, equivalent to vertical-align: unset or vertical-align: initial left Equivalent to float: left right Equivalent to float: right",
					"deprecated": true
				},
				"alt": {
					"type": "Any"
				},
				"attributionsrc": {
					"description": "specifies that you want the browser to send an Attribution-Reporting-Eligible header along with the image request. On the server-side this is used to trigger sending an Attribution-Reporting-Register-Source or Attribution-Reporting-Register-Trigger header in the response, to register an image-based attribution source or attribution trigger, respectively. Which response header should be sent back depends on the value of the Attribution-Reporting-Eligible header that triggered the registration. The corresponding source or trigger event is set off once the browser receives the response containing the image file. Note: See the Attribution Reporting API for more details. There are two versions of this attribute that you can set: Boolean, i.e. just the attributionsrc name. This specifies that you want the Attribution-Reporting-Eligible header sent to the same server as the src attribute points to. This is fine when you are handling the attribution source or trigger registration on the same server. When registering an attribution trigger this property is optional, and a boolean value will be used if it is omitted. Value containing one or more URLs, for example: html<img src=\"image-file.png\" alt=\"My image file description\" attributionsrc=\"https://a.example/register-source https://b.example/register-source\" /> This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of attributionsrc. When the resource request occurs the Attribution-Reporting-Eligible header will be sent to the URL(s) specified in attributionSrc in addition to the resource origin. These URLs can then respond with a Attribution-Reporting-Register-Source or Attribution-Reporting-Register-Trigger header as appropriate to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data.",
					"experimental": true
				},
				"border": {
					"description": "The width of a border around the image. Use the border CSS property instead.",
					"deprecated": true
				},
				"crossorigin": {
					"description": "Indicates if the fetching of the image must be done using a CORS request. Image data from a CORS-enabled image returned from a CORS request can be reused in the <canvas> element without being marked \"tainted\". If the crossorigin attribute is not specified, then a non-CORS request is sent (without the Origin request header), and the browser marks the image as tainted and restricts access to its image data, preventing its usage in <canvas> elements. If the crossorigin attribute is specified, then a CORS request is sent (with the Origin request header); but if the server does not opt into allowing cross-origin access to the image data by the origin site (by not sending any Access-Control-Allow-Origin response header, or by not including the site's origin in any Access-Control-Allow-Origin response header it does send), then the browser blocks the image from loading, and logs a CORS error to the devtools console. Allowed values: anonymous A CORS request is sent with credentials omitted (that is, no cookies, X.509 certificates, or Authorization request header). use-credentials The CORS request is sent with any credentials included (that is, cookies, X.509 certificates, and the Authorization request header). If the server does not opt into sharing credentials with the origin site (by sending back the Access-Control-Allow-Credentials: true response header), then the browser marks the image as tainted and restricts access to its image data. If the attribute has an invalid value, browsers handle it as if the anonymous value was used. See CORS settings attributes for additional information."
				},
				"decoding": {
					"type": {
						"enum": ["sync", "async", "auto"],
						"invalidValueDefault": "auto",
						"missingValueDefault": "auto"
					}
				},
				"elementtiming": {
					"description": "Marks the image for observation by the PerformanceElementTiming API. The value given becomes an identifier for the observed image element. See also the elementtiming attribute page."
				},
				"fetchpriority": {
					"description": "Provides a hint of the relative priority to use when fetching the image. Allowed values: high Fetch the image at a high priority relative to other images. low Fetch the image at a low priority relative to other images. auto Don't set a preference for the fetch priority. This is the default. It is used if no value or an invalid value is set. See HTMLImageElement.fetchPriority for more information."
				},
				"height": {
					"description": "The intrinsic height of the image, in pixels. Must be an integer without a unit. Note: Including height and width enables the aspect ratio of the image to be calculated by the browser prior to the image being loaded. This aspect ratio is used to reserve the space needed to display the image, reducing or even preventing a layout shift when the image is downloaded and painted to the screen. Reducing layout shift is a major component of good user experience and web performance."
				},
				"hspace": {
					"description": "The number of pixels of white space on the left and right of the image. Use the margin CSS property instead.",
					"deprecated": true
				},
				"ismap": {
					"type": "Boolean",
					"condition": "a[href] img"
				},
				"loading": {
					"description": "Indicates how the browser should load the image: eager Loads the image immediately, regardless of whether or not the image is currently within the visible viewport (this is the default value). lazy Defers loading the image until it reaches a calculated distance from the viewport, as defined by the browser. The intent is to avoid the network and storage bandwidth needed to handle the image until it's reasonably certain that it will be needed. This generally improves the performance of the content in most typical use cases. Note: Loading is only deferred when JavaScript is enabled. This is an anti-tracking measure, because if a user agent supported lazy loading when scripting is disabled, it would still be possible for a site to track a user's approximate scroll position throughout a session, by strategically placing images in a page's markup such that a server can track how many images are requested and when. Note: Images with loading set to lazy will never be loaded if they do not intersect a visible part of an element, even if loading them would change that as unloaded images have a width and height of 0. Putting width and height on lazy-loaded images fixes this issue and is a best practice, recommended by the specification. Doing so also helps prevent layout shifts."
				},
				"longdesc": {
					"description": "A link to a more detailed description of the image. Possible values are a URL or an element id. Note: This attribute is mentioned in the latest W3C version, HTML 5.2, but has been removed from the WHATWG's HTML Living Standard. It has an uncertain future; authors should use a WAI-ARIA alternative such as aria-describedby or aria-details.",
					"deprecated": true
				},
				"name": {
					"description": "A name for the element. Use the id attribute instead.",
					"deprecated": true
				},
				"referrerpolicy": {
					"description": "A string indicating which referrer to use when fetching the resource: no-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins."
				},
				"sizes": {
					"description": "One or more strings separated by commas, indicating a set of source sizes. Each source size consists of: A media condition. This must be omitted for the last item in the list. A source size value. Media Conditions describe properties of the viewport, not of the image. For example, (max-height: 500px) 1000px proposes to use a source of 1000px width, if the viewport is not higher than 500px. Because a source size descriptor is used to specify the width to use for the image during layout of the page, the media condition is typically (but not necessarily) based on the width information. Source size values specify the intended display size of the image. User agents use the current source size to select one of the sources supplied by the srcset attribute, when those sources are described using width (w) descriptors. The selected source size affects the intrinsic size of the image (the image's display size if no CSS styling is applied). If the srcset attribute is absent, or contains no values with a width descriptor, then the sizes attribute has no effect. A source size value can be any non-negative length. It must not use CSS functions other than the math functions. Units are interpreted in the same way as media queries, meaning that all relative length units are relative to the document root rather than the <img> element, so an em value is relative to the root font size, rather than the font size of the image. Percentage values are not allowed. Additionally, you can use the value auto to replace the whole list of sizes or the first entry in the list. It is only valid when combined with loading=\"lazy\", and resolves to the concrete size of the image."
				},
				"src": {
					"type": "URL",
					"required": true
				},
				"srcset": {
					"description": "One or more strings separated by commas, indicating possible image sources for the user agent to use. Each string is composed of: A URL to an image Optionally, whitespace followed by one of: A width descriptor (a positive integer directly followed by w). The width descriptor is divided by the source size given in the sizes attribute to calculate the effective pixel density. A pixel density descriptor (a positive floating point number directly followed by x). If no descriptor is specified, the source is assigned the default descriptor of 1x. It is incorrect to mix width descriptors and pixel density descriptors in the same srcset attribute. Duplicate descriptors (for instance, two sources in the same srcset which are both described with 2x) are also invalid. If the srcset attribute uses width descriptors, the sizes attribute must also be present, or the srcset itself will be ignored. The user agent selects any of the available sources at its discretion. This provides them with significant leeway to tailor their selection based on things like user preferences or bandwidth conditions. See our Responsive images tutorial for an example."
				},
				"usemap": {
					"type": "HashName",
					"condition": ":is(:not(a):not(button)) img"
				},
				"vspace": {
					"description": "The number of pixels of white space above and below the image. Use the margin CSS property instead.",
					"deprecated": true
				},
				"width": {
					"description": "The intrinsic width of the image in pixels. Must be an integer without a unit."
				}
			}
		},
		{
			"name": "input",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
			"description": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": "textbox",
				"permittedRoles": ["combobox", "searchbox", "spinbutton"],
				"conditions": {
					"[type='button' i]": {
						"implicitRole": "button",
						"permittedRoles": [
							"checkbox",
							"combobox",
							"link",
							"menuitem",
							"menuitemcheckbox",
							"menuitemradio",
							"option",
							"radio",
							"switch",
							"tab"
						]
					},
					"[type='checkbox' i]": {
						"implicitRole": "checkbox",
						"permittedRoles": ["menuitemcheckbox", "option", "switch"],
						"properties": {
							"global": true,
							"role": true,
							"without": [
								{
									"type": "must-not",
									"name": "aria-checked",
									"alt": {
										"method": "set-attr",
										"target": "checked"
									}
								}
							]
						}
					},
					"[type='checkbox' i][aria-pressed]": {
						"implicitRole": "checkbox",
						"permittedRoles": ["button"],
						"properties": {
							"global": true,
							"role": true,
							"without": [
								{
									"type": "must-not",
									"name": "aria-checked",
									"alt": {
										"method": "set-attr",
										"target": "checked"
									}
								}
							]
						}
					},
					"[type='color' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true
						}
					},
					"[type='date' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='datetime-local' i]": {
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='email' i]:not([list])": {
						"implicitRole": "textbox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='file' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true
						}
					},
					"[type='hidden' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": false
					},
					"[type='image' i]": {
						"implicitRole": "button",
						"permittedRoles": ["link", "menuitem", "menuitemcheckbox", "menuitemradio", "radio", "switch"]
					},
					"[type='month' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='number' i]": {
						"implicitRole": "spinbutton",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "spinbutton"
						}
					},
					"[type='password' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='radio' i]": {
						"implicitRole": "radio",
						"permittedRoles": ["menuitemradio"],
						"properties": {
							"global": true,
							"role": true,
							"without": [
								{
									"type": "must-not",
									"name": "aria-checked",
									"alt": {
										"method": "set-attr",
										"target": "checked"
									}
								}
							]
						}
					},
					"[type='range' i]": {
						"implicitRole": "slider",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "slider",
							"without": [
								{
									"type": "should-not",
									"name": "aria-valuemax"
								},
								{
									"type": "should-not",
									"name": "aria-valuemin"
								}
							]
						}
					},
					"[type='reset' i]": {
						"implicitRole": "button",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "button"
						}
					},
					"[type='search' i]:not([list])": {
						"implicitRole": "searchbox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "searchbox"
						}
					},
					"[type='submit' i]": {
						"implicitRole": "button",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "button"
						}
					},
					"[type='tel' i]:not([list])": {
						"implicitRole": "textbox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					":is(:not([type]), [type='text' i], [type='search' i], [type='tel' i], [type='url' i], [type='email' i])[list]": {
						"implicitRole": "combobox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "combobox",
							"without": [
								{
									"type": "should-not",
									"name": "aria-haspopup"
								}
							]
						}
					},
					"[type='time' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='url' i]:not([list])": {
						"implicitRole": "textbox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					},
					"[type='week' i]": {
						"implicitRole": false,
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "textbox"
						}
					}
				},
				"1.1": {
					"implicitRole": "textbox",
					"permittedRoles": ["combobox", "searchbox", "spinbutton"],
					"conditions": {
						"[type='button' i]": {
							"implicitRole": "button",
							"permittedRoles": [
								"link",
								"menuitem",
								"menuitemcheckbox",
								"menuitemradio",
								"option",
								"radio",
								"switch",
								"tab"
							]
						},
						"[type='checkbox' i]": {
							"implicitRole": "checkbox",
							"permittedRoles": ["menuitemcheckbox", "option", "switch"],
							"properties": {
								"global": true,
								"role": true,
								"without": [
									{
										"type": "should-not",
										"name": "aria-checked",
										"alt": {
											"method": "set-attr",
											"target": "checked"
										}
									}
								]
							}
						},
						"[type='checkbox' i][aria-pressed]": {
							"implicitRole": "checkbox",
							"permittedRoles": ["button"],
							"properties": {
								"global": true,
								"role": true,
								"without": [
									{
										"type": "should-not",
										"name": "aria-hecked"
									}
								]
							}
						},
						"[type='color' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true
							}
						},
						"[type='date' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='datetime-local' i]": {
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='email' i]:not([list])": {
							"implicitRole": "textbox",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='file' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true
							}
						},
						"[type='hidden' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": false
						},
						"[type='image' i]": {
							"implicitRole": "button",
							"permittedRoles": [
								"link",
								"menuitem",
								"menuitemcheckbox",
								"menuitemradio",
								"radio",
								"switch"
							]
						},
						"[type='month' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='number' i]": {
							"implicitRole": "spinbutton",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "spinbutton"
							}
						},
						"[type='password' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='radio' i]": {
							"implicitRole": "radio",
							"permittedRoles": ["menuitemradio"],
							"properties": {
								"global": true,
								"role": true,
								"without": [
									{
										"type": "should-not",
										"name": "aria-checked",
										"alt": {
											"method": "set-attr",
											"target": "checked"
										}
									}
								]
							}
						},
						"[type='range' i]": {
							"implicitRole": "slider",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "slider",
								"without": [
									{
										"type": "should-not",
										"name": "aria-valuemax"
									},
									{
										"type": "should-not",
										"name": "aria-valuemin"
									}
								]
							}
						},
						"[type='reset' i]": {
							"implicitRole": "button",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "button"
							}
						},
						"[type='search' i]:not([list])": {
							"implicitRole": "searchbox",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "searchbox"
							}
						},
						"[type='submit' i]": {
							"implicitRole": "button",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "button"
							}
						},
						"[type='tel' i]:not([list])": {
							"implicitRole": "textbox",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						":is(:not([type]), [type='text' i], [type='search' i], [type='tel' i], [type='url' i], [type='email' i])[list]": {
							"implicitRole": "combobox",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "combobox",
								"without": [
									{
										"type": "should-not",
										"name": "aria-haspopup"
									}
								]
							}
						},
						"[type='time' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='url' i]:not([list])": {
							"implicitRole": "textbox",
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						},
						"[type='week' i]": {
							"implicitRole": false,
							"permittedRoles": false,
							"properties": {
								"global": true,
								"role": "textbox"
							}
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["src", "height", "width"],
				"#HTMLFormControlElementAttrs": [
					"autocomplete",
					"dirname",
					"disabled",
					"form",
					"formaction",
					"formenctype",
					"formmethod",
					"formnovalidate",
					"formtarget",
					"name",
					"maxlength",
					"minlength",
					"readonly",
					"required"
				],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"accept": {
					"type": {
						"token": "Accept",
						"caseInsensitive": true,
						"unique": true,
						"separator": "comma"
					},
					"condition": "[type='file' i]"
				},
				"alpha": {
					"type": "Boolean",
					"condition": "[type='color' i]"
				},
				"alt": {
					"type": "Any",
					"condition": "[type='image' i]"
				},
				"autocapitalize": {
					"description": "Controls whether inputted text is automatically capitalized and, if so, in what manner. See the autocapitalize global attribute page for more information."
				},
				"autocomplete": {
					"condition": [
						":not([type])",
						"[type='hidden' i]",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]",
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='range' i]",
						"[type='color' i]"
					]
				},
				"autofocus": {
					"description": "A Boolean attribute which, if present, indicates that the input should automatically have focus when the page has finished loading (or when the <dialog> containing the element has been displayed). Note: An element with the autofocus attribute may gain focus before the DOMContentLoaded event is fired. No more than one element in the document may have the autofocus attribute. If put on more than one element, the first one with the attribute receives focus. The autofocus attribute cannot be used on inputs of type hidden, since hidden inputs cannot be focused. Warning: Automatically focusing a form control can confuse visually-impaired people using screen-reading technology and people with cognitive impairments. When autofocus is assigned, screen-readers \"teleport\" their user to the form control without warning them beforehand. Use careful consideration for accessibility when applying the autofocus attribute. Automatically focusing on a control can cause the page to scroll on load. The focus can also cause dynamic keyboards to display on some touch devices. While a screen reader will announce the label of the form control receiving focus, the screen reader will not announce anything before the label, and the sighted user on a small device will equally miss the context created by the preceding content."
				},
				"capture": {
					"description": "Introduced in the HTML Media Capture specification and valid for the file input type only, the capture attribute defines which media—microphone, video, or camera—should be used to capture a new file for upload with file upload control in supporting scenarios. See the file input type."
				},
				"checked": {
					"type": "Boolean",
					"condition": ["[type='checkbox' i]", "[type='radio' i]"]
				},
				"colorspace": {
					"type": {
						"enum": ["limited-srgb", "display-p3"],
						"invalidValueDefault": "limited-srgb",
						"missingValueDefault": "limited-srgb"
					},
					"condition": "[type='color' i]"
				},
				"dirname": {
					"condition": [
						":not([type])",
						"[type='hidden' i]",
						"[type='text' i]",
						"[type='search' i]",
						"[type='tel' i]",
						"[type='url' i]",
						"[type='email' i]",
						"[type='password' i]",
						"[type='submit' i]"
					]
				},
				"disabled": {
					"description": "A Boolean attribute which, if present, indicates that the user should not be able to interact with the input. Disabled inputs are typically rendered with a dimmer color or using some other form of indication that the field is not available for use. Specifically, disabled inputs do not receive the click event, and disabled inputs are not submitted with the form. Note: Although not required by the specification, Firefox will by default persist the dynamic disabled state of an <input> across page loads. Use the autocomplete attribute to control this feature."
				},
				"form": {
					"description": "A string specifying the <form> element with which the input is associated (that is, its form owner). This string's value, if present, must match the id of a <form> element in the same document. If this attribute isn't specified, the <input> element is associated with the nearest containing form, if any. The form attribute lets you place an input anywhere in the document but have it included with a form elsewhere in the document. Note: An input can only be associated with one form."
				},
				"formaction": {
					"description": "Valid for the image and submit input types only. See the submit input type for more information."
				},
				"formenctype": {
					"description": "Valid for the image and submit input types only. See the submit input type for more information."
				},
				"formmethod": {
					"description": "Valid for the image and submit input types only. See the submit input type for more information."
				},
				"formnovalidate": {
					"description": "Valid for the image and submit input types only. See the submit input type for more information."
				},
				"formtarget": {
					"description": "Valid for the image and submit input types only. See the submit input type for more information."
				},
				"height": {
					"condition": "[type='image' i]"
				},
				"id": {
					"description": "Global attribute valid for all elements, including all the input types, it defines a unique identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking. The value is used as the value of the <label>'s for attribute to link the label with the form control. See <label>."
				},
				"incremental": {
					"description": "The Boolean attribute incremental is a WebKit and Blink extension (so supported by Safari, Opera, Chrome, etc.) which, if present, tells the user agent to process the input as a live search. As the user edits the value of the field, the user agent sends search events to the HTMLInputElement object representing the search box. This allows your code to update the search results in real time as the user edits the search. If incremental is not specified, the search event is only sent when the user explicitly initiates a search (such as by pressing the Enter or Return key while editing the field). The search event is rate-limited so that it is not sent more frequently than an implementation-defined interval.",
					"nonStandard": true
				},
				"inputmode": {
					"description": "Global value valid for all elements, it provides a hint to browsers as to the type of virtual keyboard configuration to use when editing this element or its contents. Values include none, text, tel, url, email, numeric, decimal, and search."
				},
				"list": {
					"type": "DOMID",
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='range' i]",
						"[type='color' i]"
					]
				},
				"max": {
					"type": ["DateTime", "Number"],
					"condition": [
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='range' i]"
					]
				},
				"maxlength": {
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]"
					]
				},
				"min": {
					"type": ["DateTime", "Number"],
					"condition": [
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='range' i]"
					]
				},
				"minlength": {
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]"
					]
				},
				"multiple": {
					"type": "Boolean",
					"condition": ["[type='email' i]", "[type='file' i]"]
				},
				"name": {
					"description": "A string specifying a name for the input control. This name is submitted along with the control's value when the form data is submitted. Consider the name a required attribute (even though it's not). If an input has no name specified, or name is empty, the input's value is not submitted with the form! (Disabled controls, unchecked radio buttons, unchecked checkboxes, and reset buttons are also not sent.) There are two special cases: _charset_ : If used as the name of an <input> element of type hidden, the input's value is automatically set by the user agent to the character encoding being used to submit the form. isindex: For historical reasons, the name isindex is not allowed. The name attribute creates a unique behavior for radio buttons. Only one radio button in a same-named group of radio buttons can be checked at a time. Selecting any radio button in that group automatically deselects any currently-selected radio button in the same group. The value of that one checked radio button is sent along with the name if the form is submitted, When tabbing into a series of same-named group of radio buttons, if one is checked, that one will receive focus. If they aren't grouped together in source order, if one of the group is checked, tabbing into the group starts when the first one in the group is encountered, skipping all those that aren't checked. In other words, if one is checked, tabbing skips the unchecked radio buttons in the group. If none are checked, the radio button group receives focus when the first button in the same name group is reached. Once one of the radio buttons in a group has focus, using the arrow keys will navigate through all the radio buttons of the same name, even if the radio buttons are not grouped together in the source order. When an input element is given a name, that name becomes a property of the owning form element's HTMLFormElement.elements property. If you have an input whose name is set to guest and another whose name is hat-size, the following code can be used: jslet form = document.querySelector(\"form\"); let guestName = form.elements.guest; let hatSize = form.elements[\"hat-size\"]; When this code has run, guestName will be the HTMLInputElement for the guest field, and hatSize the object for the hat-size field. Warning: Avoid giving form elements a name that corresponds to a built-in property of the form, since you would then override the predefined property or method with this reference to the corresponding input."
				},
				"orient": {
					"description": "Similar to the -moz-orient non-standard CSS property impacting the <progress> and <meter> elements, the orient attribute defines the orientation of the range slider. Values include horizontal, meaning the range is rendered horizontally, and vertical, where the range is rendered vertically. See Creating vertical form controls for a modern approach to creating vertical form controls.",
					"nonStandard": true
				},
				"pattern": {
					"type": "Pattern",
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]"
					]
				},
				"placeholder": {
					"type": "OneLineAny",
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]",
						"[type='number' i]"
					]
				},
				"popovertarget": {
					"type": "DOMID",
					"condition": ["[type='button' i]", "[type='image' i]", "[type='reset' i]", "[type='submit' i]"]
				},
				"popovertargetaction": {
					"type": {
						"enum": ["toggle", "show", "hide"],
						"disallowToSurroundBySpaces": true,
						"invalidValueDefault": "toggle",
						"missingValueDefault": "toggle"
					},
					"condition": ["[type='button' i]", "[type='image' i]", "[type='reset' i]", "[type='submit' i]"]
				},
				"readonly": {
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]",
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]"
					]
				},
				"required": {
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]",
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='checkbox' i]",
						"[type='radio' i]",
						"[type='file' i]"
					]
				},
				"results": {
					"description": "The results attribute—supported only by Safari—is a numeric value that lets you override the maximum number of entries to be displayed in the <input> element's natively-provided drop-down menu of previous search queries. The value must be a non-negative decimal number. If not provided, or an invalid value is given, the browser's default maximum number of entries is used.",
					"nonStandard": true
				},
				"size": {
					"type": {
						"type": "integer",
						"gt": 0
					},
					"condition": [
						":not([type])",
						"[type='text' i]",
						"[type='search' i]",
						"[type='url' i]",
						"[type='tel' i]",
						"[type='email' i]",
						"[type='password' i]"
					],
					"defaultValue": "20"
				},
				"src": {
					"condition": "[type='image' i]"
				},
				"step": {
					"type": [
						"Number",
						{
							"enum": ["any"],
							"caseInsensitive": true
						}
					],
					"condition": [
						"[type='date' i]",
						"[type='month' i]",
						"[type='week' i]",
						"[type='time' i]",
						"[type='datetime-local' i]",
						"[type='number' i]",
						"[type='range' i]"
					]
				},
				"tabindex": {
					"description": "Global attribute valid for all elements, including all the input types, an integer attribute indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation. As all input types except for input of type hidden are focusable, this attribute should not be used on form controls, because doing so would require the management of the focus order for all elements within the document with the risk of harming usability and accessibility if done incorrectly."
				},
				"title": {
					"description": "Global attribute valid for all elements, including all input types, containing a text representing advisory information related to the element it belongs to. Such information can typically, but not necessarily, be presented to the user as a tooltip. The title should NOT be used as the primary explanation of the purpose of the form control. Instead, use the <label> element with a for attribute set to the form control's id attribute. See Labels below."
				},
				"type": {
					"type": {
						"enum": [
							"hidden",
							"text",
							"search",
							"tel",
							"url",
							"email",
							"password",
							"date",
							"month",
							"week",
							"time",
							"datetime-local",
							"number",
							"range",
							"color",
							"checkbox",
							"radio",
							"file",
							"submit",
							"image",
							"reset",
							"button"
						],
						"invalidValueDefault": "text",
						"missingValueDefault": "text"
					},
					"defaultValue": "text"
				},
				"value": {
					"type": "Any"
				},
				"webkitdirectory": {
					"description": "The Boolean webkitdirectory attribute, if present, indicates that only directories should be available to be selected by the user in the file picker interface. See HTMLInputElement.webkitdirectory for additional details and examples. Though originally implemented only for WebKit-based browsers, webkitdirectory is also usable in Microsoft Edge as well as Firefox 50 and later. However, even though it has relatively broad support, it is still not standard and should not be used unless you have no alternative.",
					"nonStandard": true
				},
				"width": {
					"condition": "[type='image' i]"
				}
			}
		},
		{
			"name": "ins",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins",
			"description": "The <ins> HTML element represents a range of text that has been added to a document. You can use the <del> element to similarly represent a range of text that has been deleted from the document.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"transparent": "*"
					}
				]
			},
			"aria": {
				"implicitRole": "insertion",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"cite": {
					"type": "URL"
				},
				"datetime": {
					"type": "DateTime"
				}
			}
		},
		{
			"name": "isindex",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "kbd",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd",
			"description": "The <kbd> HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a <kbd> element using its default monospace font, although this is not mandated by the HTML standard.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "keygen",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "label",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label",
			"description": "The <label> HTML element represents a caption for an item in a user interface.",
			"categories": ["#flow", "#phrasing", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing):not(label, :has(label))"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"for": {
					"type": "DOMID"
				}
			}
		},
		{
			"name": "legend",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend",
			"description": "The <legend> HTML element represents a caption for the content of its parent <fieldset>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(phrasing)", ":model(heading)"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "li",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li",
			"description": "The <li> HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "listitem",
				"permittedRoles": [
					"menuitem",
					"menuitemcheckbox",
					"menuitemradio",
					"option",
					"none",
					"presentation",
					"radio",
					"separator",
					"tab",
					"treeitem"
				]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"type": {
					"description": "This character attribute indicates the numbering type: a: lowercase letters A: uppercase letters i: lowercase Roman numerals I: uppercase Roman numerals 1: numbers This type overrides the one used by its parent <ol> element, if any. Note: This attribute has been deprecated; use the CSS list-style-type property instead.",
					"deprecated": true
				},
				"value": {
					"type": "Int",
					"condition": "ol > li"
				}
			}
		},
		{
			"name": "link",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link",
			"description": "The <link> HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \"favicon\" style icons and icons for the home screen and apps on mobile devices) among other things.",
			"categories": ["#metadata", "#flow", "#phrasing"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": [
					"crossorigin",
					"href",
					"hreflang",
					"type",
					"referrerpolicy",
					"integrity",
					"media",
					"fetchpriority"
				]
			},
			"attributes": {
				"as": {
					"type": {
						"enum": [
							"fetch",
							"audio",
							"audioworklet",
							"document",
							"embed",
							"font",
							"frame",
							"iframe",
							"image",
							"manifest",
							"object",
							"paintworklet",
							"report",
							"script",
							"serviceworker",
							"sharedworker",
							"style",
							"track",
							"video",
							"worker",
							"xslt"
						]
					},
					"condition": ["[rel='preload' i]", "[rel='modulepreload' i]"]
				},
				"blocking": {
					"type": {
						"token": {
							"enum": ["render"]
						},
						"separator": "space",
						"unique": true
					},
					"condition": "[rel~='stylesheet' i]"
				},
				"charset": {
					"description": "This attribute defines the character encoding of the linked resource. The value is a space- and/or comma-delimited list of character sets as defined in RFC 2045. The default value is iso-8859-1. Note: To produce the same effect as this obsolete attribute, use the Content-Type HTTP header on the linked resource.",
					"obsolete": true,
					"deprecated": true
				},
				"color": {
					"type": "<color>",
					"condition": "[rel~='mask-icon' i]"
				},
				"crossorigin": {
					"description": "This enumerated attribute indicates whether CORS must be used when fetching the resource. CORS-enabled images can be reused in the <canvas> element without being tainted. The allowed values are: anonymous A cross-origin request (i.e. with an Origin HTTP header) is performed, but no credential is sent (i.e. no cookie, X.509 certificate, or HTTP Basic authentication). If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin HTTP header) the resource will be tainted and its usage restricted. use-credentials A cross-origin request (i.e. with an Origin HTTP header) is performed along with a credential sent (i.e. a cookie, certificate, and/or HTTP Basic authentication is performed). If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials HTTP header), the resource will be tainted and its usage restricted. If the attribute is not present, the resource is fetched without a CORS request (i.e. without sending the Origin HTTP header), preventing its non-tainted usage. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information."
				},
				"disabled": {
					"type": "Boolean"
				},
				"fetchpriority": {
					"description": "Provides a hint of the relative priority to use when fetching a resource of a particular type. Allowed values: high Fetch the resource at a high priority relative to other resources of the same type. low Fetch the resource at a low priority relative to other resources of the same type. auto Don't set a preference for the fetch priority. This is the default. It is used if no value or an invalid value is set. See HTMLLinkElement.fetchPriority for more information."
				},
				"href": {
					"description": "This attribute specifies the URL of the linked resource. A URL can be absolute or relative."
				},
				"hreflang": {
					"description": "This attribute indicates the language of the linked resource. It is purely advisory. Allowed values are specified by RFC 5646: Tags for Identifying Languages (also known as BCP 47). Use this attribute only if the href attribute is present."
				},
				"imagesizes": {
					"type": "SourceSizeList",
					"condition": "[imagesrcset][rel~='preload' i][as='image' i]",
					"required": "[imagesrcset]"
				},
				"imagesrcset": {
					"type": "Srcset",
					"condition": "[imagesizes][rel~='preload' i][as='image' i]",
					"required": "[imagesizes]"
				},
				"integrity": {
					"condition": ["[rel~='stylesheet' i]", "[rel~='preload' i]", "[rel~='modulepreload' i]"]
				},
				"itemprop": {
					"requiredEither": ["rel"]
				},
				"media": {
					"description": "This attribute specifies the media that the linked resource applies to. Its value must be a media type / media query. This attribute is mainly useful when linking to external stylesheets — it allows the user agent to pick the best adapted one for the device it runs on."
				},
				"referrerpolicy": {
					"description": "A string indicating which referrer to use when fetching the resource: no-referrer means that the Referer header will not be sent. no-referrer-when-downgrade means that no Referer header will be sent when navigating to an origin without TLS (HTTPS). This is a user agent's default behavior, if no policy is otherwise specified. origin means that the referrer will be the origin of the page, which is roughly the scheme, the host, and the port. origin-when-cross-origin means that navigating to other origins will be limited to the scheme, the host, and the port, while navigating on the same origin will include the referrer's path. unsafe-url means that the referrer will include the origin and the path (but not the fragment, password, or username). This case is unsafe because it can leak origins and paths from TLS-protected resources to insecure origins."
				},
				"rel": {
					"type": [
						"Any",
						{
							"token": {
								"enum": [
									"alternate",
									"canonical",
									"author",
									"dns-prefetch",
									"expect",
									"help",
									"icon",
									"manifest",
									"modulepreload",
									"license",
									"next",
									"pingback",
									"preconnect",
									"prefetch",
									"preload",
									"prerender",
									"prev",
									"privacy-policy",
									"search",
									"stylesheet",
									"terms-of-service"
								]
							},
							"unique": true,
							"separator": "space"
						}
					],
					"requiredEither": ["itemprop"]
				},
				"rev": {
					"description": "The value of this attribute shows the relationship of the current document to the linked document, as defined by the href attribute. The attribute thus defines the reverse relationship compared to the value of the rel attribute. Link type values for the attribute are similar to the possible values for rel. Note: Instead of rev, you should use the rel attribute with the opposite link type value. For example, to establish the reverse link for made, specify author. Also, this attribute doesn't stand for \"revision\" and must not be used with a version number, even though many sites misuse it in this way.",
					"obsolete": true,
					"deprecated": true
				},
				"sizes": {
					"type": {
						"token": "IconSize",
						"caseInsensitive": true,
						"ordered": false,
						"unique": true,
						"separator": "space"
					},
					"condition": ["[rel~='icon' i]", "[rel~='apple-touch-icon' i]"]
				},
				"target": {
					"description": "Defines the frame or window name that has the defined linking relationship or that will show the rendering of any linked resource.",
					"deprecated": true
				},
				"title": {
					"description": "The title attribute has special semantics on the <link> element. When used on a <link rel=\"stylesheet\"> it defines a default or an alternate stylesheet."
				},
				"type": {
					"description": "This attribute is used to define the type of the content linked to. The value of the attribute should be a MIME type such as text/html, text/css, and so on. The common use of this attribute is to define the type of stylesheet being referenced (such as text/css), but given that CSS is the only stylesheet language used on the web, not only is it possible to omit the type attribute, but is actually now recommended practice. It is also used on rel=\"preload\" link types, to make sure the browser only downloads file types that it supports."
				}
			}
		},
		{
			"name": "listing",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "main",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main",
			"description": "The <main> HTML element represents the dominant content of the <body> of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "main",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "main"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "map",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map",
			"description": "The <map> HTML element is used with <area> elements to define an image map (a clickable link area).",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"transparent": "*"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"name": {
					"type": "NoEmptyAny"
				}
			}
		},
		{
			"name": "mark",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark",
			"description": "The <mark> HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "marquee",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <marquee> HTML element is used to insert a scrolling area of text. You can control what happens when the text reaches the edges of its content area using its attributes.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"behavior": {
					"description": "Sets how the text is scrolled within the marquee. Possible values are scroll, slide and alternate. If no value is specified, the default value is scroll.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Sets the background color through color name or hexadecimal value.",
					"deprecated": true
				},
				"direction": {
					"description": "Sets the direction of the scrolling within the marquee. Possible values are left, right, up and down. If no value is specified, the default value is left.",
					"deprecated": true
				},
				"height": {
					"description": "Sets the height in pixels or percentage value.",
					"deprecated": true
				},
				"hspace": {
					"description": "Sets the horizontal margin",
					"deprecated": true
				},
				"loop": {
					"description": "Sets the number of times the marquee will scroll. If no value is specified, the default value is −1, which means the marquee will scroll continuously.",
					"deprecated": true
				},
				"scrollamount": {
					"description": "Sets the amount of scrolling at each interval in pixels. The default value is 6.",
					"deprecated": true
				},
				"scrolldelay": {
					"description": "Sets the interval between each scroll movement in milliseconds. The default value is 85. Note that any value smaller than 60 is ignored and the value 60 is used instead unless truespeed is specified.",
					"deprecated": true
				},
				"truespeed": {
					"description": "By default, scrolldelay values lower than 60 are ignored. If truespeed is present, those values are not ignored.",
					"deprecated": true
				},
				"vspace": {
					"description": "Sets the vertical margin in pixels or percentage value.",
					"deprecated": true
				},
				"width": {
					"description": "Sets the width in pixels or percentage value.",
					"deprecated": true
				}
			}
		},
		{
			"name": "math",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/math",
			"description": "The <math> MathML element is the top-level MathML element, used to write a single mathematical formula. It can be placed in HTML content where flow content is permitted.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"implicitRole": "math",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "math"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true
			},
			"attributes": {
				"display": {
					"description": "This enumerated attribute specifies how the enclosed MathML markup should be rendered. It can have one of the following values: block, which means that this element will be displayed in its own block outside the current span of text and with math-style set to normal. inline, which means that this element will be displayed inside the current span of text and with math-style set to compact. If not present, its default value is inline."
				}
			}
		},
		{
			"name": "menu",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu",
			"description": "The <menu> HTML element is described in the HTML specification as a semantic alternative to <ul>, but treated by browsers (and exposed through the accessibility tree) as no different than <ul>. It represents an unordered list of items (which are represented by <li> elements).",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["li", ":model(script-supporting)"]
					}
				]
			},
			"aria": {
				"implicitRole": "list",
				"permittedRoles": [
					"group",
					"listbox",
					"menu",
					"menubar",
					"none",
					"presentation",
					"radiogroup",
					"tablist",
					"toolbar",
					"tree",
					{
						"name": "directory",
						"deprecated": true
					}
				],
				"1.1": {
					"permittedRoles": [
						"directory",
						"group",
						"listbox",
						"menu",
						"menubar",
						"none",
						"presentation",
						"radiogroup",
						"tablist",
						"toolbar",
						"tree"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "menuitem",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "This page lists all the HTML elements, which are created using tags.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "meta",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta",
			"description": "The <meta> HTML element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.",
			"categories": ["#metadata", "#flow", "#phrasing"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["media"]
			},
			"attributes": {
				"charset": {
					"type": {
						"enum": ["utf-8"],
						"caseInsensitive": true
					},
					"condition": [":not([itemprop])", ":not([name])", ":not([http-equiv])"]
				},
				"content": {
					"type": "Any",
					"required": ["[name]", "[http-equiv]", "[itemprop]"],
					"condition": ["[name]", "[http-equiv]", "[itemprop]"]
				},
				"http-equiv": {
					"type": {
						"enum": [
							"content-type",
							"default-style",
							"refresh",
							"x-ua-compatible",
							"content-security-policy"
						]
					},
					"requiredEither": ["itemprop", "name", "charset"],
					"condition": [":not([itemprop])", ":not([name])", ":not([charset])"]
				},
				"itemprop": {
					"requiredEither": ["name", "http-equiv", "charset"],
					"condition": [":not([name])", ":not([http-equiv])", ":not([charset])"]
				},
				"media": {
					"condition": "[name='theme-color']"
				},
				"name": {
					"type": "Any",
					"requiredEither": ["itemprop", "http-equiv", "charset"],
					"condition": [":not([itemprop])", ":not([http-equiv])", ":not([charset])"]
				}
			}
		},
		{
			"name": "meter",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter",
			"description": "The <meter> HTML element represents either a scalar value within a known range or a fractional value.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing):not(meter, :has(meter))"
					}
				]
			},
			"aria": {
				"implicitRole": "mater",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"without": [
						{
							"type": "should-not",
							"name": "aria-valuemax"
						},
						{
							"type": "should-not",
							"name": "aria-valuemin"
						}
					]
				},
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"form": {
					"description": "This optional attribute is used to explicitly set a <form> owner for the <meter> element. If omitted, the <meter> is associated with its ancestor <form> element or the form association set by the form attribute on another ancestor element, such as on a <fieldset>, if any. If included, the value must be the id of a <form> in the same tree."
				},
				"high": {
					"type": "Number"
				},
				"low": {
					"type": "Number"
				},
				"max": {
					"type": "Number"
				},
				"min": {
					"type": "Number"
				},
				"optimum": {
					"type": "Number"
				},
				"value": {
					"type": "Number"
				}
			}
		},
		{
			"name": "multicol",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "nav",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav",
			"description": "The <nav> HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.",
			"categories": ["#flow", "#sectioning", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "navigation",
				"permittedRoles": ["menu", "menubar", "none", "presentation", "tablist"],
				"1.1": {
					"permittedRoles": ["menu", "menubar", "tablist"]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "nextid",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "nobr",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <nobr> HTML element prevents the text it contains from automatically wrapping across multiple lines, potentially resulting in the user having to scroll horizontally to see the entire width of the text.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "noembed",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <noembed> HTML element is an obsolete, non-standard way to provide alternative, or \"fallback\", content for browsers that do not support the <embed> element or do not support the type of embedded content an author wishes to use. This element was deprecated in HTML 4.01 and above in favor of placing fallback content between the opening and closing tags of an <object> element.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "noframes",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <noframes> HTML element provides content to be presented in browsers that don't support (or have disabled support for) the <frame> element. Although most commonly-used browsers support frames, there are exceptions, including certain special-use browsers including some mobile browsers, as well as text-mode browsers.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "noscript",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript",
			"description": "The <noscript> HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.",
			"categories": ["#metadata", "#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"transparent": ":not(noscript)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "object",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object",
			"description": "The <object> HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["application", "document", "img"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["height", "width"],
				"#HTMLFormControlElementAttrs": ["form"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"archive": {
					"description": "A space-separated list of URIs for archives of resources for the object.",
					"deprecated": true
				},
				"border": {
					"description": "The width of a border around the control, in pixels.",
					"deprecated": true
				},
				"classid": {
					"description": "The URI of the object's implementation. It can be used together with, or in place of, the data attribute.",
					"deprecated": true
				},
				"codebase": {
					"description": "The base path used to resolve relative URIs specified by classid, data, or archive. If not specified, the default is the base URI of the current document.",
					"deprecated": true
				},
				"codetype": {
					"description": "The content type of the data specified by classid.",
					"deprecated": true
				},
				"data": {
					"type": "URL",
					"requiredEither": ["type"]
				},
				"declare": {
					"description": "The presence of this Boolean attribute makes this element a declaration only. The object must be instantiated by a subsequent <object> element. Repeat the <object> element completely each time the resource is reused.",
					"deprecated": true
				},
				"form": {
					"description": "The form element, if any, that the object element is associated with (its form owner). The value of the attribute must be an ID of a <form> element in the same document."
				},
				"height": {
					"description": "The height of the displayed resource, in CSS pixels. — (Absolute values only. NO percentages)"
				},
				"name": {
					"type": "NavigableTargetName"
				},
				"standby": {
					"description": "A message that the browser can show while loading the object's implementation and data.",
					"deprecated": true
				},
				"type": {
					"type": "MIMEType",
					"requiredEither": ["data"]
				},
				"usemap": {
					"description": "A hash-name reference to a <map> element; that is a '#' followed by the value of a name of a map element.",
					"deprecated": true
				},
				"width": {
					"description": "The width of the display resource, in CSS pixels. — (Absolute values only. NO percentages)"
				}
			}
		},
		{
			"name": "ol",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol",
			"description": "The <ol> HTML element represents an ordered list of items — typically rendered as a numbered list.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["li", ":model(script-supporting)"]
					}
				]
			},
			"aria": {
				"implicitRole": "list",
				"permittedRoles": [
					"group",
					"listbox",
					"menu",
					"menubar",
					"none",
					"presentation",
					"radiogroup",
					"tablist",
					"toolbar",
					"tree",
					{
						"name": "directory",
						"deprecated": true
					}
				],
				"1.1": {
					"permittedRoles": [
						"directory",
						"group",
						"listbox",
						"menu",
						"menubar",
						"none",
						"presentation",
						"radiogroup",
						"tablist",
						"toolbar",
						"tree"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"reversed": {
					"type": "Boolean"
				},
				"start": {
					"type": "Int"
				},
				"type": {
					"type": {
						"enum": ["1", "a", "A", "i", "I"],
						"caseInsensitive": false,
						"invalidValueDefault": "decimal",
						"missingValueDefault": "decimal"
					}
				}
			}
		},
		{
			"name": "optgroup",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup",
			"description": "The <optgroup> HTML element creates a grouping of options within a <select> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "option"
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "group"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": ["disabled"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"disabled": {
					"description": "If this Boolean attribute is set, none of the items in this option group is selectable. Often browsers grey out such control and it won't receive any browsing events, like mouse clicks or focus-related ones."
				},
				"label": {
					"type": "Any",
					"required": true
				}
			}
		},
		{
			"name": "option",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option",
			"description": "The <option> HTML element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"optional": "#text"
					}
				],
				"conditional": [
					{
						"condition": "[label][value]",
						"contents": false
					},
					{
						"condition": "label",
						"contents": [
							{
								"optional": "#text"
							}
						]
					},
					{
						"condition": "datalist > [label]",
						"contents": [
							{
								"optional": "#text"
							}
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false,
				"conditions": {
					":is(select, select > option, datalist) > option": {
						"implicitRole": "option",
						"properties": {
							"global": true,
							"role": "option",
							"without": [
								{
									"type": "should-not",
									"name": "aria-selected"
								}
							]
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": ["disabled"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"disabled": {
					"description": "If this Boolean attribute is set, this option is not checkable. Often browsers grey out such control and it won't receive any browsing event, like mouse clicks or focus-related ones. If this attribute is not set, the element can still be disabled if one of its ancestors is a disabled <optgroup> element."
				},
				"label": {
					"type": "Any"
				},
				"selected": {
					"type": "Boolean"
				},
				"value": {
					"type": "Any"
				}
			}
		},
		{
			"name": "output",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output",
			"description": "The <output> HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "status",
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": ["form", "name"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"for": {
					"type": {
						"token": "DOMID",
						"separator": "space",
						"unique": true,
						"caseInsensitive": true
					}
				},
				"form": {
					"description": "The <form> element to associate the output with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <output> is associated with its ancestor <form> element, if any.) This attribute lets you associate <output> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element. The <output> element's name and content are not submitted when the form is submitted."
				},
				"name": {
					"description": "The element's name. Used in the form.elements API."
				}
			}
		},
		{
			"name": "p",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p",
			"description": "The <p> HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "paragraph",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "param",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <param> HTML element defines parameters for an <object> element.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {
				"name": {
					"description": "Name of the parameter.",
					"deprecated": true
				},
				"type": {
					"description": "Only used if the valuetype is set to ref. Specifies the MIME type of values found at the URI specified by value.",
					"deprecated": true
				},
				"value": {
					"description": "Specifies the value of the parameter.",
					"deprecated": true
				},
				"valuetype": {
					"description": "Specifies the type of the value attribute. Possible values are: data: Default value. The value is passed to the object's implementation as a string. ref: The value is a URI to a resource where run-time values are stored. object: An ID of another <object> in the same document.",
					"deprecated": true
				}
			}
		},
		{
			"name": "picture",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture",
			"description": "The <picture> HTML element contains zero or more <source> elements and one <img> element to offer alternative versions of an image for different display/device scenarios.",
			"categories": ["#flow", "#phrasing", "#embedded"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"zeroOrMore": "source"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"require": "img"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": {
					"only": [
						{
							"name": "aria-hidden",
							"value": "true"
						}
					]
				},
				"1.1": {
					"properties": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "plaintext",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <plaintext> HTML element renders everything following the start tag as raw text, ignoring any following HTML. There is no closing tag, since everything after it is considered raw text.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "pre",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre",
			"description": "The <pre> HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced font.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"width": {
					"description": "Contains the preferred count of characters that a line should have. Though technically still implemented, this attribute has no visual effect; to achieve such an effect, use CSS width instead.",
					"deprecated": true,
					"nonStandard": true
				},
				"wrap": {
					"description": "Is a hint indicating how the overflow must happen. In modern browser this hint is ignored and no visual effect results in its present; to achieve such an effect, use CSS white-space instead.",
					"deprecated": true,
					"nonStandard": true
				}
			}
		},
		{
			"name": "progress",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress",
			"description": "The <progress> HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing):not(progress, :has(progress))"
					}
				]
			},
			"aria": {
				"implicitRole": "progressbar",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "progressbar",
					"without": [
						{
							"type": "should-not",
							"name": "aria-valuemax"
						}
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"max": {
					"type": "Number"
				},
				"value": {
					"type": "Number"
				}
			}
		},
		{
			"name": "q",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q",
			"description": "The <q> HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the <blockquote> element.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"cite": {
					"type": "URL"
				}
			}
		},
		{
			"name": "rb",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <rb> HTML element is used to delimit the base text component of a <ruby> annotation, i.e. the text that is being annotated. One <rb> element should wrap each separate atomic segment of the base text.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "rp",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp",
			"description": "The <rp> HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <ruby> element. One <rp> element should enclose each of the opening and closing parentheses that wrap the <rt> element that contains the annotation's text.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "rt",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt",
			"description": "The <rt> HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "rtc",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <rtc> HTML element embraces semantic annotations of characters presented in a ruby of <rb> elements used inside of <ruby> element. <rb> elements can have both pronunciation (<rt>) and semantic (<rtc>) annotations.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "ruby",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby",
			"description": "The <ruby> HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": [
							{
								"oneOrMore": [":model(phrasing):not(ruby, :has(ruby))", "ruby:not(:has(ruby))"]
							},
							{
								"choice": [
									[
										{
											"oneOrMore": "rt"
										}
									],
									[
										{
											"require": "rp"
										},
										{
											"oneOrMore": [
												{
													"require": "rt"
												},
												{
													"require": "rp"
												}
											]
										}
									]
								]
							}
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "s",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s",
			"description": "The <s> HTML element renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the <del> and <ins> elements, as appropriate.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "deletion",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "samp",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp",
			"description": "The <samp> HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console).",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "script",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script",
			"description": "The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.",
			"categories": ["#metadata", "#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["crossorigin", "referrerpolicy", "integrity", "fetchpriority"]
			},
			"attributes": {
				"async": {
					"type": "Boolean",
					"condition": ["[src]", "[type='module' i]"],
					"ineffective": ":not([src]):not([type='module' i])"
				},
				"attributionsrc": {
					"description": "Specifies that you want the browser to send an Attribution-Reporting-Eligible header along with the script resource request. On the server-side this is used to trigger sending an Attribution-Reporting-Register-Source or Attribution-Reporting-Register-Trigger header in the response, to register a JavaScript-based attribution source or attribution trigger, respectively. Which response header should be sent back depends on the value of the Attribution-Reporting-Eligible header that triggered the registration. Note: Alternatively, JavaScript-based attribution sources or triggers can be registered by sending a fetch() request containing the attributionReporting option (either set directly on the fetch() call or on a Request object passed into the fetch() call), or by sending an XMLHttpRequest with setAttributionReporting() invoked on the request object. There are two versions of this attribute that you can set: Boolean, i.e. just the attributionsrc name. This specifies that you want the Attribution-Reporting-Eligible header sent to the same server as the src attribute points to. This is fine when you are handling the attribution source or trigger registration on the same server. When registering an attribution trigger this property is optional, and an empty string value will be used if it is omitted. Value containing one or more URLs, for example: html<script src=\"myscript.js\" attributionsrc=\"https://a.example/register-source https://b.example/register-source\"></script> This is useful in cases where the requested resource is not on a server you control, or you just want to handle registering the attribution source on a different server. In this case, you can specify one or more URLs as the value of attributionsrc. When the resource request occurs the Attribution-Reporting-Eligible header will be sent to the URL(s) specified in attributionSrc in addition to the resource origin. These URLs can then respond with a Attribution-Reporting-Register-Source or Attribution-Reporting-Register-Trigger header as appropriate to complete registration. Note: Specifying multiple URLs means that multiple attribution sources can be registered on the same feature. You might for example have different campaigns that you are trying to measure the success of, which involve generating different reports on different data. See the Attribution Reporting API for more details.",
					"experimental": true
				},
				"blocking": {
					"type": {
						"token": {
							"enum": ["render"]
						},
						"separator": "space",
						"unique": true
					}
				},
				"charset": {
					"description": "If present, its value must be an ASCII case-insensitive match for utf-8. It's unnecessary to specify the charset attribute, because documents must use UTF-8, and the script element inherits its character encoding from the document.",
					"deprecated": true
				},
				"crossorigin": {
					"description": "Normal script elements pass minimal information to the window.onerror for scripts which do not pass the standard CORS checks. To allow error logging for sites which use a separate domain for static media, use this attribute. See CORS settings attributes for a more descriptive explanation of its valid arguments."
				},
				"defer": {
					"type": "Boolean",
					"condition": "[src]",
					"ineffective": ["[type='module' i]", ":not([src])", "[async]"]
				},
				"fetchpriority": {
					"description": "Provides a hint of the relative priority to use when fetching an external script. Allowed values: high Fetch the external script at a high priority relative to other external scripts. low Fetch the external script at a low priority relative to other external scripts. auto Don't set a preference for the fetch priority. This is the default. It is used if no value or an invalid value is set. See HTMLScriptElement.fetchPriority for more information."
				},
				"integrity": {
					"condition": "[src]"
				},
				"language": {
					"description": "Like the type attribute, this attribute identifies the scripting language in use. Unlike the type attribute, however, this attribute's possible values were never standardized. The type attribute should be used instead.",
					"deprecated": true,
					"nonStandard": true
				},
				"nomodule": {
					"type": "Boolean",
					"condition": ":not([type='module' i])"
				},
				"nonce": {
					"description": "A cryptographic nonce (number used once) to allow scripts in a script-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial."
				},
				"referrerpolicy": {
					"description": "Indicates which referrer to send when fetching the script, or resources fetched by the script: no-referrer: The Referer header will not be sent. no-referrer-when-downgrade: The Referer header will not be sent to origins without TLS (HTTPS). origin: The sent referrer will be limited to the origin of the referring page: its scheme, host, and port. origin-when-cross-origin: The referrer sent to other origins will be limited to the scheme, the host, and the port. Navigations on the same origin will still include the path. same-origin: A referrer will be sent for same origin, but cross-origin requests will contain no referrer information. strict-origin: Only send the origin of the document as the referrer when the protocol security level stays the same (HTTPS→HTTPS), but don't send it to a less secure destination (HTTPS→HTTP). strict-origin-when-cross-origin (default): Send a full URL when performing a same-origin request, only send the origin when the protocol security level stays the same (HTTPS→HTTPS), and send no header to a less secure destination (HTTPS→HTTP). unsafe-url: The referrer will include the origin and the path (but not the fragment, password, or username). This value is unsafe, because it leaks origins and paths from TLS-protected resources to insecure origins. Note: An empty string value (\"\") is both the default value, and a fallback value if referrerpolicy is not supported. If referrerpolicy is not explicitly specified on the <script> element, it will adopt a higher-level referrer policy, i.e. one set on the whole document or domain. If a higher-level policy is not available, the empty string is treated as being equivalent to strict-origin-when-cross-origin."
				},
				"src": {
					"type": "URL"
				},
				"type": {
					"type": [
						"MIMEType",
						{
							"enum": ["module", "importmap"],
							"caseInsensitive": true
						}
					]
				}
			}
		},
		{
			"name": "search",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search",
			"description": "The <search> HTML element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The <search> element semantically identifies the purpose of the element's contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": "search",
				"permittedRoles": ["form", "group", "none", "presentation", "region"]
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "section",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section",
			"description": "The <section> HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.",
			"categories": ["#flow", "#sectioning", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": [
					"alert",
					"alertdialog",
					"application",
					"banner",
					"complementary",
					"contentinfo",
					"dialog",
					"document",
					"feed",
					"group",
					"log",
					"main",
					"marquee",
					"navigation",
					"none",
					"note",
					"presentation",
					"search",
					"status",
					"tabpanel"
				],
				"conditions": {
					":aria(has name)": {
						"implicitRole": "region"
					}
				},
				"1.1": {
					"permittedRoles": [
						"alert",
						"alertdialog",
						"application",
						"banner",
						"complementary",
						"contentinfo",
						"dialog",
						"document",
						"feed",
						"log",
						"main",
						"marquee",
						"navigation",
						"none",
						"note",
						"presentation",
						"search",
						"status",
						"tabpanel"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "select",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select",
			"description": "The <select> HTML element represents a control that provides a menu of options.",
			"categories": ["#flow", "#phrasing", "#interactive"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["option", "optgroup", "hr", "#script-supporting"]
					}
				]
			},
			"aria": {
				"implicitRole": "combobox",
				"permittedRoles": ["menu"],
				"properties": {
					"global": true,
					"role": ["combobox", "menu"],
					"without": [
						{
							"type": "should-not",
							"name": "aria-multiselectable"
						}
					]
				},
				"conditions": {
					"[multiple], [size]:not([size=1])": {
						"implicitRole": "listbox",
						"permittedRoles": false,
						"properties": {
							"global": true,
							"role": "listbox",
							"without": [
								{
									"type": "should-not",
									"name": "aria-multiselectable"
								}
							]
						}
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": ["autocomplete", "disabled", "form", "name", "required"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"autocomplete": {
					"description": "A string providing a hint for a user agent's autocomplete feature. See The HTML autocomplete attribute for a complete list of values and details on how to use autocomplete."
				},
				"autofocus": {
					"description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form element in a document can have the autofocus attribute."
				},
				"disabled": {
					"description": "This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <fieldset>; if there is no containing element with the disabled attribute set, then the control is enabled."
				},
				"form": {
					"description": "The <form> element to associate the <select> with (its form owner). The value of this attribute must be the id of a <form> in the same document. (If this attribute is not set, the <select> is associated with its ancestor <form> element, if any.) This attribute lets you associate <select> elements to <form>s anywhere in the document, not just inside a <form>. It can also override an ancestor <form> element."
				},
				"multiple": {
					"type": "Boolean"
				},
				"name": {
					"description": "This attribute is used to specify the name of the control."
				},
				"required": {
					"description": "A Boolean attribute indicating that an option with a non-empty string value must be selected."
				},
				"size": {
					"type": {
						"type": "integer",
						"gt": 0
					}
				}
			}
		},
		{
			"name": "slot",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot",
			"description": "The <slot> HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"transparent": "*"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"name": {
					"type": "NoEmptyAny"
				}
			}
		},
		{
			"name": "small",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small",
			"description": "The <small> HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "source",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source",
			"description": "The <source> HTML element specifies one or more media resources for the <picture>, <audio>, and <video> elements. It is a void element, which means that it has no content and does not require a closing tag. This element is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats.",
			"categories": [],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": ["height", "srcset", "sizes", "width"],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"height": {
					"condition": "picture > source"
				},
				"media": {
					"type": "<media-query-list>"
				},
				"sizes": {
					"condition": "picture > source"
				},
				"src": {
					"type": "URL",
					"required": ":is(video, audio) > source",
					"condition": ":is(video, audio) > source"
				},
				"srcset": {
					"required": "picture > source",
					"condition": "picture > source"
				},
				"type": {
					"type": "MIMEType"
				},
				"width": {
					"condition": "picture > source"
				}
			}
		},
		{
			"name": "spacer",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "span",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span",
			"description": "The <span> HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. <span> is very much like a <div> element, but <div> is a block-level element whereas a <span> is an inline-level element.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "strike",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <strike> HTML element places a strikethrough (horizontal line) over text.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "strong",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong",
			"description": "The <strong> HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "strong",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "style",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style",
			"description": "The <style> HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the <style> element.",
			"categories": ["#metadata"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"blocking": {
					"type": {
						"token": {
							"enum": ["render"]
						},
						"separator": "space",
						"unique": true
					}
				},
				"media": {
					"type": "<media-query-list>"
				},
				"nonce": {
					"description": "A cryptographic nonce (number used once) used to allow inline styles in a style-src Content-Security-Policy. The server must generate a unique nonce value each time it transmits a policy. It is critical to provide a nonce that cannot be guessed as bypassing a resource's policy is otherwise trivial."
				},
				"title": {
					"description": "This attribute specifies alternative style sheet sets."
				},
				"type": {
					"description": "This attribute should not be provided: if it is, the only permitted values are the empty string or a case-insensitive match for text/css.",
					"deprecated": true
				}
			}
		},
		{
			"name": "sub",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub",
			"description": "The <sub> HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "subscript",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "summary",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary",
			"description": "The <summary> HTML element specifies a summary, caption, or legend for a <details> element's disclosure box. Clicking the <summary> element toggles the state of the parent <details> element open and closed.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"oneOrMore": ":model(phrasing)"
								}
							],
							[
								{
									"require": ":model(heading)"
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": "button",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "button"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "sup",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup",
			"description": "The <sup> HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "superscript",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "table",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table",
			"description": "The <table> HTML element represents tabular data—that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.",
			"categories": ["#flow"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"optional": "caption"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"zeroOrMore": "colgroup"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"optional": "thead"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"choice": [
							[
								{
									"zeroOrMore": "tbody"
								}
							],
							[
								{
									"oneOrMore": "tr"
								}
							]
						]
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					},
					{
						"optional": "tfoot"
					},
					{
						"zeroOrMore": ":model(script-supporting)"
					}
				]
			},
			"aria": {
				"implicitRole": "table",
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of the table within its parent element. The possible enumerated values are left, center, and right. Use the margin-inline-start and margin-inline-end CSS properties instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of the table. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"border": {
					"description": "Defines, as a non-negative integer value (in pixels), the size of the frame surrounding the table. If set to 0, the frame attribute is set to void. Use the border CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"cellpadding": {
					"description": "Defines the space between the content of a cell and its border. This attribute is obsolete: instead of using it, apply the padding CSS property to the <th> and <td> elements.",
					"deprecated": true
				},
				"cellspacing": {
					"description": "Defines the size of the space between two cells. This attribute is obsolete: instead of using it, set the border-spacing CSS property on the <table> element. Note that this has no effect if the <table> element's border-collapse CSS property is set to collapse.",
					"deprecated": true
				},
				"frame": {
					"description": "Defines which side of the frame surrounding the table must be displayed. The possible enumerated values are void, above, below, hsides, vsides, lhs, rhs, box and border. Use the border-style and border-width CSS properties instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"rules": {
					"description": "Defines where rules (borders) are displayed in the table. The possible enumerated values are none (default value), groups (<thead>, <tbody>, and <tfoot> elements), rows (horizontal lines), cols (vertical lines), and all (border around every cell). Use the border CSS property on the appropriate table-related elements, as well as on the <table> itself, instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"summary": {
					"description": "Defines an alternative text that summarizes the content of the table. Use the <caption> element instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"width": {
					"description": "Specifies the width of the table. Use the width CSS property instead, as this attribute is deprecated. Note: While no HTML specification includes height as a <table> attribute, some browsers support a non-standard interpretation of height. The unitless value sets a minimum absolute height in pixels. If set as a percent value, the minimum table height will be relative to the parent container's height. Use the min-height CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "tbody",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody",
			"description": "The <tbody> HTML element encapsulates a set of table rows (<tr> elements), indicating that they comprise the body of a table's (main) data.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "tr"
					}
				]
			},
			"aria": {
				"implicitRole": "rowgroup",
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each body cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each body cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Specifies the alignment of the content to a character of each body cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Specifies the number of characters to offset the body cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"valign": {
					"description": "Specifies the vertical alignment of each body cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "td",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td",
			"description": "The <td> HTML element defines a cell of a table that contains data and may be used as a child of the <tr> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"conditions": {
					"table:is(:not([role]), [role=table]) > :is(thead, tfoot, tbody) > tr > td, table:is(:not([role]), [role=table]) > tr > td": {
						"implicitRole": "cell"
					},
					"table:is([role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > td, table:is([role=grid], [role=treegrid]) > tr > td": {
						"implicitRole": "gridcell"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > td, table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > tr > td": {
						"permittedRoles": false
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLTableCellElementAttrs": ["colspan", "rowspan", "headers"]
			},
			"attributes": {
				"abbr": {
					"description": "Contains a short abbreviated description of the data cell's content. Some user-agents, such as speech readers, may present this description before the content itself. Put the abbreviated content inside the cell and place the (longer) description in the title attribute, as this attribute is deprecated. Or, preferably, include the content within the data cell, and use CSS to visually clip overflowing text.",
					"deprecated": true
				},
				"align": {
					"description": "Specifies the horizontal alignment of the data cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"axis": {
					"description": "Contains a list of space-separated strings, each corresponding to the id attribute of a group of cells that the data cell applies to.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of the data cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of the data cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the data cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"colspan": {
					"description": "Contains a non-negative integer value that indicates how many columns the data cell spans or extends. The default value is 1. User agents dismiss values higher than 1000 as incorrect, setting to the default value (1)."
				},
				"headers": {
					"description": "Contains a list of space-separated strings, each corresponding to the id attribute of the <th> elements that provide headings for this table cell."
				},
				"height": {
					"description": "Defines a recommended data cell height. Use the height CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"rowspan": {
					"description": "Contains a non-negative integer value that indicates for how many rows the data cell spans or extends. The default value is 1; if its value is set to 0, it extends until the end of the table grouping section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the cell belongs to. Values higher than 65534 are clipped to 65534."
				},
				"scope": {
					"description": "Defines the cells that the header (defined in the <th>) element relates to. The possible enumerated values are row, col, rowgroup, and colgroup. Only use this attribute with the <th> element to define the row or column for which it is a header, as this attribute is deprecated for the <td> element.",
					"deprecated": true
				},
				"valign": {
					"description": "Specifies the vertical alignment of the data cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"width": {
					"description": "Defines a recommended data cell width. Use the width CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "template",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template",
			"description": "The <template> HTML element serves as a mechanism for holding HTML fragments, which can either be used later via JavaScript or generated immediately into shadow DOM.",
			"categories": ["#metadata", "#flow", "#phrasing", "#script-supporting"],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"shadowrootclonable": {
					"type": "Boolean"
				},
				"shadowrootdelegatesfocus": {
					"type": "Boolean"
				},
				"shadowrootmode": {
					"type": {
						"enum": ["open", "closed"],
						"missingValueDefault": "none",
						"invalidValueDefault": "none"
					}
				},
				"shadowrootserializable": {
					"type": "Boolean"
				}
			}
		},
		{
			"name": "textarea",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea",
			"description": "The <textarea> HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form.",
			"categories": ["#flow", "#phrasing", "#interactive"],
			"contentModel": {
				"contents": [
					{
						"optional": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": "textbox",
				"permittedRoles": false,
				"properties": {
					"global": true,
					"role": "textbox"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLFormControlElementAttrs": [
					"autocomplete",
					"dirname",
					"disabled",
					"form",
					"maxlength",
					"minlength",
					"name",
					"readonly",
					"required"
				],
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"autocapitalize": {
					"description": "Controls whether inputted text is automatically capitalized and, if so, in what manner."
				},
				"autocomplete": {
					"description": "Controls whether entered text can be automatically completed by the browser. Possible values are: off: The user must explicitly enter a value into this field for every use, or the document provides its own auto-completion method; the browser does not automatically complete the entry. on: The browser can automatically complete the value based on values that the user has entered during previous uses. <token-list>: An ordered set of space-separated autofill detail tokens, optionally preceded by a sectioning token, a billing or shipping grouping token, and/or a token identifying the type of recipient. <textarea> elements that don't specify the autocomplete attribute inherit the autocomplete on or off status set on the <textarea>'s form owner. The form owner is either the <form> element that this <textarea> element is a descendant of or the form element whose id is specified by the form attribute of the input element. For more information, see the autocomplete attribute in <form>."
				},
				"autocorrect": {
					"description": "Controls whether automatic spelling correction and processing of text is enabled while the user is editing this textarea. Permitted values are: on Enable automatic spelling correction and text substitutions. off Disable automatic spelling correction and text substitutions."
				},
				"autofocus": {
					"description": "This Boolean attribute lets you specify that a form control should have input focus when the page loads. Only one form-associated element in a document can have this attribute specified."
				},
				"cols": {
					"type": {
						"type": "integer",
						"gt": 0
					},
					"defaultValue": "20"
				},
				"dirname": {
					"description": "This attribute is used to indicate the text directionality of the element contents. For more information, see the dirname attribute."
				},
				"disabled": {
					"description": "This Boolean attribute indicates that the user cannot interact with the control. If this attribute is not specified, the control inherits its setting from the containing element, for example <fieldset>; if there is no containing element when the disabled attribute is set, the control is enabled."
				},
				"form": {
					"description": "The form element that the <textarea> element is associated with (its \"form owner\"). The value of the attribute must be the id of a form element in the same document. If this attribute is not specified, the <textarea> element must be a descendant of a form element. This attribute enables you to place <textarea> elements anywhere within a document, not just as descendants of form elements."
				},
				"maxlength": {
					"description": "The maximum string length (measured in UTF-16 code units) that the user can enter. If this value isn't specified, the user can enter an unlimited number of characters."
				},
				"minlength": {
					"description": "The minimum string length (measured in UTF-16 code units) required that the user should enter."
				},
				"name": {
					"description": "The name of the control."
				},
				"placeholder": {
					"type": "Any"
				},
				"readonly": {
					"description": "This Boolean attribute indicates that the user cannot modify the value of the control. Unlike the disabled attribute, the readonly attribute does not prevent the user from clicking or selecting in the control. The value of a read-only control is still submitted with the form."
				},
				"required": {
					"description": "This attribute specifies that the user must fill in a value before submitting a form."
				},
				"rows": {
					"type": {
						"type": "integer",
						"gt": 0
					},
					"defaultValue": "2"
				},
				"spellcheck": {
					"description": "Specifies whether the <textarea> is subject to spell-checking by the underlying browser/OS. The value can be: true: Indicates that the element needs to have its spelling and grammar checked. default : Indicates that the element is to act according to a default behavior, possibly based on the parent element's own spellcheck value. false : Indicates that the element should not be spell-checked."
				},
				"wrap": {
					"type": {
						"enum": ["soft", "hard"],
						"missingValueDefault": "soft",
						"invalidValueDefault": "soft"
					}
				}
			}
		},
		{
			"name": "tfoot",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot",
			"description": "The <tfoot> HTML element encapsulates a set of table rows (<tr> elements), indicating that they comprise the foot of a table with information about the table's columns. This is usually a summary of the columns, e.g., a sum of the given numbers in a column.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "tr"
					}
				]
			},
			"aria": {
				"implicitRole": "rowgroup",
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each foot cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each foot cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of each foot cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the foot cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"valign": {
					"description": "Specifies the vertical alignment of each foot cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "th",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th",
			"description": "The <th> HTML element defines a cell as the header of a group of table cells and may be used as a child of the <tr> element. The exact nature of this group is defined by the scope and headers attributes.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(flow):not(header, footer, :model(sectioning), :model(heading), :has(header, footer, :model(sectioning), :model(heading)))"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"conditions": {
					"table:is(:not([role]), [role=table]) > :is(thead, tfoot, tbody) > tr > th, table:is(:not([role]), [role=table]) > tr > th": {
						"implicitRole": "cell"
					},
					"table:is([role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > th, table:is([role=grid], [role=treegrid]) > tr > th": {
						"implicitRole": "gridcell"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > thead > tr > th:not([scope])": {
						"implicitRole": "columnheader"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(tfoot, tbody) > tr > th:not([scope]), table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > tr > th:not([scope])": {
						"implicitRole": "rowheader"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > th[scope=col], table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > tr > th[scope=col]": {
						"implicitRole": "columnheader"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > th[scope=row], table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > tr > th[scope=row]": {
						"implicitRole": "rowheader"
					},
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr > th, table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > tr > th": {
						"permittedRoles": false
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLTableCellElementAttrs": ["colspan", "rowspan", "headers"]
			},
			"attributes": {
				"abbr": {
					"type": "Any"
				},
				"align": {
					"description": "Specifies the horizontal alignment of the header cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"axis": {
					"description": "Contains a list of space-separated strings, each corresponding to the id attribute of a group of cells that the header cell applies to. Use the scope attribute instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of the header cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of the header cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the header cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"colspan": {
					"description": "A non-negative integer value indicating how many columns the header cell spans or extends. The default value is 1. User agents dismiss values higher than 1000 as incorrect, defaulting such values to 1."
				},
				"headers": {
					"description": "A list of space-separated strings corresponding to the id attributes of the <th> elements that provide the headers for this header cell."
				},
				"height": {
					"description": "Defines a recommended header cell height. Use the height CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"rowspan": {
					"description": "A non-negative integer value indicating how many rows the header cell spans or extends. The default value is 1; if its value is set to 0, the header cell will extends to the end of the table grouping section (<thead>, <tbody>, <tfoot>, even if implicitly defined), that the <th> belongs to. Values higher than 65534 are clipped at 65534."
				},
				"scope": {
					"type": {
						"enum": ["row", "col", "rowgroup", "colgroup"],
						"missingValueDefault": "auto",
						"invalidValueDefault": "auto"
					}
				},
				"valign": {
					"description": "Specifies the vertical alignment of the header cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"width": {
					"description": "Defines a recommended header cell width. Use the width CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "thead",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead",
			"description": "The <thead> HTML element encapsulates a set of table rows (<tr> elements), indicating that they comprise the head of a table with information about the table's columns. This is usually in the form of column headers (<th> elements).",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "tr"
					}
				]
			},
			"aria": {
				"implicitRole": "rowgroup",
				"permittedRoles": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each head cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and the offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each head cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Does nothing. It was originally intended to specify the alignment of the content to a character of each head cell. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Does nothing. It was originally intended to specify the number of characters to offset the head cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"valign": {
					"description": "Specifies the vertical alignment of each head cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "time",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time",
			"description": "The <time> HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "time",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"datetime": {
					"type": "DateTime"
				}
			}
		},
		{
			"name": "title",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title",
			"description": "The <title> HTML element defines the document's title that is shown in a browser's title bar or a page's tab. It only contains text; tags within the element are ignored.",
			"categories": ["#metadata"],
			"contentModel": {
				"contents": [
					{
						"require": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "tr",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr",
			"description": "The <tr> HTML element defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["th", "td", ":model(script-supporting)"]
					}
				]
			},
			"aria": {
				"implicitRole": "row",
				"permittedRoles": true,
				"conditions": {
					"table:is(:not([role]), [role=table], [role=grid], [role=treegrid]) > :is(thead, tfoot, tbody) > tr": {
						"permittedRoles": false
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"align": {
					"description": "Specifies the horizontal alignment of each row cell. The possible enumerated values are left, center, right, justify, and char. When supported, the char value aligns the textual content on the character defined in the char attribute and on offset defined by the charoff attribute. Use the text-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"bgcolor": {
					"description": "Defines the background color of each row cell. The value is an HTML color; either a 6-digit hexadecimal RGB code, prefixed by a #, or a color keyword. Other CSS <color> values are not supported. Use the background-color CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				},
				"char": {
					"description": "Specifies the alignment of the content to a character of each row cell. Typical values for this include a period (.) when attempting to align numbers or monetary values. If align is not set to char, this attribute is ignored.",
					"deprecated": true
				},
				"charoff": {
					"description": "Specifies the number of characters to offset the row cell content from the alignment character specified by the char attribute.",
					"deprecated": true
				},
				"valign": {
					"description": "Specifies the vertical alignment of each row cell. The possible enumerated values are baseline, bottom, middle, and top. Use the vertical-align CSS property instead, as this attribute is deprecated.",
					"deprecated": true
				}
			}
		},
		{
			"name": "track",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track",
			"description": "The <track> HTML element is used as a child of the media elements, <audio> and <video>. Each track element lets you specify a timed text track (or time-based data) that can be displayed in parallel with the media element, for example to overlay subtitles or closed captions on top of a video or alongside audio tracks.",
			"categories": [],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"default": {
					"type": "Boolean"
				},
				"kind": {
					"type": {
						"enum": ["subtitles", "captions", "descriptions", "chapters", "metadata"],
						"missingValueDefault": "metadata",
						"invalidValueDefault": "metadata"
					}
				},
				"label": {
					"type": "NoEmptyAny"
				},
				"src": {
					"type": "URL",
					"required": true
				},
				"srclang": {
					"type": "BCP47"
				}
			}
		},
		{
			"name": "tt",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <tt> HTML element creates inline text which is presented using the user agent's default monospace font face. This element was created for the purpose of rendering text as it would be displayed on a fixed-width display such as a teletype, text-only screen, or line printer.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "u",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u",
			"description": "The <u> HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a single solid underline, but may be altered using CSS.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": "generic",
				"permittedRoles": true,
				"namingProhibited": true,
				"1.1": {
					"implicitRole": false
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "ul",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul",
			"description": "The <ul> HTML element represents an unordered list of items, typically rendered as a bulleted list.",
			"categories": ["#flow", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["li", ":model(script-supporting)"]
					}
				]
			},
			"aria": {
				"implicitRole": "list",
				"permittedRoles": [
					"group",
					"listbox",
					"menu",
					"menubar",
					"none",
					"presentation",
					"radiogroup",
					"tablist",
					"toolbar",
					"tree",
					{
						"name": "directory",
						"deprecated": true
					}
				],
				"1.1": {
					"permittedRoles": [
						"directory",
						"group",
						"listbox",
						"menu",
						"menubar",
						"none",
						"presentation",
						"radiogroup",
						"tablist",
						"toolbar",
						"tree"
					]
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {
				"compact": {
					"description": "This Boolean attribute hints that the list should be rendered in a compact style. The interpretation of this attribute depends on the user agent, and it doesn't work in all browsers. Warning: Do not use this attribute, as it has been deprecated: use CSS instead. To give a similar effect as the compact attribute, the CSS property line-height can be used with a value of 80%.",
					"deprecated": true
				},
				"type": {
					"description": "This attribute sets the bullet style for the list. The values defined under HTML3.2 and the transitional version of HTML 4.0/4.01 are: circle disc square A fourth bullet type has been defined in the WebTV interface, but not all browsers support it: triangle. If not present and if no CSS list-style-type property applies to the element, the user agent selects a bullet type depending on the nesting level of the list. Warning: Do not use this attribute, as it has been deprecated; use the CSS list-style-type property instead.",
					"deprecated": true
				}
			}
		},
		{
			"name": "var",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var",
			"description": "The <var> HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent.",
			"categories": ["#flow", "#phrasing", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"oneOrMore": ":model(phrasing)"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": true,
				"namingProhibited": true
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "video",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video",
			"description": "The <video> HTML element embeds a media player which supports video playback into the document. You can use <video> for audio content as well, but the <audio> element may provide a more appropriate user experience.",
			"categories": ["#flow", "#phrasing", "#embedded", "#interactive", "#palpable"],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "source"
					},
					{
						"zeroOrMore": "track"
					},
					{
						"transparent": ":not(audio, video, :has(audio, video))"
					}
				],
				"conditional": [
					{
						"condition": "[src]",
						"contents": [
							{
								"zeroOrMore": "track"
							},
							{
								"transparent": ":not(audio, video, :has(audio, video))"
							}
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["application"],
				"properties": {
					"global": true,
					"role": "application"
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLEmbededAndMediaContentAttrs": [
					"src",
					"preload",
					"autoplay",
					"loop",
					"muted",
					"controls",
					"height",
					"width"
				],
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": ["crossorigin"]
			},
			"attributes": {
				"autoplay": {
					"description": "A Boolean attribute; if specified, the video automatically begins to play back as soon as it can without stopping to finish loading the data. Note: Modern browsers block audio (or videos with an unmuted audio track) from autoplaying, as sites that automatically play audio can be an unpleasant experience for users. See our autoplay guide for additional information about how to properly use autoplay. To disable video autoplay, autoplay=\"false\" will not work; the video will autoplay if the attribute is there in the <video> tag at all. To remove autoplay, the attribute needs to be removed altogether."
				},
				"controls": {
					"description": "If this attribute is present, the browser will offer controls to allow the user to control video playback, including volume, seeking, and pause/resume playback."
				},
				"controlslist": {
					"type": {
						"token": {
							"enum": ["nodownload", "nofullscreen", "noremoteplayback"]
						},
						"ordered": false,
						"caseInsensitive": true,
						"unique": true,
						"separator": "space"
					}
				},
				"crossorigin": {
					"description": "This enumerated attribute indicates whether to use CORS to fetch the related video. CORS-enabled resources can be reused in the <canvas> element without being tainted. The allowed values are: anonymous Sends a cross-origin request without a credential. In other words, it sends the Origin: HTTP header without a cookie, X.509 certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (by not setting the Access-Control-Allow-Origin: HTTP header), the resource will be tainted, and its usage restricted. use-credentials Sends a cross-origin request with a credential. In other words, it sends the Origin: HTTP header with a cookie, a certificate, or performing HTTP Basic authentication. If the server does not give credentials to the origin site (through Access-Control-Allow-Credentials: HTTP header), the resource will be tainted and its usage restricted. When not present, the resource is fetched without a CORS request (i.e. without sending the Origin: HTTP header), preventing its non-tainted use in <canvas> elements. If invalid, it is handled as if the enumerated keyword anonymous was used. See CORS settings attributes for additional information."
				},
				"disablepictureinpicture": {
					"description": "Prevents the browser from suggesting a Picture-in-Picture context menu or to request Picture-in-Picture automatically in some cases."
				},
				"disableremoteplayback": {
					"description": "A Boolean attribute used to disable the capability of remote playback in devices that are attached using wired (HDMI, DVI, etc.) and wireless technologies (Miracast, Chromecast, DLNA, AirPlay, etc.). In Safari, you can use x-webkit-airplay=\"deny\" as a fallback."
				},
				"height": {
					"description": "The height of the video's display area, in CSS pixels (absolute values only; no percentages)."
				},
				"loop": {
					"description": "A Boolean attribute; if specified, the browser will automatically seek back to the start upon reaching the end of the video."
				},
				"muted": {
					"description": "A Boolean attribute that indicates the default audio mute setting contained in the video. If set, the audio will be initially silenced. Its default value is false, meaning the audio will be played when the video is played."
				},
				"playsinline": {
					"type": "Boolean"
				},
				"poster": {
					"type": "URL"
				},
				"preload": {
					"description": "This enumerated attribute is intended to provide a hint to the browser about what the author thinks will lead to the best user experience regarding what content is loaded before the video is played. It may have one of the following values: none: Indicates that the video should not be preloaded. metadata: Indicates that only video metadata (e.g. length) is fetched. auto: Indicates that the whole video file can be downloaded, even if the user is not expected to use it. empty string: A synonym of the auto value. The default value is different for each browser. The spec advises it to be set to metadata. Note: The autoplay attribute has precedence over preload. If autoplay is specified, the browser would obviously need to start downloading the video for playback. The specification does not force the browser to follow the value of this attribute; it is a mere hint."
				},
				"src": {
					"description": "The URL of the video to embed. This is optional; you may instead use the <source> element within the video block to specify the video to embed."
				},
				"width": {
					"description": "The width of the video's display area, in CSS pixels (absolute values only; no percentages)."
				}
			}
		},
		{
			"name": "wbr",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr",
			"description": "The <wbr> HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.",
			"categories": ["#flow", "#phrasing"],
			"contentModel": {
				"contents": false
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": ["none", "presentation"],
				"properties": {
					"only": ["aria-hidden"]
				},
				"1.1": {
					"permittedRoles": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true
			},
			"attributes": {}
		},
		{
			"name": "xmp",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <xmp> HTML element renders text between the start and end tags without interpreting the HTML in between and using a monospaced font. The HTML2 specification recommended that it should be rendered wide enough to allow 80 characters per line.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "svg:a",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a",
			"description": "The <a> SVG element creates a hyperlink to other web pages, files, locations in the same page, email addresses, or any other URL. It is very similar to HTML's <a> element.",
			"categories": [],
			"contentModel": {
				"conditional": [
					{
						"condition": "svg|switch > svg|a",
						"contents": [
							{
								"transparent": "*"
							}
						]
					}
				],
				"contents": [
					{
						"transparent": "*, :model(SVGDescriptive):not(svg|a, :has(svg|a))"
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				},
				"conditions": {
					"[href], [xlink|href]": {
						"implicitRole": "link"
					}
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#HTMLLinkAndFetchingAttrs": [
					"href",
					"target",
					"download",
					"ping",
					"rel",
					"hreflang",
					"type",
					"referrerpolicy"
				],
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"download": {
					"description": "Instructs browsers to download a URL instead of navigating to it, so the user will be prompted to save it as a local file. Value type: <string> ; Default value: none; Animatable: no"
				},
				"href": {
					"description": "The URL or URL fragment the hyperlink points to. Value type: <URL> ; Default value: none; Animatable: yes"
				},
				"hreflang": {
					"description": "The human language of the URL or URL fragment that the hyperlink points to. Value type: <string> ; Default value: none; Animatable: no"
				},
				"ping": {
					"description": "A space-separated list of URLs to which, when the hyperlink is followed, POST requests with the body PING will be sent by the browser (in the background). Typically used for tracking. For a more widely-supported feature addressing the same use cases, see Navigator.sendBeacon(). Value type: <list-of-URLs> ; Default value: none; Animatable: no",
					"experimental": true
				},
				"referrerpolicy": {
					"description": "Which referrer to send when fetching the URL. Value type: no-referrer|no-referrer-when-downgrade|same-origin|origin|strict-origin|origin-when-cross-origin|strict-origin-when-cross-origin|unsafe-url ; Default value: none; Animatable: no"
				},
				"rel": {
					"description": "The relationship of the target object to the link object. Value type: <list-of-Link-Types> ; Default value: none; Animatable: no"
				},
				"target": {
					"description": "Where to display the linked URL. Value type: _self|_parent|_top|_blank|<XML-Name> ; Default value: _self; Animatable: yes"
				},
				"type": {
					"description": "A MIME type for the linked URL. Value type: <string> ; Default value: none; Animatable: no"
				},
				"xlink:href": {
					"description": "The URL or URL fragment that the hyperlink points to. May be required for backwards compatibility for older browsers. Value type: <URL> ; Default value: none; Animatable: yes",
					"deprecated": true
				}
			}
		},
		{
			"name": "svg:animate",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animate",
			"description": "The <animate> SVG element provides a way to animate an attribute of an element over time.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGAnimationAdditionAttrs": ["additive", "accumulate"],
				"#SVGAnimationAttributeTargetAttrs": ["attributeName"],
				"#SVGAnimationEventAttrs": ["onbegin", "onend", "onrepeat"],
				"#SVGAnimationTargetElementAttrs": ["href"],
				"#SVGAnimationTimingAttrs": [
					"begin",
					"dur",
					"end",
					"min",
					"max",
					"restart",
					"repeatCount",
					"repeatDur",
					"fill"
				],
				"#SVGAnimationValueAttrs": ["calcMode", "values", "keyTimes", "keySplines", "from", "to", "by"],
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:animateMotion",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateMotion",
			"description": "The <animateMotion> SVG element provides a way to define how an element moves along a motion path.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"oneOrMore": [":model(SVGDescriptive)", "svg|script"]
								},
								{
									"optional": "svg|mpath"
								}
							],
							[
								{
									"optional": "svg|mpath"
								},
								{
									"oneOrMore": [":model(SVGDescriptive)", "svg|script"]
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGAnimationAdditionAttrs": ["additive", "accumulate"],
				"#SVGAnimationEventAttrs": ["onbegin", "onend", "onrepeat"],
				"#SVGAnimationTargetElementAttrs": ["href"],
				"#SVGAnimationTimingAttrs": [
					"begin",
					"dur",
					"end",
					"min",
					"max",
					"restart",
					"repeatCount",
					"repeatDur",
					"fill"
				],
				"#SVGAnimationValueAttrs": ["calcMode", "values", "keyTimes", "keySplines", "from", "to", "by"],
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"keyPoints": {
					"type": "<key-points>"
				},
				"origin": {
					"type": "<origin>",
					"defaultValue": "default"
				},
				"path": {
					"type": "<svg-path>"
				},
				"rotate": {
					"type": "<rotate>"
				}
			}
		},
		{
			"name": "svg:animateTransform",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/animateTransform",
			"description": "The <animateTransform> SVG element animates a transformation attribute on its target element, thereby allowing animations to control translation, scaling, rotation, and/or skewing.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGAnimationAdditionAttrs": ["additive", "accumulate"],
				"#SVGAnimationAttributeTargetAttrs": ["attributeName"],
				"#SVGAnimationEventAttrs": ["onbegin", "onend", "onrepeat"],
				"#SVGAnimationTargetElementAttrs": ["href"],
				"#SVGAnimationTimingAttrs": [
					"begin",
					"dur",
					"end",
					"min",
					"max",
					"restart",
					"repeatCount",
					"repeatDur",
					"fill"
				],
				"#SVGAnimationValueAttrs": ["calcMode", "values", "keyTimes", "keySplines", "from", "to", "by"],
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"type": {
					"type": {
						"enum": ["translate", "scale", "rotate", "skewX", "skewY"]
					},
					"defaultValue": "translate"
				}
			}
		},
		{
			"name": "svg:circle",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/circle",
			"description": "The <circle> SVG element is an SVG basic shape, used to draw circles based on a center point and a radius.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false,
				"properties": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"cx",
					"cy",
					"r",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"cx": {
					"description": "The x-axis coordinate of the center of the circle. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"cy": {
					"description": "The y-axis coordinate of the center of the circle. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"r": {
					"description": "The radius of the circle. A value lower or equal to zero disables rendering of the circle. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:clipPath",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/clipPath",
			"description": "The <clipPath> SVG element defines a clipping path, to be used by the clip-path property.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGShape)",
							"svg|text",
							"svg|use",
							"svg|script"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGConditionalProcessingAttrs": ["requiredFeatures", "requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-profile",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"opacity",
					"overflow",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-rendering",
					"unicode-bidi",
					"visibility",
					"word-spacing",
					"writing-mode",
					"transform"
				]
			},
			"attributes": {
				"clipPathUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "userSpaceOnUse",
					"animatable": true
				},
				"externalResourcesRequired": {
					"type": {
						"enum": ["true", "false"]
					},
					"defaultValue": "true"
				}
			}
		},
		{
			"name": "svg:cursor",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <cursor> SVG element can be used to define a platform-independent custom cursor. A recommended approach for defining a platform-independent custom cursor is to create a PNG image and define a cursor element that references the PNG image and identifies the exact position within the image which is the pointer position (i.e., the hot spot).",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "svg:defs",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/defs",
			"description": "The <defs> SVG element is used to store graphical objects that will be used at a later time. Objects created inside a <defs> element are not rendered directly. To display them you have to reference them (with a <use> element for example).",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:desc",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/desc",
			"description": "The <desc> SVG element provides an accessible, long-text description of any SVG container element or graphics element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"require": [":model(SVGDescriptive)", ":model(SVGNeverRendered)", "#text"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {}
		},
		{
			"name": "svg:discard",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/discard",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"require": [":model(SVGDescriptive)", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"begin": {
					"type": "<begin-value-list>",
					"defaultValue": "0s"
				},
				"href": {
					"type": "URL"
				}
			}
		},
		{
			"name": "svg:ellipse",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/ellipse",
			"description": "The <ellipse> SVG element is an SVG basic shape, used to create ellipses based on a center coordinate, and both their x and y radius.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"cx",
					"cy",
					"rx",
					"ry",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"cx": {
					"description": "The x position of the center of the ellipse. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"cy": {
					"description": "The y position of the center of the ellipse. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"rx": {
					"description": "The radius of the ellipse on the x axis. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"ry": {
					"description": "The radius of the ellipse on the y axis. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:feBlend",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feBlend",
			"description": "The <feBlend> SVG filter primitive composes two objects together ruled by a certain blending mode. This is similar to what is known from image editing software when blending two layers. The mode is defined by the mode attribute.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"in2": {
					"type": [
						{
							"enum": [
								"SourceGraphic",
								"SourceAlpha",
								"BackgroundImage",
								"BackgroundAlpha",
								"FillPaint",
								"StrokePaint"
							],
							"disallowToSurroundBySpaces": false
						},
						"<custom-ident>"
					],
					"animatable": true
				},
				"mode": {
					"type": "<blend-mode>",
					"defaultValue": "normal",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feColorMatrix",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feColorMatrix",
			"description": "The <feColorMatrix> SVG filter element changes colors based on a transformation matrix. Every pixel's color value [R,G,B,A] is matrix multiplied by a 5 by 5 color matrix to create new color [R',G',B',A'].",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"type": {
					"type": {
						"enum": ["matrix", "saturate", "hueRotate", "luminanceToAlpha"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "matrix",
					"animatable": true
				},
				"values": {
					"type": "<color-matrix>"
				}
			}
		},
		{
			"name": "svg:feComponentTransfer",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComponentTransfer",
			"description": "The <feComponentTransfer> SVG filter primitive performs color-component-wise remapping of data for each pixel. It allows operations like brightness adjustment, contrast adjustment, color balance or thresholding.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGDescriptive)",
							"svg|feFuncA",
							"svg|feFuncR",
							"svg|feFuncB",
							"svg|feFuncG",
							"svg|script"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feComposite",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feComposite",
			"description": "The <feComposite> SVG filter primitive performs the combination of two input images pixel-wise in image space using one of the Porter-Duff compositing operations: over, in, atop, out, xor, lighter, or arithmetic.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"in2": {
					"type": [
						{
							"enum": [
								"SourceGraphic",
								"SourceAlpha",
								"BackgroundImage",
								"BackgroundAlpha",
								"FillPaint",
								"StrokePaint"
							],
							"disallowToSurroundBySpaces": false
						},
						"<custom-ident>"
					],
					"animatable": true
				},
				"k1": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true,
					"ineffective": ":not([operator='arithmetic' i])"
				},
				"k2": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true,
					"ineffective": ":not([operator='arithmetic' i])"
				},
				"k3": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true,
					"ineffective": ":not([operator='arithmetic' i])"
				},
				"k4": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true,
					"ineffective": ":not([operator='arithmetic' i])"
				},
				"operator": {
					"type": {
						"enum": ["over", "in", "out", "atop", "xor", "lighter", "arithmetic"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "over",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feConvolveMatrix",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feConvolveMatrix",
			"description": "The <feConvolveMatrix> SVG filter primitive applies a matrix convolution filter effect. A convolution combines pixels in the input image with neighboring pixels to produce a resulting image. A wide variety of imaging operations can be achieved through convolutions, including blurring, edge detection, sharpening, embossing and beveling.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"bias": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"divisor": {
					"type": "<number>",
					"animatable": true
				},
				"edgeMode": {
					"type": {
						"enum": ["duplicate", "wrap", "none"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "duplicate",
					"animatable": true
				},
				"kernelMatrix": {
					"type": "<list-of-numbers>",
					"animatable": true
				},
				"kernelUnitLength": {
					"type": "<number-optional-number>",
					"animatable": true,
					"deprecated": true
				},
				"order": {
					"type": "<number-optional-number>",
					"defaultValue": "3",
					"animatable": true
				},
				"preserveAlpha": {
					"type": {
						"enum": ["true", "false"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "false",
					"animatable": true
				},
				"targetX": {
					"type": "<integer>",
					"animatable": true
				},
				"targetY": {
					"type": "<integer>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feDiffuseLighting",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDiffuseLighting",
			"description": "The <feDiffuseLighting> SVG filter primitive lights an image using the alpha channel as a bump map. The resulting image, which is an RGBA opaque image, depends on the light color, light position and surface geometry of the input bump map.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
								},
								{
									"require": ":model(SVGLightSource)"
								}
							],
							[
								{
									"require": ":model(SVGLightSource)"
								},
								{
									"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"diffuseConstant": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"kernelUnitLength": {
					"type": "<number-optional-number>",
					"animatable": true,
					"deprecated": true
				},
				"surfaceScale": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feDisplacementMap",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDisplacementMap",
			"description": "The <feDisplacementMap> SVG filter primitive uses the pixel values from the image from in2 to spatially displace the image from in.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"in2": {
					"type": [
						{
							"enum": [
								"SourceGraphic",
								"SourceAlpha",
								"BackgroundImage",
								"BackgroundAlpha",
								"FillPaint",
								"StrokePaint"
							],
							"disallowToSurroundBySpaces": false
						},
						"<custom-ident>"
					],
					"animatable": true
				},
				"scale": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"xChannelSelector": {
					"type": {
						"enum": ["R", "G", "B", "A"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "A",
					"animatable": true
				},
				"yChannelSelector": {
					"type": {
						"enum": ["R", "G", "B", "A"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "A",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feDistantLight",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDistantLight",
			"description": "The <feDistantLight> SVG filter primitive defines a distant light source that can be used within a lighting filter primitive: <feDiffuseLighting> or <feSpecularLighting>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"]
			},
			"attributes": {
				"azimuth": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"elevation": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feDropShadow",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feDropShadow",
			"description": "The <feDropShadow> SVG filter primitive creates a drop shadow of the input image. It can only be used inside a <filter> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"dx": {
					"type": "<number>",
					"defaultValue": "2",
					"animatable": true
				},
				"dy": {
					"type": "<number>",
					"defaultValue": "2",
					"animatable": true
				},
				"stdDeviation": {
					"type": "<number-optional-number>",
					"defaultValue": "2",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feFlood",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFlood",
			"description": "The <feFlood> SVG filter primitive fills the filter subregion with the color and opacity defined by flood-color and flood-opacity.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"flood-color": {
					"type": "<color>",
					"defaultValue": "black"
				},
				"flood-opacity": {
					"type": "<alpha-value>",
					"defaultValue": "1"
				}
			}
		},
		{
			"name": "svg:feFuncA",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncA",
			"description": "The <feFuncA> SVG filter primitive defines the transfer function for the alpha component of the input graphic of its parent <feComponentTransfer> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"],
				"#SVGTransferFunctionAttrs": [
					"type",
					"tableValues",
					"slope",
					"intercept",
					"amplitude",
					"exponent",
					"offset"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feFuncB",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncB",
			"description": "The <feFuncB> SVG filter primitive defines the transfer function for the blue component of the input graphic of its parent <feComponentTransfer> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"],
				"#SVGTransferFunctionAttrs": [
					"type",
					"tableValues",
					"slope",
					"intercept",
					"amplitude",
					"exponent",
					"offset"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feFuncG",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncG",
			"description": "The <feFuncG> SVG filter primitive defines the transfer function for the green component of the input graphic of its parent <feComponentTransfer> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"],
				"#SVGTransferFunctionAttrs": [
					"type",
					"tableValues",
					"slope",
					"intercept",
					"amplitude",
					"exponent",
					"offset"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feFuncR",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feFuncR",
			"description": "The <feFuncR> SVG filter primitive defines the transfer function for the red component of the input graphic of its parent <feComponentTransfer> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"],
				"#SVGTransferFunctionAttrs": [
					"type",
					"tableValues",
					"slope",
					"intercept",
					"amplitude",
					"exponent",
					"offset"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feGaussianBlur",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feGaussianBlur",
			"description": "The <feGaussianBlur> SVG filter primitive blurs the input image by the amount specified in stdDeviation, which defines the bell-curve.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"edgeMode": {
					"type": {
						"enum": ["duplicate", "wrap", "none"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "none"
				},
				"stdDeviation": {
					"type": "<number-optional-number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feImage",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feImage",
			"description": "The <feImage> SVG filter primitive fetches image data from an external source and provides the pixel data as output (meaning if the external source is an SVG image, it is rasterized.)",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGDescriptive)",
							"svg|animate",
							"svg|animateTransform",
							"svg|script",
							"svg|set"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"crossorigin": {
					"type": {
						"enum": ["anonymous", "use-credentials"],
						"disallowToSurroundBySpaces": false
					}
				},
				"externalResourcesRequired": {
					"type": {
						"enum": ["true", "false"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "true"
				},
				"href": {
					"type": "URL",
					"animatable": true
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet",
					"animatable": true
				},
				"xlink:href": {
					"type": "URL",
					"animatable": true,
					"deprecated": true
				}
			}
		},
		{
			"name": "svg:feMerge",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMerge",
			"description": "The <feMerge> SVG element allows filter effects to be applied concurrently instead of sequentially. This is achieved by other filters storing their output via the result attribute and then accessing it in a <feMergeNode> child.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|feMergeNode", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feMergeNode",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMergeNode",
			"description": "The <feMergeNode> SVG takes the result of another filter to be processed by its parent <feMerge>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"],
				"#SVGFilterPrimitiveAttrs": ["in"]
			},
			"attributes": {}
		},
		{
			"name": "svg:feMorphology",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feMorphology",
			"description": "The <feMorphology> SVG filter primitive is used to erode or dilate the input image. Its usefulness lies especially in fattening or thinning effects.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"operator": {
					"type": {
						"enum": ["erode", "dilate"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "erode",
					"animatable": true
				},
				"radius": {
					"type": "<number-optional-number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feOffset",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feOffset",
			"description": "The <feOffset> SVG filter primitive enables offsetting an input image relative to its current position. The input image as a whole is offset by the values specified in the dx and dy attributes.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"dx": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"dy": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:fePointLight",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/fePointLight",
			"description": "The <fePointLight> SVG filter primitive defines a light source which allows to create a point light effect. It that can be used within a lighting filter primitive: <feDiffuseLighting> or <feSpecularLighting>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"]
			},
			"attributes": {
				"x": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"y": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"z": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feSpecularLighting",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpecularLighting",
			"description": "The <feSpecularLighting> SVG filter primitive lights a source graphic using the alpha channel as a bump map. The resulting image is an RGBA image based on the light color. The lighting calculation follows the standard specular component of the Phong lighting model. The resulting image depends on the light color, light position and surface geometry of the input bump map. The result of the lighting calculation is added. The filter primitive assumes that the viewer is at infinity in the z direction.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"choice": [
							[
								{
									"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
								},
								{
									"require": ":model(SVGLightSource)"
								}
							],
							[
								{
									"require": ":model(SVGLightSource)"
								},
								{
									"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
								}
							]
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"kernelUnitLength": {
					"type": "<number-optional-number>",
					"animatable": true
				},
				"specularConstant": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"specularExponent": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"surfaceScale": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feSpotLight",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feSpotLight",
			"description": "The <feSpotLight> SVG filter primitive defines a light source that can be used to create a spotlight effect. It is used within a lighting filter primitive: <feDiffuseLighting> or <feSpecularLighting>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space"]
			},
			"attributes": {
				"limitingConeAngle": {
					"type": "<number>",
					"animatable": true
				},
				"pointsAtX": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"pointsAtY": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"pointsAtZ": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"specularExponent": {
					"type": "<number>",
					"defaultValue": "1",
					"animatable": true
				},
				"x": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"y": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"z": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:feTile",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTile",
			"description": "The <feTile> SVG filter primitive allows to fill a target rectangle with a repeated, tiled pattern of an input image. The effect is similar to the one of a <pattern>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result", "in"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:feTurbulence",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/feTurbulence",
			"description": "The <feTurbulence> SVG filter primitive creates an image using the Perlin turbulence function. It allows the synthesis of artificial textures like clouds or marble. The resulting image will fill the entire filter primitive subregion.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|animate", "svg|script", "svg|set"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height", "result"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"baseFrequency": {
					"type": "<number-optional-number>",
					"defaultValue": "0",
					"animatable": true
				},
				"numOctaves": {
					"type": "<integer>",
					"defaultValue": "1",
					"animatable": true
				},
				"seed": {
					"type": "<number>",
					"defaultValue": "0",
					"animatable": true
				},
				"stitchTiles": {
					"type": {
						"enum": ["noStitch", "stitch"]
					},
					"defaultValue": "noStitch",
					"animatable": true
				},
				"type": {
					"type": {
						"enum": ["fractalNoise", "turbulence"]
					},
					"defaultValue": "turbulence",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:filter",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/filter",
			"description": "The <filter> SVG element defines a custom filter effect by grouping atomic filter primitives. It is never rendered itself, but must be used by the filter attribute on SVG elements, or the filter CSS property for SVG/HTML elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGDescriptive)",
							":model(SVGFilterPrimitive)",
							"svg|animate",
							"svg|script",
							"svg|set"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"externalResourcesRequired": {
					"type": {
						"enum": ["true", "false"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "true"
				},
				"filterRes": {
					"type": "<number-optional-number>",
					"animatable": true,
					"deprecated": true
				},
				"filterUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "objectBoundingBox",
					"animatable": true
				},
				"height": {
					"defaultValue": "120%"
				},
				"primitiveUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"]
					},
					"defaultValue": "userSpaceOnUse",
					"animatable": true
				},
				"width": {
					"defaultValue": "120%"
				},
				"x": {
					"defaultValue": "-10%"
				},
				"y": {
					"defaultValue": "-10%"
				}
			}
		},
		{
			"name": "svg:foreignObject",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/foreignObject",
			"description": "The <foreignObject> SVG element includes elements from a different XML namespace. In the context of a browser, it is most likely (X)HTML.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"x",
					"y",
					"width",
					"height",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"height": {
					"description": "The height of the foreignObject. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"width": {
					"description": "The width of the foreignObject. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"x": {
					"description": "The x coordinate of the foreignObject. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"y": {
					"description": "The y coordinate of the foreignObject. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:g",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/g",
			"description": "The <g> SVG element is a container used to group other SVG elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:hkern",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <hkern> SVG element allows to fine-tweak the horizontal distance between two glyphs. This process is known as kerning.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "svg:image",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/image",
			"description": "The <image> SVG element includes images inside SVG documents. It can display raster image files or other SVG files.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							"svg|clipPath",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "img",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"x",
					"y",
					"width",
					"height",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"crossorigin": {
					"type": {
						"enum": ["", "anonymous", "use-credentials"],
						"sameStates": {
							"anonymous": [""]
						}
					}
				},
				"decoding": {
					"description": "Provides a hint to the browser as to whether it should perform image decoding synchronously or asynchronously. Value type: async | sync | auto ; Default value: auto; Animatable: yes"
				},
				"height": {
					"description": "The height the image renders at. Unlike HTML's <img>, this attribute is required. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"href": {
					"type": "URL"
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet"
				},
				"width": {
					"description": "The width the image renders at. Unlike HTML's <img>, this attribute is required. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"x": {
					"description": "Positions the image horizontally from the origin. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"xlink:href": {
					"description": "Points at a URL for the image file. Value type: <URL> ; Default value: none; Animatable: no",
					"deprecated": true
				},
				"y": {
					"description": "Positions the image vertically from the origin. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:line",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/line",
			"description": "The <line> SVG element is an SVG basic shape used to create a line connecting two points.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"x1": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "0",
					"animatable": true
				},
				"x2": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "0",
					"animatable": true
				},
				"y1": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "0",
					"animatable": true
				},
				"y2": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:linearGradient",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/linearGradient",
			"description": "The <linearGradient> SVG element lets authors define linear gradients to apply to other SVG elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGDescriptive)",
							"svg|animate",
							"svg|animateTransform",
							"svg|script",
							"svg|set",
							"svg|stop",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"gradientTransform": {
					"type": "<transform-list>",
					"animatable": true
				},
				"gradientUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "objectBoundingBox",
					"animatable": true
				},
				"href": {
					"type": "URL",
					"animatable": true
				},
				"spreadMethod": {
					"type": {
						"enum": ["pad", "reflect", "repeat"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "pad",
					"animatable": true
				},
				"x1": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				},
				"x2": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "100%",
					"animatable": true
				},
				"xlink:href": {
					"description": "An <IRI> reference to another <linearGradient> element that will be used as a template. Value type: <IRI> ; Default value: none; Animatable: yes",
					"deprecated": true
				},
				"y1": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				},
				"y2": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:marker",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/marker",
			"description": "The <marker> SVG element defines a graphic used for drawing arrowheads or polymarkers on a given <path>, <line>, <polyline> or <polygon> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"markerHeight": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "3",
					"animatable": true
				},
				"markerUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "strokeWidth"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "strokeWidth"
				},
				"markerWidth": {
					"type": ["<svg-length>", "<percentage>", "<number>"],
					"defaultValue": "3",
					"animatable": true
				},
				"orient": {
					"type": [
						{
							"enum": ["auto", "auto-start-reverse"],
							"disallowToSurroundBySpaces": false
						},
						"<angle>",
						"<number>"
					],
					"defaultValue": "0",
					"animatable": true
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet",
					"animatable": true
				},
				"refX": {
					"type": [
						"<percentage>",
						"<number>",
						{
							"enum": ["left", "center", "right"],
							"disallowToSurroundBySpaces": false
						}
					],
					"defaultValue": "0",
					"animatable": true
				},
				"refY": {
					"type": [
						"<percentage>",
						"<number>",
						{
							"enum": ["left", "center", "right"],
							"disallowToSurroundBySpaces": false
						}
					],
					"defaultValue": "0",
					"animatable": true
				},
				"viewBox": {
					"type": "<view-box>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:mask",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mask",
			"description": "The <mask> SVG element defines an alpha mask for compositing the current object into the background. A mask is used/referenced using the mask property.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGShape)",
							":model(SVGStructural)",
							":model(SVGGradient)",
							"svg|a",
							"svg|altGlyphDef",
							"svg|clipPath",
							"svg|color-profile",
							"svg|cursor",
							"svg|filter",
							"svg|font",
							"svg|font-face",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|pattern",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#SVGConditionalProcessingAttrs": ["requiredFeatures", "requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "xml:base", "xml:lang", "xml:space", "class", "style"],
				"#SVGFilterPrimitiveAttrs": ["x", "y", "width", "height"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-profile",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"opacity",
					"overflow",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-rendering",
					"unicode-bidi",
					"visibility",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"height": {
					"defaultValue": "120%"
				},
				"maskContentUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"]
					},
					"defaultValue": "userSpaceOnUse",
					"animatable": true
				},
				"maskUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "objectBoundingBox",
					"animatable": true
				},
				"width": {
					"defaultValue": "120%"
				},
				"x": {
					"defaultValue": "-10%"
				},
				"y": {
					"defaultValue": "-10%"
				}
			}
		},
		{
			"name": "svg:metadata",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/metadata",
			"description": "The <metadata> SVG element adds metadata to SVG content. Metadata is structured information about data. The contents of <metadata> should be elements from other XML namespaces such as RDF, FOAF, etc.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", ":model(SVGNeverRendered)", "#text"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {}
		},
		{
			"name": "svg:missing",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "svg:mpath",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/mpath",
			"description": "The <mpath> SVG sub-element for the <animateMotion> element provides the ability to reference an external <path> element as the definition of a motion path.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"href": {
					"type": "URL"
				}
			}
		},
		{
			"name": "svg:path",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path",
			"description": "The <path> SVG element is the generic element to define a shape. All the basic shapes can be created with a path element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"d",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"d": {
					"description": "This attribute defines the shape of the path. Value type: <string> ; Default value: ''; Animatable: yes"
				},
				"pathLength": {
					"type": "<number>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:pattern",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/pattern",
			"description": "The <pattern> SVG element defines a graphics object which can be redrawn at repeated x- and y-coordinate intervals (\"tiled\") to cover an area.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"height": {
					"defaultValue": "0"
				},
				"href": {
					"type": "URL",
					"animatable": true
				},
				"patternContentUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "userSpaceOnUse",
					"animatable": true
				},
				"patternTransform": {
					"type": "<transform-list>",
					"animatable": true
				},
				"patternUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "objectBoundingBox",
					"animatable": true
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet",
					"animatable": true
				},
				"viewBox": {
					"type": "<view-box>",
					"animatable": true
				},
				"width": {
					"defaultValue": "0"
				},
				"x": {
					"description": "This attribute determines the x coordinate shift of the pattern tile. Value type: <length> ; Default value: 0; Animatable: yes"
				},
				"xlink:href": {
					"description": "This attribute references a template pattern that provides default values for the <pattern> attributes. Value type: <URL>; Default value: none; Animatable: yes Note: For browsers implementing href, if both href and xlink:href are set, xlink:href will be ignored and only href will be used.",
					"deprecated": true
				},
				"y": {
					"description": "This attribute determines the y coordinate shift of the pattern tile. Value type: <length> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:polygon",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polygon",
			"description": "The <polygon> SVG element defines a closed shape consisting of a set of connected straight line segments. The last point is connected to the first point.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"points": {
					"type": "<points>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:polyline",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/polyline",
			"description": "The <polyline> SVG element is an SVG basic shape that creates straight lines connecting several points. Typically a polyline is used to create open shapes as the last point doesn't have to be connected to the first point. For closed shapes see the <polygon> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"points": {
					"type": "<points>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:radialGradient",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/radialGradient",
			"description": "The <radialGradient> SVG element lets authors define radial gradients that can be applied to fill or stroke of graphical elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGDescriptive)",
							"svg|animate",
							"svg|animateTransform",
							"svg|script",
							"svg|set",
							"svg|stop",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"cx": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "50%",
					"animatable": true
				},
				"cy": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "50%",
					"animatable": true
				},
				"fr": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "0%",
					"animatable": true
				},
				"fx": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				},
				"fy": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				},
				"gradientTransform": {
					"type": "<transform-list>",
					"animatable": true
				},
				"gradientUnits": {
					"type": {
						"enum": ["userSpaceOnUse", "objectBoundingBox"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "objectBoundingBox",
					"animatable": true
				},
				"href": {
					"type": "URL",
					"animatable": true
				},
				"r": {
					"type": ["<svg-length>", "<percentage>"],
					"defaultValue": "50%",
					"animatable": true
				},
				"spreadMethod": {
					"type": {
						"enum": ["pad", "reflect", "repeat"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "pad",
					"animatable": true
				},
				"xlink:href": {
					"description": "An <IRI> reference to another <radialGradient> element that will be used as a template. Value type: <IRI> ; Default value: none; Animatable: yes",
					"deprecated": true
				}
			}
		},
		{
			"name": "svg:rect",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/rect",
			"description": "The <rect> SVG element is a basic SVG shape that draws rectangles, defined by their position, width, and height. The rectangles may have their corners rounded.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-symbol",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"x",
					"y",
					"width",
					"height",
					"rx",
					"ry",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"height": {
					"description": "The height of the rect. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"pathLength": {
					"type": "<number>",
					"animatable": true
				},
				"rx": {
					"description": "The horizontal corner radius of the rect. Defaults to ry if it is specified. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"ry": {
					"description": "The vertical corner radius of the rect. Defaults to rx if it is specified. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"width": {
					"description": "The width of the rect. Value type: auto|<length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"x": {
					"description": "The x coordinate of the rect. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"y": {
					"description": "The y coordinate of the rect. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:script",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/script",
			"description": "The <script> SVG element allows to add scripts to an SVG document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGNeverRendered)", ":model(SVGStructurallyExternal)", "#text"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"crossorigin": {
					"type": {
						"enum": ["anonymous", "use-credentials", ""],
						"disallowToSurroundBySpaces": false
					},
					"animatable": true
				},
				"href": {
					"type": "URL"
				},
				"type": {
					"type": "MIMEType",
					"defaultValue": "application/ecmascript"
				},
				"xlink:href": {
					"description": "The URL to the script to load. Value type: <URL> ; Default value: none; Animatable: no",
					"deprecated": true
				}
			}
		},
		{
			"name": "svg:set",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/set",
			"description": "The <set> SVG element provides a method of setting the value of an attribute for a specified duration.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", "svg|script"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGAnimationAttributeTargetAttrs": ["attributeName"],
				"#SVGAnimationEventAttrs": ["onbegin", "onend", "onrepeat"],
				"#SVGAnimationTargetElementAttrs": ["href"],
				"#SVGAnimationTimingAttrs": [
					"begin",
					"dur",
					"end",
					"min",
					"max",
					"restart",
					"repeatCount",
					"repeatDur",
					"fill"
				],
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"to": {
					"type": "NoEmptyAny"
				}
			}
		},
		{
			"name": "svg:stop",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/stop",
			"description": "The <stop> SVG element defines a color and its position to use on a gradient. This element is always a child of a <linearGradient> or <radialGradient> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": ["svg:animate", "svg|animateColor", "svg|script", "svg|set", "svg|style"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"offset": {
					"type": ["<number>", "<percentage>"],
					"defaultValue": "0",
					"animatable": true
				},
				"stop-color": {
					"type": "<color>",
					"defaultValue": "black",
					"animatable": true
				},
				"stop-opacity": {
					"type": "<'opacity'>",
					"defaultValue": "1",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:style",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/style",
			"description": "The <style> SVG element allows style sheets to be embedded directly within SVG content.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": "#text"
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"media": {
					"type": "<media-query-list>",
					"defaultValue": "all"
				},
				"title": {
					"type": "Any"
				},
				"type": {
					"type": "MIMEType",
					"defaultValue": "text/css"
				}
			}
		},
		{
			"name": "svg:svg",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/svg",
			"description": "The <svg> SVG element is a container that defines a new coordinate system and viewport. It is used as the outermost element of SVG documents, but it can also be used to embed an SVG fragment inside an SVG or HTML document.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-document",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style", "xmlns"],
				"#SVGPresentationAttrs": [
					"x",
					"y",
					"width",
					"height",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"baseProfile": {
					"type": "Any",
					"deprecated": true
				},
				"contentScriptType": {
					"type": "Any",
					"defaultValue": "application/ecmascript",
					"deprecated": true
				},
				"contentStyleType": {
					"type": "Any",
					"defaultValue": "text/css",
					"deprecated": true
				},
				"height": {
					"defaultValue": "auto"
				},
				"onunload": {
					"type": "FunctionBody"
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet",
					"animatable": true
				},
				"version": {
					"type": "Any",
					"deprecated": true
				},
				"viewBox": {
					"type": "<view-box>",
					"animatable": true
				},
				"width": {
					"defaultValue": "auto"
				},
				"x": {
					"description": "The displayed x coordinate of the svg container. No effect on outermost svg elements. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"y": {
					"description": "The displayed y coordinate of the svg container. No effect on outermost svg elements. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:switch",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/switch",
			"description": "The <switch> SVG element evaluates any requiredFeatures, requiredExtensions and systemLanguage attributes on its direct child elements in order, and then renders the first child where these attributes evaluate to true.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGShape)",
							"svg|a",
							"svg|foreignObject",
							"svg|g",
							"svg|image",
							"svg|svg",
							"svg|switch",
							"svg|text",
							"svg|use"
						]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {}
		},
		{
			"name": "svg:symbol",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/symbol",
			"description": "The <symbol> SVG element is used to define graphical template objects which can be instantiated by a <use> element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGShape)",
							":model(SVGStructural)",
							"svg|a",
							"svg|clipPath",
							"svg|filter",
							"svg|foreignObject",
							"svg|image",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style",
							"svg|switch",
							"svg|text",
							"svg|view"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-object",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": ["x", "y", "width", "height"]
			},
			"attributes": {
				"height": {
					"description": "This attribute determines the height of the symbol. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>",
					"defaultValue": "xMidYMid meet"
				},
				"refX": {
					"type": [
						"<svg-length>",
						"<percentage>",
						"<number>",
						{
							"enum": ["left", "center", "right"]
						}
					]
				},
				"refY": {
					"type": [
						"<svg-length>",
						"<percentage>",
						"<number>",
						{
							"enum": ["top", "center", "bottom"]
						}
					]
				},
				"viewBox": {
					"type": "<view-box>"
				},
				"width": {
					"description": "This attribute determines the width of the symbol. Value type: <length>|<percentage> ; Default value: auto; Animatable: yes"
				},
				"x": {
					"description": "This attribute determines the x coordinate of the symbol. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				},
				"y": {
					"description": "This attribute determines the y coordinate of the symbol. Value type: <length>|<percentage> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:text",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/text",
			"description": "The <text> SVG element draws a graphics element consisting of text. It's possible to apply a gradient, pattern, clipping path, mask, or filter to <text>, like any other SVG graphics element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							"#text",
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							":model(SVGTextContentChild)",
							"svg|a",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"dx": {
					"type": "<text-coordinate>",
					"animatable": true
				},
				"dy": {
					"type": "<text-coordinate>",
					"animatable": true
				},
				"lengthAdjust": {
					"type": {
						"enum": ["spacing", "spacingAndGlyphs"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "spacing",
					"animatable": true
				},
				"rotate": {
					"type": "<list-of-numbers>",
					"animatable": true
				},
				"textLength": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				},
				"x": {
					"type": "<text-coordinate>",
					"defaultValue": "0",
					"animatable": true
				},
				"y": {
					"type": "<text-coordinate>",
					"defaultValue": "0",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:textPath",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/textPath",
			"description": "The <textPath> SVG element is used to render text along the shape of a <path> element. The text must be enclosed in the <textPath> element and its href attribute is used to reference the desired <path>.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							"#text",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|a",
							"svg|animate",
							"svg|clipPath",
							"svg|marker",
							"svg|mask",
							"svg|script",
							"svg|set",
							"svg|style",
							"svg|tspan"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"href": {
					"type": "URL",
					"animatable": true
				},
				"lengthAdjust": {
					"type": {
						"enum": ["spacing", "spacingAndGlyphs"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "spacing",
					"animatable": true
				},
				"method": {
					"type": {
						"enum": ["align", "stretch"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "align",
					"animatable": true
				},
				"path": {
					"type": "<svg-path>",
					"animatable": true
				},
				"side": {
					"type": {
						"enum": ["left", "right"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "left",
					"animatable": true
				},
				"spacing": {
					"type": {
						"enum": ["auto", "exact"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "exact",
					"animatable": true
				},
				"startOffset": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				},
				"textLength": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				}
			}
		},
		{
			"name": "svg:title",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/title",
			"description": "The <title> SVG element provides an accessible, short-text description of any SVG container element or graphics element.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGDescriptive)", ":model(SVGNeverRendered)", "#text"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#GlobalEventAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {}
		},
		{
			"name": "svg:tref",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The textual content for a <text> SVG element can be either character data directly embedded within the <text> element or the character data content of a referenced element, where the referencing is specified with a <tref> element.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		},
		{
			"name": "svg:tspan",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/tspan",
			"description": "The <tspan> SVG element defines a subtext within a <text> element or another <tspan> element. It allows for adjustment of the style and/or position of that subtext as needed.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							"#text",
							":model(SVGDescriptive)",
							":model(SVGPaintServer)",
							"svg|a",
							"svg|animate",
							"svg|script",
							"svg|set",
							"svg|style",
							"svg|tspan"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "group",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				]
			},
			"attributes": {
				"dx": {
					"type": "<text-coordinate>",
					"animatable": true
				},
				"dy": {
					"type": "<text-coordinate>",
					"animatable": true
				},
				"lengthAdjust": {
					"type": {
						"enum": ["spacing", "spacingAndGlyphs"],
						"disallowToSurroundBySpaces": false
					},
					"defaultValue": "spacing",
					"animatable": true
				},
				"rotate": {
					"type": "<list-of-numbers>",
					"animatable": true
				},
				"textLength": {
					"type": ["<svg-length>", "<percentage>"],
					"animatable": true
				},
				"x": {
					"type": "<text-coordinate>",
					"animatable": true
				},
				"y": {
					"type": "<text-coordinate>",
					"animatable": true
				}
			}
		},
		{
			"name": "svg:use",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/use",
			"description": "The <use> element takes nodes from within the SVG document, and duplicates them somewhere else. The effect is the same as if the nodes were deeply cloned into a non-exposed DOM, then pasted where the use element is, much like cloned template elements.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [
							":model(SVGAnimation)",
							":model(SVGDescriptive)",
							"svg|clipPath",
							"svg|mask",
							"svg|script",
							"svg|style"
						]
					}
				]
			},
			"aria": {
				"implicitRole": "graphics-object",
				"permittedRoles": {
					"core-aam": true,
					"graphics-aam": true
				}
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGConditionalProcessingAttrs": ["requiredExtensions", "systemLanguage"],
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"],
				"#SVGPresentationAttrs": [
					"x",
					"y",
					"width",
					"height",
					"alignment-baseline",
					"baseline-shift",
					"clip",
					"clip-path",
					"clip-rule",
					"color",
					"color-interpolation",
					"color-interpolation-filters",
					"color-rendering",
					"cursor",
					"direction",
					"display",
					"dominant-baseline",
					"enable-background",
					"fill",
					"fill-opacity",
					"fill-rule",
					"filter",
					"flood-color",
					"flood-opacity",
					"font",
					"font-family",
					"font-size",
					"font-size-adjust",
					"font-stretch",
					"font-style",
					"font-variant",
					"font-weight",
					"glyph-orientation-horizontal",
					"glyph-orientation-vertical",
					"image-rendering",
					"isolation",
					"kerning",
					"letter-spacing",
					"lighting-color",
					"marker",
					"marker-end",
					"marker-mid",
					"marker-start",
					"mask",
					"mask-type",
					"opacity",
					"overflow",
					"paint-order",
					"pointer-events",
					"shape-rendering",
					"stop-color",
					"stop-opacity",
					"stroke",
					"stroke-dasharray",
					"stroke-dashoffset",
					"stroke-linecap",
					"stroke-linejoin",
					"stroke-miterlimit",
					"stroke-opacity",
					"stroke-width",
					"text-anchor",
					"text-decoration",
					"text-overflow",
					"text-rendering",
					"transform",
					"transform-origin",
					"unicode-bidi",
					"vector-effect",
					"visibility",
					"white-space",
					"word-spacing",
					"writing-mode"
				],
				"#XLinkAttrs": ["xlink:href", "xlink:title"]
			},
			"attributes": {
				"height": {
					"description": "The height of the use element. Value type: <length> ; Default value: 0; Animatable: yes"
				},
				"href": {
					"type": "URL"
				},
				"width": {
					"description": "The width of the use element. Value type: <length> ; Default value: 0; Animatable: yes"
				},
				"x": {
					"description": "The x coordinate of an additional final offset transformation applied to the <use> element. Value type: <coordinate> ; Default value: 0; Animatable: yes"
				},
				"xlink:href": {
					"description": "An <IRI> reference to an element/fragment that needs to be duplicated. If both href and xlink:href are present, the value given by href is used. Value type: <IRI> ; Default value: none; Animatable: yes",
					"deprecated": true
				},
				"y": {
					"description": "The y coordinate of an additional final offset transformation applied to the <use> element. Value type: <coordinate> ; Default value: 0; Animatable: yes"
				}
			}
		},
		{
			"name": "svg:view",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://developer.mozilla.org/en-US/docs/Web/SVG/Element/view",
			"description": "The <view> SVG element defines a particular view of an SVG document. A specific view can be displayed by referencing the <view> element's id as the target fragment of a URL.",
			"categories": [],
			"contentModel": {
				"contents": [
					{
						"zeroOrMore": [":model(SVGAnimation)", ":model(SVGDescriptive)", "svg|script", "svg|style"]
					}
				]
			},
			"aria": {
				"implicitRole": false,
				"permittedRoles": false
			},
			"omission": false,
			"globalAttrs": {
				"#ARIAAttrs": true,
				"#GlobalEventAttrs": true,
				"#HTMLGlobalAttrs": true,
				"#SVGCoreAttrs": ["id", "tabindex", "autofocus", "lang", "xml:space", "class", "style"]
			},
			"attributes": {
				"preserveAspectRatio": {
					"type": "<preserve-aspect-ratio>"
				},
				"viewBox": {
					"type": "<view-box>"
				},
				"viewTarget": {
					"type": "Any",
					"deprecated": true
				},
				"zoomAndPan": {
					"type": {
						"enum": ["disable", "magnify"]
					},
					"defaultValue": "magnify",
					"deprecated": true
				}
			}
		},
		{
			"name": "svg:vkern",
			"namespace": "http://www.w3.org/2000/svg",
			"cite": "https://html.spec.whatwg.org/multipage/obsolete.html#non-conforming-features",
			"description": "The <vkern> SVG element allows to fine-tweak the vertical distance between two glyphs in top-to-bottom fonts. This process is known as kerning.",
			"categories": [],
			"contentModel": {
				"contents": true
			},
			"aria": {
				"permittedRoles": true,
				"implicitRole": false
			},
			"omission": false,
			"obsolete": true,
			"globalAttrs": {},
			"attributes": {}
		}
	]
}
