name: Test

on:
    pull_request:
        branches:
            - dev
            - v3
            - next
        paths:
            - '.github/workflows/test.yml'
            - 'packages/**'
            - '!**/*.md'
            - 'packages/@markuplint/config-presets/src/README.md'
            - 'test/**'
            - 'yarn.lock'

env:
    NODE_BUILD_VERSION: 20

jobs:
    dev-setup:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --frozen-lockfile --check-files

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              id: cache-save-dev-depends
              uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

    build:
        needs: dev-setup
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Build
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              run: yarn build

            - name: Cache Save Production
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

    lint:
        needs: [dev-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Lint
              run: yarn lint-check

    os-setup:
        runs-on: ${{ matrix.os }}

        # For PRs from Renovate, update production dependencies only and then run tests.
        # For PRs not from Renovate, proceed with the usual setup and tests.
        if: |
            !contains(github.event.pull_request.labels.*.name, 'Renovate')
            ||
            contains(github.event.pull_request.labels.*.name, 'Dependencies: Production')

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest
                    - windows-latest
                node: [18]
                include:
                    - node: 20
                      os: ubuntu-latest
                    - node: 21
                      os: ubuntu-latest
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache Restore productionDependencies
              id: cache-restore-prod-depends
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

            - name: Create .yarnrc for Windows
              if: runner.os == 'Windows'
              run: echo "network-timeout 600000" > .yarnrc

            - name: Install prodcution dependencies
              if: steps.cache-restore-prod-depends.outputs.cache-hit != 'true'
              run: yarn install --production --frozen-lockfile --check-files --ignore-engines

            - name: Cache Save productionDependencies
              if: steps.cache-restore-prod-depends.outputs.cache-hit != 'true'
              uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

    test:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                node: [18]
                shard: [1/4, 2/4, 3/4, 4/4]
                include:
                    - node: 20
                      os: ubuntu-latest
                      shard: 1/1
                    - node: 21
                      os: ubuntu-latest
                      shard: 1/1
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Cache Restore productionDependencies
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Show directories
              run: |
                  pwd
                  ls -la
                  ls -la ./packages/markuplint
                  ls -la ./packages/markuplint/lib
                  ls -la ./packages/@markuplint
                  ls -la ./packages/@markuplint/*
                  ls -la ./packages/@markuplint/*/lib
                  ls -la ./packages/@markuplint/config-presets
              shell: bash

            - name: Test
              uses: nick-fields/retry@7152eba30c6575329ac0576536151aca5a72780e # v3
              with:
                  timeout_minutes: 20
                  max_attempts: 3
                  shell: bash
                  command: yarn vitest run --shard=${{ matrix.shard }}

    isolated-env:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        env:
            PACKAGES: 'markuplint @markuplint/alpine-parser @markuplint/astro-parser @markuplint/config-presets @markuplint/cli-utils @markuplint/ejs-parser @markuplint/erb-parser @markuplint/file-resolver @markuplint/html-parser @markuplint/html-spec @markuplint/i18n @markuplint/jsx-parser @markuplint/liquid-parser @markuplint/ml-ast @markuplint/ml-config @markuplint/ml-core @markuplint/ml-spec @markuplint/mustache-parser @markuplint/nunjucks-parser @markuplint/parser-utils @markuplint/php-parser @markuplint/pug-parser @markuplint/react-spec @markuplint/rule-textlint @markuplint/rules @markuplint/selector @markuplint/shared @markuplint/smarty-parser @markuplint/svelte-parser @markuplint/types @markuplint/vue-parser @markuplint/vue-spec'
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                pm: [npm, yarn, pnpm]
                env: [esm, ts, ts-config-ts]
        steps:
            - uses: actions/checkout@44c2b7a8a4ea60a981eaca3cf939b5f4305c123b # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Cache Restore productionDependencies
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  path: '**/node_modules'
                  key: depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Create sandbox directory
              run: |
                  mkdir -p ${{ github.workspace }}/../sandbox
                  cp -r ${{ github.workspace }}/test ${{ github.workspace }}/../sandbox
                  ls -la ${{ github.workspace }}/../sandbox/test

            - name: Install pnpm
              if: matrix.pm == 'pnpm'
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Package paths (npm)
              uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
              id: package-paths
              with:
                  script: |
                      const packages = process.env.PACKAGES.split(' ');
                      return packages.map(p => `file:../../../../markuplint/packages/${p}`).join(' ');
                  result-encoding: string

            - name: Create the lock file (npm)
              if: matrix.pm == 'npm'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  npm install -S ${{ steps.package-paths.outputs.result }}

            - name: Create the lock file (yarn)
              if: matrix.pm == 'yarn'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  IFS=' ' read -r -a packages <<< "${{ env.PACKAGES }}"
                  for package in "${packages[@]}"
                  do
                    (cd "../../../../markuplint/packages/$package" && yarn link)
                    yarn link $package
                  done
                  ${{ matrix.pm }} install

            - name: Create the lock file (pnpm)
              if: matrix.pm == 'pnpm'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  IFS=' ' read -r -a packages <<< "${{ env.PACKAGES }}"
                  for package in "${packages[@]}"
                  do
                    (cd "../../../../markuplint/packages/$package" && pnpm link --global)
                    pnpm link --global $package
                  done
                  ${{ matrix.pm }} install

            - name: Test
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  ${{ matrix.pm }} test
