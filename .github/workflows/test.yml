name: Test

on:
    pull_request:
        branches:
            - dev
            - v3
            - next
        paths:
            - '.github/workflows/test.yml'
            - 'packages/**'
            - '!**/*.md'
            - 'packages/@markuplint/config-presets/src/README.md'
            - 'test/**'
            - 'yarn.lock'
            - '.yarnrc.yml'

env:
    NODE_BUILD_VERSION: 24
    NX_DISABLE_DB: true

jobs:
    dev-setup:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              id: cache-save-dev-depends
              uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    build:
        needs: dev-setup
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Build
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              run: yarn run build

            - name: Cache Save Production
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

    lint:
        needs: [dev-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Lint
              run: yarn run lint-check

    os-setup:
        runs-on: ${{ matrix.os }}

        # For PRs from Renovate, update production dependencies only and then run tests.
        # For PRs not from Renovate, proceed with the usual setup and tests.
        if: |
            !contains(github.event.pull_request.labels.*.name, 'Renovate')
            ||
            contains(github.event.pull_request.labels.*.name, 'Dependencies: Production')

        strategy:
            fail-fast: false
            matrix:
                os:
                    - macos-latest
                    - windows-latest
                node: [24]
                include:
                    - node: 18
                      os: ubuntu-latest
                    - node: 24
                      os: ubuntu-latest
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              uses: actions/cache/save@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    test:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os:
                    - macos-latest
                    - windows-latest
                node: [24]
                shard: [1/4, 2/4, 3/4, 4/4]
                include:
                    - node: 18
                      os: ubuntu-latest
                      shard: 1/1
                    - node: 24
                      os: ubuntu-latest
                      shard: 1/1
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Show directories
              run: |
                  pwd
                  ls -la
                  ls -la ./packages/markuplint
                  ls -la ./packages/markuplint/lib
                  ls -la ./packages/@markuplint
                  ls -la ./packages/@markuplint/*
                  ls -la ./packages/@markuplint/*/lib
                  ls -la ./packages/@markuplint/config-presets
              shell: bash

            - name: Test
              uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3
              with:
                  timeout_minutes: 20
                  max_attempts: 3
                  shell: bash
                  command: npx vitest run --shard=${{ matrix.shard }}

    isolated-env:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                pm: [npm, yarn, pnpm]
                env: [esm, ts, ts-config-ts]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            # Add step to remove packageManager field using jq for pnpm tests
            - name: Remove packageManager field from package.json
              if: matrix.pm == 'pnpm'
              run: |
                  echo 'Removing packageManager field...'
                  jq 'del(.packageManager)' package.json > package.json.tmp && mv package.json.tmp package.json
                  echo 'package.json content after removal:'
                  cat package.json
              shell: bash

            - name: Cache Restore devDependencies
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Create sandbox directory
              run: |
                  mkdir -p ${{ github.workspace }}/../sandbox
                  cp -r ${{ github.workspace }}/test ${{ github.workspace }}/../sandbox
                  ls -la ${{ github.workspace }}/../sandbox/test

            - name: Debug - Check directory structure
              run: |
                  echo "=== Current working directory ==="
                  pwd
                  echo "=== List current directory ==="
                  ls -la
                  echo "=== Check if packages directory exists ==="
                  ls -la packages/ | head -10
                  echo "=== Check sandbox structure ==="
                  find ${{ github.workspace }}/../sandbox -type d -maxdepth 3
                  echo "=== Check if markuplint package exists ==="
                  ls -la packages/markuplint/ | head -5
                  echo "=== Check workspace path ==="
                  echo "workspace: ${{ github.workspace }}"
                  echo "parent: ${{ github.workspace }}/.."

            - name: Delete package manager settings
              run: jq 'del(.packageManager, .volta)' package.json > tmp.json && mv tmp.json package.json

            - name: Install pnpm
              if: matrix.pm == 'pnpm'
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
              with:
                  version: latest # Use latest pnpm version
                  run_install: false

            - name: Debug - Before install
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  echo "=== Current working directory ==="
                  pwd
                  echo "=== Check package.json ==="
                  head -20 package.json
                  echo "=== Check if file: paths exist ==="
                  ls -la ../../../../markuplint/packages/markuplint/ | head -5
                  echo "=== Test relative path calculation ==="
                  ls -la ../../../../markuplint/packages/@markuplint/ml-core/ | head -5
                  echo "=== Check all files in directory ==="
                  ls -la
                  echo "=== Check tsconfig.json (if exists) ==="
                  cat tsconfig.json 2>/dev/null || echo "tsconfig.json not found"
                  echo "=== Check markuplint.config.ts ==="
                  cat markuplint.config.ts 2>/dev/null || echo "markuplint.config.ts not found"

            - name: Install dependencies
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: ${{ matrix.pm }} install

            - name: Debug - After install
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  echo "=== Check if packages were installed ==="
                  ls -la node_modules/ | head -10
                  echo "=== Check markuplint in node_modules ==="
                  ls -la node_modules/markuplint/ 2>/dev/null || echo "markuplint not found in node_modules"

            - name: Test
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              env:
                  DEBUG: ${{ matrix.env == 'ts-config-ts' && 'ml-*' || '' }}
              run: |
                  if [ "${{ matrix.env }}" = "ts-config-ts" ]; then
                    echo "=== Debug tsx configuration ==="
                    echo "TSX version:"
                    npx tsx --version
                    echo "TypeScript configuration being used:"
                    npx tsx --print-config index.ts 2>/dev/null || echo "Cannot print config"
                    echo "Test TypeScript compilation:"
                    npx tsc --noEmit --showConfig 2>/dev/null || echo "tsc showConfig failed"
                  fi
                  ${{ matrix.pm }} test
