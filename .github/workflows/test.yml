name: Test

on:
    pull_request:
        branches:
            - dev
            - v3
            - v5
            - next
        paths:
            - '.github/workflows/test.yml'
            - 'packages/**'
            - '!**/*.md'
            - 'packages/@markuplint/config-presets/src/README.md'
            - 'test/**'
            - 'yarn.lock'
            - '.yarnrc.yml'

env:
    NODE_BUILD_VERSION: 22
    NX_DISABLE_DB: true

jobs:
    dev-setup:
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              id: cache-save-dev-depends
              uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    build:
        needs: dev-setup
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Build
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              run: yarn run build

            - name: Cache Save Production
              if: steps.cache-restore-prod.outputs.cache-hit != 'true'
              uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

    lint:
        needs: [dev-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Cache Restore Production
              id: cache-restore-prod
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Lint
              run: yarn run lint-check

    os-setup:
        runs-on: ${{ matrix.os }}

        # For PRs from Renovate, update production dependencies only and then run tests.
        # For PRs not from Renovate, proceed with the usual setup and tests.
        if: |
            !contains(github.event.pull_request.labels.*.name, 'Renovate')
            ||
            contains(github.event.pull_request.labels.*.name, 'Dependencies: Production')

        strategy:
            fail-fast: false
            matrix:
                os:
                    - ubuntu-latest
                    - macos-latest
                    - windows-latest
                node: [20]
                include:
                    - node: 22
                      os: ubuntu-latest
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              id: cache-restore-dev-depends
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Install dependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              run: yarn install --immutable

            - name: Cache Save devDependencies
              if: steps.cache-restore-dev-depends.outputs.cache-hit != 'true'
              uses: actions/cache/save@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

    test:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                node: [20]
                shard: [1/4, 2/4, 3/4, 4/4]
                include:
                    - node: 22
                      os: ubuntu-latest
                      shard: 1/1
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ matrix.node }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ matrix.node }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            - name: Cache Restore devDependencies
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ matrix.node }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Install dependencies
              run: yarn install --immutable

            - name: Show directories
              run: |
                  pwd
                  ls -la
                  ls -la ./packages/markuplint
                  ls -la ./packages/markuplint/lib
                  ls -la ./packages/@markuplint
                  ls -la ./packages/@markuplint/*
                  ls -la ./packages/@markuplint/*/lib
                  ls -la ./packages/@markuplint/config-presets
              shell: bash

            - name: Test
              uses: nick-fields/retry@ce71cc2ab81d554ebbe88c79ab5975992d79ba08 # v3
              with:
                  timeout_minutes: 20
                  max_attempts: 3
                  shell: bash
                  command: npx vitest run --shard=${{ matrix.shard }}

    isolated-env:
        needs: [os-setup, build]
        runs-on: ${{ matrix.os }}
        env:
            PACKAGES: 'markuplint @markuplint/alpine-parser @markuplint/astro-parser @markuplint/config-presets @markuplint/cli-utils @markuplint/ejs-parser @markuplint/erb-parser @markuplint/file-resolver @markuplint/html-parser @markuplint/html-spec @markuplint/i18n @markuplint/jsx-parser @markuplint/liquid-parser @markuplint/ml-ast @markuplint/ml-config @markuplint/ml-core @markuplint/ml-spec @markuplint/mustache-parser @markuplint/nunjucks-parser @markuplint/parser-utils @markuplint/php-parser @markuplint/pug-parser @markuplint/react-spec @markuplint/rule-textlint @markuplint/rules @markuplint/selector @markuplint/shared @markuplint/smarty-parser @markuplint/svelte-parser @markuplint/types @markuplint/vue-parser @markuplint/vue-spec'
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest]
                pm: [npm, yarn, pnpm]
                env: [esm, ts, ts-config-ts]
        steps:
            - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
              with:
                  # SEE: https://github.com/lerna/lerna/issues/2542
                  fetch-depth: '0'

            - name: Use Node.js ${{ env.NODE_BUILD_VERSION }}
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
              with:
                  node-version: ${{ env.NODE_BUILD_VERSION }}

            - name: Enable Corepack and setup Yarn v4
              run: |
                  corepack enable
                  yarn --version

            - name: Get yarn cache directory path
              id: yarn-cache-dir-path
              run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

            # Add step to remove packageManager field using jq for pnpm tests
            - name: Remove packageManager field from package.json
              if: matrix.pm == 'pnpm'
              run: |
                  echo 'Removing packageManager field...'
                  jq 'del(.packageManager)' package.json > package.json.tmp && mv package.json.tmp package.json
                  echo 'package.json content after removal:'
                  cat package.json
              shell: bash

            - name: Cache Restore devDependencies
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  path: |
                      '**/node_modules'
                      ${{ steps.yarn-cache-dir-path.outputs.dir }}
                  key: dev-depends-${{ matrix.os }}-node${{ env.NODE_BUILD_VERSION }}-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}

            - name: Cache Restore Production
              uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684 # v4
              with:
                  enableCrossOsArchive: true
                  path: |
                      packages/**/lib
                      packages/**/cjs
                      packages/**/esm
                      packages/@markuplint/config-presets/preset.*.json
                      packages/@markuplint/html-spec/index.js
                      packages/@markuplint/html-spec/index.json
                  key: prod-node${{ env.NODE_BUILD_VERSION }}-${{ github.sha }}

            - name: Create sandbox directory
              run: |
                  mkdir -p ${{ github.workspace }}/../sandbox
                  cp -r ${{ github.workspace }}/test ${{ github.workspace }}/../sandbox
                  ls -la ${{ github.workspace }}/../sandbox/test

            - name: Delete package manager settings
              run: jq 'del(.packageManager, .volta)' package.json > tmp.json && mv tmp.json package.json

            - name: Install pnpm
              if: matrix.pm == 'pnpm'
              uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4
              with:
                  version: latest # Use latest pnpm version
                  run_install: false

            - name: Package paths (npm)
              uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
              id: package-paths
              with:
                  script: |
                      const packages = process.env.PACKAGES.split(' ');
                      return packages.map(p => `file:../../../../markuplint/packages/${p}`).join(' ');
                  result-encoding: string

            - name: Create the lock file (npm)
              if: matrix.pm == 'npm'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  npm install -S ${{ steps.package-paths.outputs.result }}

            - name: Create the lock file (yarn)
              if: matrix.pm == 'yarn'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  IFS=' ' read -r -a packages <<< "${{ env.PACKAGES }}"
                  for package in "${packages[@]}"
                  do
                    (cd "../../../../markuplint/packages/$package" && yarn link)
                    yarn link $package
                  done
                  ${{ matrix.pm }} install

            - name: Create the lock file (pnpm)
              if: matrix.pm == 'pnpm'
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  IFS=' ' read -r -a packages <<< "${{ env.PACKAGES }}"
                  for package in "${packages[@]}"
                  do
                    # Skip linking the main 'markuplint' package itself
                    if [ "$package" != "markuplint" ]; then
                      echo "Linking $package..."
                      pnpm link "../../../../markuplint/packages/$package"
                    else
                      echo "Skipping initial link for markuplint package."
                    fi
                  done
                  # Explicitly add the local markuplint package and install other deps
                  echo "Adding local markuplint package and installing dependencies..."
                  pnpm add "../../../../markuplint/packages/markuplint"
              shell: bash

            - name: Test
              working-directory: ../sandbox/test/isolated-env/${{ matrix.env }}
              run: |
                  ${{ matrix.pm }} test
